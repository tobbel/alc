// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferered library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
(function($) {
function map(x) {
  x = Object.create(null);
  x.x = 0;
  delete x.x;
  return x;
}
var A = map();
var B = map();
var C = map();
var D = map();
var E = map();
var F = map();
var G = map();
var H = map();
var J = map();
var K = map();
var L = map();
var M = map();
var N = map();
var O = map();
var P = map();
var Q = map();
var R = map();
var S = map();
var T = map();
var U = map();
var V = map();
var W = map();
var X = map();
var Y = map();
var Z = map();
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
$.functionThatReturnsNull = function() {
};
;
function parseReflectionData(reflectionData) {
  "use strict";
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  function defineClass(name, fields) {
    var accessors = [];
    var str = "function " + name + "(";
    var body = "";
    var fieldNames = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, name);
      fieldNames += "'" + field + "',";
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += name + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + name + ";\n";
    str += "if($desc instanceof Array) $desc = \$desc[1];\n";
    str += name + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string")
      str += name + ".name=\"" + name + "\";\n";
    str += name + "." + "$__fields__" + "=[" + fieldNames + "];\n";
    str += accessors.join("");
    return str;
  }
  init.createNewIsolate = function() {
    return new Isolate();
  };
  init.classIdExtractor = function(o) {
    return o.constructor.name;
  };
  init.classFieldsExtractor = function(o) {
    var fieldNames = o.constructor.$__fields__;
    if (!fieldNames)
      return [];
    var result = [];
    result.length = fieldNames.length;
    for (var i = 0; i < fieldNames.length; i++)
      result[i] = o[fieldNames[i]];
    return result;
  };
  init.instanceFromClassId = function(name) {
    return new init.allClasses[name]();
  };
  init.initializeEmptyInstance = function(name, o, fields) {
    init.allClasses[name].apply(o, fields);
    return o;
  };
  var inheritFrom = function() {
    function tmp() {
    }
    return function(constructor, superConstructor) {
      if (superConstructor == null) {
        var prototype = constructor.prototype;
        prototype.constructor = constructor;
        prototype.$isObject = constructor;
        return prototype;
      }
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      var members = Object.keys(properties);
      for (var i = 0; i < members.length; i++) {
        var member = members[i];
        object[member] = properties[member];
      }
      object["$is" + constructor.name] = constructor;
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  function finishClasses(processedClasses) {
    var allClasses = init.allClasses;
    processedClasses.combinedConstructorFunction += "return [\n" + processedClasses.constructorsList.join(",\n  ") + "\n]";
    var constructors = new Function("$collectedClasses", processedClasses.combinedConstructorFunction)(processedClasses.collected);
    processedClasses.combinedConstructorFunction = null;
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = processedClasses.collected[cls];
      var globalObject = $;
      if (desc instanceof Array) {
        globalObject = desc[0] || $;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = init.finishedClasses;
    function finishClass(cls) {
      if (finishedClasses[cls])
        return;
      finishedClasses[cls] = true;
      var superclass = processedClasses.pending[cls];
      if (superclass && superclass.indexOf("+") > 0) {
        var s = superclass.split("+");
        superclass = s[0];
        var mixinClass = s[1];
        finishClass(mixinClass);
        var mixin = allClasses[mixinClass];
        var mixinPrototype = mixin.prototype;
        var clsPrototype = allClasses[cls].prototype;
        var properties = Object.keys(mixinPrototype);
        for (var i = 0; i < properties.length; i++) {
          var d = properties[i];
          if (!hasOwnProperty.call(clsPrototype, d))
            clsPrototype[d] = mixinPrototype[d];
        }
      }
      if (!superclass || typeof superclass != "string") {
        inheritFrom(allClasses[cls], null);
        return;
      }
      finishClass(superclass);
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var constructor = allClasses[cls];
      var prototype = inheritFrom(constructor, superConstructor);
      if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    var properties = Object.keys(processedClasses.pending);
    for (var i = 0; i < properties.length; i++)
      finishClass(properties[i]);
  }
  function processClassData(cls, descriptor, processedClasses) {
    var newDesc = {};
    var previousProperty;
    var properties = Object.keys(descriptor);
    for (var i = 0; i < properties.length; i++) {
      var property = properties[i];
      var firstChar = property.substring(0, 1);
      if (property === "static")
        processStatics(init.statics[cls] = descriptor[property], processedClasses);
      else if (firstChar === "+") {
        mangledNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
      } else if (firstChar === "*") {
        newDesc[previousProperty].$defaultValues = descriptor[property];
        var optionalMethods = newDesc.$methodsWithOptionalArguments;
        if (!optionalMethods)
          newDesc.$methodsWithOptionalArguments = optionalMethods = {};
        optionalMethods[property] = previousProperty;
      } else {
        var elem = descriptor[property];
        if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
          addStubs(newDesc, elem, property, false, descriptor, []);
        else
          newDesc[previousProperty = property] = elem;
      }
    }
    var classData = newDesc["^"], split, supr, fields = classData;
    var s = fields.split(";");
    fields = s[1] == "" ? [] : s[1].split(",");
    supr = s[0];
    split = supr.split(":");
    if (split.length == 2) {
      supr = split[0];
      var functionSignature = split[1];
      if (functionSignature)
        newDesc.$signature = function(s) {
          return function() {
            return init.metadata[s];
          };
        }(functionSignature);
    }
    if (supr)
      processedClasses.pending[cls] = supr;
    processedClasses.combinedConstructorFunction += defineClass(cls, fields);
    processedClasses.constructorsList.push(cls);
    processedClasses.collected[cls] = [globalObject, newDesc];
    classes.push(cls);
  }
  function processStatics(descriptor, processedClasses) {
    var properties = Object.keys(descriptor);
    for (var i = 0; i < properties.length; i++) {
      var property = properties[i];
      if (property === "^")
        continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar === "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
        if (element && element.length)
          init.typeInformation[previousProperty] = element;
      } else if (firstChar === "*") {
        globalObject[previousProperty].$defaultValues = element;
        var optionalMethods = descriptor.$methodsWithOptionalArguments;
        if (!optionalMethods)
          descriptor.$methodsWithOptionalArguments = optionalMethods = {};
        optionalMethods[property] = previousProperty;
      } else if (typeof element === "function") {
        globalObject[previousProperty = property] = element;
        functions.push(property);
        init.globalFunctions[property] = element;
      } else if (element.constructor === Array)
        addStubs(globalObject, element, property, true, descriptor, functions);
      else {
        previousProperty = property;
        processClassData(property, element, processedClasses);
      }
    }
  }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var index = 0, alias = array[index], f;
    if (typeof alias == "string")
      f = array[++index];
    else {
      f = alias;
      alias = name;
    }
    var funcs = [originalDescriptor[name] = descriptor[name] = descriptor[alias] = f];
    f.$stubName = name;
    functions.push(name);
    for (; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function")
        break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++)
      funcs[i].$callName = array[index + 1];
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      descriptor[name].$getter = f;
      f.$getterStub = true;
      if (isStatic)
        init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName)
        functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
    }
  }
  function tearOffGetter(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic ? function() {
      if (cache === void 0)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
      return cache;
    } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  if (!init.libraries)
    init.libraries = [];
  if (!init.mangledNames)
    init.mangledNames = map();
  if (!init.mangledGlobalNames)
    init.mangledGlobalNames = map();
  if (!init.statics)
    init.statics = map();
  if (!init.typeInformation)
    init.typeInformation = map();
  if (!init.globalFunctions)
    init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  var processedClasses = Object.create(null);
  processedClasses.collected = Object.create(null);
  processedClasses.pending = Object.create(null);
  processedClasses.constructorsList = [];
  processedClasses.combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    if (fields instanceof Array)
      fields = fields[0];
    var classes = [];
    var functions = [];
    processStatics(descriptor, processedClasses);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
  }
  finishClasses(processedClasses);
}
var dart = [
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: ["super$Interceptor$toString$0", function(receiver) {
      return H.Primitives_objectToString(receiver);
    }],
    "%": "ANGLEInstancedArrays|Animation|AnimationEffect|AnimationNode|AnimationTimeline|AudioListener|CSS|Cache|CacheStorage|CanvasGradient|CanvasPattern|ConsoleBase|Coordinates|Counter|CredentialsContainer|Crypto|DOMError|DOMFileSystem|DOMFileSystemSync|DOMImplementation|DOMParser|DataTransfer|Database|DeprecatedStorageInfo|DeprecatedStorageQuota|DeviceRotationRate|DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|EXTBlendMinMax|EXTFragDepth|EXTShaderTextureLOD|EXTTextureFilterAnisotropic|EntrySync|FileEntrySync|FileError|FileReaderSync|FileWriterSync|FormData|Geofencing|Geolocation|Geoposition|HTMLAllCollection|IDBFactory|IDBKeyRange|IDBObjectStore|ImageBitmap|InjectedScriptHost|MIDIInputMap|MIDIOutputMap|MediaDeviceInfo|MediaError|MediaKeyError|MediaKeys|MemoryInfo|MessageChannel|Metadata|MutationObserver|NavigatorUserMediaError|NodeFilter|NodeIterator|OESElementIndexUint|OESStandardDerivatives|OESTextureFloat|OESTextureFloatLinear|OESTextureHalfFloat|OESTextureHalfFloatLinear|OESVertexArrayObject|PagePopupController|PerformanceEntry|PerformanceMark|PerformanceMeasure|PerformanceResourceTiming|PerformanceTiming|PeriodicWave|PositionError|PushManager|PushRegistration|RGBColor|RTCIceCandidate|RTCStatsResponse|Range|ReadableStream|Rect|SQLError|SQLResultSet|SQLTransaction|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPreserveAspectRatio|SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGPreserveAspectRatio|SVGRenderingIntent|SVGUnitTypes|Screen|ServiceWorkerClients|ServiceWorkerContainer|SpeechRecognitionAlternative|SpeechSynthesisVoice|StorageInfo|StorageQuota|SubtleCrypto|TextMetrics|Timing|TreeWalker|ValidityState|VideoPlaybackQuality|WebGLBuffer|WebGLCompressedTextureATC|WebGLCompressedTextureETC1|WebGLCompressedTexturePVRTC|WebGLCompressedTextureS3TC|WebGLContextAttributes|WebGLDebugRendererInfo|WebGLDebugShaders|WebGLDepthTexture|WebGLDrawBuffers|WebGLExtensionLoseContext|WebGLFramebuffer|WebGLLoseContext|WebGLProgram|WebGLRenderbuffer|WebGLShader|WebGLShaderPrecisionFormat|WebGLTexture|WebGLUniformLocation|WebGLVertexArrayObjectOES|WebKitCSSMatrix|WebKitMutationObserver|WorkerConsole|WorkerPerformance|XMLSerializer|XPathEvaluator|XPathExpression|XPathNSResolver|XPathResult|XSLTProcessor|mozRTCIceCandidate"
  },
  JSBool: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  },
  JSNull: {
    "^": "Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    }
  },
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    },
    $isJSObject: 1
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;",
    toString$0: function(receiver) {
      return String(receiver);
    }
  },
  JSArray: {
    "^": "Interceptor;",
    checkMutable$1: function(receiver, reason) {
      if (!!receiver.immutable$list)
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    checkGrowable$1: function(receiver, reason) {
      if (!!receiver.fixed$length)
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index, null, null));
      this.checkGrowable$1(receiver, "removeAt");
      return receiver.splice(index, 1)[0];
    },
    remove$1: function(receiver, element) {
      var i;
      this.checkGrowable$1(receiver, "remove");
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        this.add$1(receiver, t1.__internal$_current);
    },
    forEach$1: function(receiver, f) {
      var end, i;
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    },
    join$1: function(receiver, separator) {
      var t1, list, i, t2;
      t1 = receiver.length;
      list = Array(t1);
      list.fixed$length = Array;
      for (i = 0; i < receiver.length; ++i) {
        t2 = H.S(receiver[i]);
        if (i >= t1)
          return H.ioore(list, i);
        list[i] = t2;
      }
      return list.join(separator);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    fold$2: function(receiver, initialValue, combine) {
      var $length, value, i;
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, i, t1;
      this.checkMutable$1(receiver, "set range");
      P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
      $length = end - start;
      if ($length === 0)
        return;
      if (skipCount < 0)
        H.throwExpression(P.RangeError$range(skipCount, 0, null, "skipCount", null));
      if (skipCount + $length > iterable.length)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (skipCount < start)
        for (i = $length - 1; i >= 0; --i) {
          t1 = skipCount + i;
          if (t1 < 0 || t1 >= iterable.length)
            return H.ioore(iterable, t1);
          receiver[start + i] = iterable[t1];
        }
      else
        for (i = 0; i < $length; ++i) {
          t1 = skipCount + i;
          if (t1 < 0 || t1 >= iterable.length)
            return H.ioore(iterable, t1);
          receiver[start + i] = iterable[t1];
        }
    },
    sort$1: function(receiver, compare) {
      this.checkMutable$1(receiver, "sort");
      H.Sort__doSort(receiver, 0, receiver.length - 1, compare);
    },
    indexOf$2: function(receiver, element, start) {
      var i;
      if (start >= receiver.length)
        return -1;
      for (i = start; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element))
          return i;
      return -1;
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1;
      if (growable)
        return H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      else {
        t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
        t1.fixed$length = Array;
        return t1;
      }
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, 0, null);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength, null, null));
      this.checkGrowable$1(receiver, "set length");
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      this.checkMutable$1(receiver, "indexed set");
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      receiver[index] = value;
    },
    $isJSIndexable: 1,
    $isList: 1,
    $asList: null,
    $isEfficientLength: 1
  },
  ArrayIterator: {
    "^": "Object;_iterable,__interceptors$_length,_index,__interceptors$_current",
    get$current: function() {
      return this.__interceptors$_current;
    },
    moveNext$0: function() {
      var t1, $length, t2;
      t1 = this._iterable;
      $length = t1.length;
      if (this.__interceptors$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t2 = this._index;
      if (t2 >= $length) {
        this.__interceptors$_current = null;
        return false;
      }
      this.__interceptors$_current = t1[t2];
      this._index = t2 + 1;
      return true;
    }
  },
  JSNumber: {
    "^": "Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    get$isInfinite: function(receiver) {
      return receiver == Infinity || receiver == -Infinity;
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$("" + receiver));
    },
    toDouble$0: function(receiver) {
      return receiver;
    },
    toStringAsFixed$1: function(receiver, fractionDigits) {
      var result;
      H.checkInt(fractionDigits);
      if (fractionDigits > 20)
        throw H.wrapException(P.RangeError$(fractionDigits));
      result = receiver.toFixed(fractionDigits);
      if (receiver === 0 && this.get$isNegative(receiver))
        return "-" + result;
      return result;
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver * other;
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $isnum: 1
  },
  JSInt: {
    "^": "JSNumber;",
    $is$double: 1,
    $isnum: 1,
    $is$int: 1
  },
  JSDouble: {
    "^": "JSNumber;",
    $is$double: 1,
    $isnum: 1
  },
  JSString: {
    "^": "Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    substring$2: function(receiver, startIndex, endIndex) {
      var t1;
      if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
        H.throwExpression(P.ArgumentError$(startIndex));
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      t1 = J.getInterceptor$n(startIndex);
      if (t1.$lt(startIndex, 0))
        throw H.wrapException(P.RangeError$value(startIndex, null, null));
      if (t1.$gt(startIndex, endIndex))
        throw H.wrapException(P.RangeError$value(startIndex, null, null));
      if (J.$gt$n(endIndex, receiver.length))
        throw H.wrapException(P.RangeError$value(endIndex, null, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    indexOf$2: function(receiver, pattern, start) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      return receiver.indexOf(pattern, start);
    },
    contains$2: function(receiver, other, startIndex) {
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isString: 1
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    if (!init.globalState.currentContext._isExecutingEvent)
      init.globalState.topEventLoop.run$0();
    return result;
  },
  leaveJsAsync: function() {
    --init.globalState.topEventLoop._activeJsAsyncCount;
  },
  startRootIsolate: function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1.args_0 = args;
    args = args;
    t1.args_0 = args;
    if (args == null) {
      args = [];
      t1.args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._Manager$1(entry);
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState.nextIsolateId++;
    t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t2, t3, t4, init.createNewIsolate(), t5, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  },
  IsolateNatives_computeThisScriptFromTrace: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = function() {
        try {
          throw new Error();
        } catch (e) {
          return e.stack;
        }
      }();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  },
  IsolateNatives__processWorkerMessage: function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
    msg = new H._Deserializer(true, []).deserialize$1(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : H.IsolateNatives__getJSFunctionFromName(functionName);
        args = t1.$index(msg, "args");
        message = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "replyTo"));
        t1 = init.globalState.nextIsolateId++;
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t1, t2, t3, init.createNewIsolate(), t4, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", msg], null, null);
          t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  },
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "log", "msg", msg], null, null);
      t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        self.console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = H.getTraceFromException(exception);
        throw H.wrapException(P.Exception_Exception(trace));
      }
  },
  IsolateNatives__getJSFunctionFromName: function(functionName) {
    return init.globalFunctions[functionName]();
  },
  IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2, t3;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort;
    t2 = init.globalState.currentContext.id;
    t3 = context.pauseCapability;
    J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
    t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
    if (startPaused === true) {
      context.addPause$2(t3, t3);
      init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, t2, "start isolate"));
    } else
      t2.call$0();
  },
  _clone: function(message) {
    return new H._Deserializer(true, []).deserialize$1(new H._Serializer(false, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(message));
  },
  startRootIsolate_closure: {
    "^": "Closure:0;box_0,entry_1",
    call$0: function() {
      this.entry_1.call$1(this.box_0.args_0);
    }
  },
  startRootIsolate_closure0: {
    "^": "Closure:0;box_0,entry_2",
    call$0: function() {
      this.entry_2.call$2(this.box_0.args_0, null);
    }
  },
  _Manager: {
    "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3;
      t1 = self.window == null;
      t2 = self.Worker;
      t3 = t1 && !!self.postMessage;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        self.onmessage = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t1);
        self.dartPrint = self.dartPrint || function(serialize) {
          return function(object) {
            if (self.console && self.console.log)
              self.console.log(object);
            else
              self.postMessage(serialize(object));
          };
        }(H._Manager__serializePrintMessage);
      }
    },
    static: {_Manager__serializePrintMessage: function(object) {
        var t1 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", object], null, null);
        return new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t1);
      }}
  },
  _IsolateContext: {
    "^": "Object;id>,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized,isPaused,delayedEvents,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
    addPause$2: function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    },
    removePause$1: function(resume) {
      var t1, t2, $event, t3, t4, t5;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          t2 = init.globalState.topEventLoop.events;
          t3 = t2._head;
          t4 = t2._table;
          t5 = t4.length;
          t3 = (t3 - 1 & t5 - 1) >>> 0;
          t2._head = t3;
          if (t3 < 0 || t3 >= t5)
            return H.ioore(t4, t3);
          t4[t3] = $event;
          if (t3 === t2._tail)
            t2._grow$0();
          ++t2._modificationCount;
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    },
    addDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if (J.contains$1$asx(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    },
    removeDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      J.remove$1$ax(t1, responsePort);
    },
    setErrorsFatal$2: function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    },
    handlePing$2: function(responsePort, pingType) {
      var t1, t2;
      t1 = J.getInterceptor(pingType);
      if (!t1.$eq(pingType, 0))
        t2 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        J.send$1$x(responsePort, null);
        return;
      }
      t2 = new H._IsolateContext_handlePing_respond(responsePort);
      if (t1.$eq(pingType, 2)) {
        init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(this, t2, "ping"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = P.ListQueue$(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(0, t2);
    },
    handleKill$2: function(authentification, priority) {
      var t1, t2;
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      t1 = J.getInterceptor(priority);
      if (!t1.$eq(priority, 0))
        t2 = t1.$eq(priority, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        this.kill$0();
        return;
      }
      if (t1.$eq(priority, 2)) {
        t1 = init.globalState.topEventLoop;
        t2 = this.get$kill();
        t1.events._add$1(0, new H._IsolateEvent(this, t2, "kill"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = P.ListQueue$(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(0, this.get$kill());
    },
    handleUncaughtError$2: function(error, stackTrace) {
      var t1, message, t2;
      t1 = this.errorPorts;
      if (t1._collection$_length === 0) {
        if (this.errorsAreFatal === true && this === init.globalState.rootContext)
          return;
        if (self.console && self.console.error)
          self.console.error(error, stackTrace);
        else {
          P.print(error);
          if (stackTrace != null)
            P.print(stackTrace);
        }
        return;
      }
      message = Array(2);
      message.fixed$length = Array;
      message[0] = J.toString$0(error);
      message[1] = stackTrace == null ? null : J.toString$0(stackTrace);
      for (t2 = new P.LinkedHashSetIterator(t1, t1._collection$_modifications, null, null), t2._collection$_cell = t1._collection$_first; t2.moveNext$0();)
        J.send$1$x(t2._collection$_current, message);
    },
    eval$1: function(code) {
      var old, result, oldIsExecutingEvent, e, s, exception, t1;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      oldIsExecutingEvent = this._isExecutingEvent;
      this._isExecutingEvent = true;
      try {
        result = code.call$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
        if (this.errorsAreFatal === true) {
          this.kill$0();
          if (this === init.globalState.rootContext)
            throw exception;
        }
      } finally {
        this._isExecutingEvent = oldIsExecutingEvent;
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
        if (this._scheduledControlEvents != null)
          for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
            this._scheduledControlEvents.removeFirst$0().call$0();
      }
      return result;
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    _addRegistration$2: function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(0, portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    },
    _updateGlobalState$0: function() {
      if (this.ports.__js_helper$_length - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this.kill$0();
    },
    kill$0: [function() {
      var t1, t2;
      t1 = this._scheduledControlEvents;
      if (t1 != null)
        t1.clear$0(0);
      for (t1 = this.ports, t2 = t1.get$values(t1), t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t2.__internal$_iterable), t2._f), [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2.__internal$_current._close$0();
      if (t1.__js_helper$_length > 0) {
        t1._last = null;
        t1._first = null;
        t1._rest = null;
        t1._nums = null;
        t1._strings = null;
        t1.__js_helper$_length = 0;
        t1._modifications = t1._modifications + 1 & 67108863;
      }
      this.weakPorts.clear$0(0);
      init.globalState.isolates.remove$1(0, this.id);
      this.errorPorts.clear$0(0);
      t1 = this.doneHandlers;
      if (t1 != null) {
        for (t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          J.send$1$x(t1.__interceptors$_current, null);
        this.doneHandlers = null;
      }
    }, "call$0", "get$kill", 0, 0, 1]
  },
  _IsolateContext_handlePing_respond: {
    "^": "Closure:1;responsePort_0",
    call$0: function() {
      J.send$1$x(this.responsePort_0, null);
    }
  },
  _EventLoop: {
    "^": "Object;events,_activeJsAsyncCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(0, init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports.__js_helper$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates.__js_helper$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "close"], null, null);
          t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if (self.window != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = H.getTraceFromException(exception);
          t1 = init.globalState.mainManager;
          t2 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], null, null);
          t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
          t1.toString;
          self.postMessage(t2);
        }
    }
  },
  _EventLoop__runHelper_next: {
    "^": "Closure:1;this_0",
    call$0: function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }
  },
  _IsolateEvent: {
    "^": "Object;isolate,fn,message",
    process$0: function() {
      var t1 = this.isolate;
      if (t1.isPaused) {
        t1.delayedEvents.push(this);
        return;
      }
      t1.eval$1(this.fn);
    }
  },
  _MainManagerStub: {
    "^": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure:0;entryPoint_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyTo_5",
    call$0: function() {
      H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyTo_5);
    }
  },
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure:1;topLevel_0,args_1,message_2,isSpawnUri_3,context_4",
    call$0: function() {
      var t1, t2, t3;
      this.context_4.initialized = true;
      if (this.isSpawnUri_3 !== true)
        this.topLevel_0.call$1(this.message_2);
      else {
        t1 = this.topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this.args_1, this.message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this.args_1);
          else
            t1.call$0();
        }
      }
    }
  },
  _BaseSendPort: {
    "^": "Object;"
  },
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var isolate, t1, msg, t2;
      isolate = init.globalState.isolates.$index(0, this._isolateId);
      if (isolate == null)
        return;
      t1 = this._receivePort;
      if (t1.get$_isClosed())
        return;
      msg = H._clone(message);
      if (isolate.get$controlPort() === t1) {
        t1 = J.getInterceptor$asx(msg);
        switch (t1.$index(msg, 0)) {
          case "pause":
            isolate.addPause$2(t1.$index(msg, 1), t1.$index(msg, 2));
            break;
          case "resume":
            isolate.removePause$1(t1.$index(msg, 1));
            break;
          case "add-ondone":
            isolate.addDoneListener$1(t1.$index(msg, 1));
            break;
          case "remove-ondone":
            isolate.removeDoneListener$1(t1.$index(msg, 1));
            break;
          case "set-errors-fatal":
            isolate.setErrorsFatal$2(t1.$index(msg, 1), t1.$index(msg, 2));
            break;
          case "ping":
            isolate.handlePing$2(t1.$index(msg, 1), t1.$index(msg, 2));
            break;
          case "kill":
            isolate.handleKill$2(t1.$index(msg, 1), t1.$index(msg, 2));
            break;
          case "getErrors":
            t1 = t1.$index(msg, 1);
            isolate.errorPorts.add$1(0, t1);
            break;
          case "stopErrors":
            t1 = t1.$index(msg, 1);
            isolate.errorPorts.remove$1(0, t1);
            break;
        }
        return;
      }
      t1 = init.globalState.topEventLoop;
      t2 = "receive " + H.S(message);
      t1.events._add$1(0, new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(this, msg), t2));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H._NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$_id();
    }
  },
  _NativeJsSendPort_send_closure: {
    "^": "Closure:0;this_0,msg_1",
    call$0: function() {
      var t1 = this.this_0._receivePort;
      if (!t1.get$_isClosed())
        t1.__isolate_helper$_add$1(0, this.msg_1);
    }
  },
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var t1, workerMessage, manager;
      t1 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "message", "port", this, "msg", message], null, null);
      workerMessage = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t1);
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H._WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = this._workerId;
      if (typeof t1 !== "number")
        return t1.$shl();
      t2 = this._isolateId;
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
    }
  },
  RawReceivePortImpl: {
    "^": "Object;_id<,_handler,_isClosed<",
    _close$0: function() {
      this._isClosed = true;
      this._handler = null;
    },
    __isolate_helper$_add$1: function(_, dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    $isRawReceivePort: 1
  },
  TimerImpl: {
    "^": "Object;_once,_inEventLoop,_handle",
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = self.setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(0, new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else if (self.setTimeout != null) {
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._handle = self.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
      } else
        throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "^": "Closure:1;this_0,callback_1",
    call$0: function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }
  },
  TimerImpl_internalCallback0: {
    "^": "Closure:1;this_2,callback_3",
    call$0: function() {
      this.this_2._handle = null;
      H.leaveJsAsync();
      this.callback_3.call$0();
    }
  },
  CapabilityImpl: {
    "^": "Object;_id<",
    get$hashCode: function(_) {
      var hash = this._id;
      hash = C.JSInt_methods._shrOtherPositive$1(hash, 0) ^ C.JSInt_methods._tdivFast$1(hash, 4294967296);
      hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
      hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
      hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
      return (hash ^ hash >>> 16) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (other instanceof H.CapabilityImpl)
        return this._id === other._id;
      return false;
    }
  },
  _Serializer: {
    "^": "Object;_serializeSendPorts,serializedObjectIds",
    serialize$1: [function(x) {
      var t1, serializationId, serializeTearOff, t2, $name;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = this.serializedObjectIds;
      serializationId = t1.$index(0, x);
      if (serializationId != null)
        return ["ref", serializationId];
      t1.$indexSet(0, x, t1.__js_helper$_length);
      t1 = J.getInterceptor(x);
      if (!!t1.$isNativeByteBuffer)
        return ["buffer", x];
      if (!!t1.$isNativeTypedData)
        return ["typed", x];
      if (!!t1.$isJSIndexable)
        return this.serializeJSIndexable$1(x);
      if (!!t1.$isInternalMap) {
        serializeTearOff = this.get$serialize();
        t2 = t1.get$keys(x);
        t2 = H.MappedIterable_MappedIterable(t2, serializeTearOff, H.getRuntimeTypeArgument(t2, "IterableBase", 0), null);
        t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0));
        t1 = t1.get$values(x);
        t1 = H.MappedIterable_MappedIterable(t1, serializeTearOff, H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
        return ["map", t2, P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0))];
      }
      if (!!t1.$isJSObject)
        return this.serializeJSObject$1(x);
      if (!!t1.$isInterceptor)
        this.unsupported$1(x);
      if (!!t1.$isRawReceivePort)
        this.unsupported$2(x, "RawReceivePorts can't be transmitted:");
      if (!!t1.$is_NativeJsSendPort)
        return this.serializeJsSendPort$1(x);
      if (!!t1.$is_WorkerSendPort)
        return this.serializeWorkerSendPort$1(x);
      if (!!t1.$isClosure) {
        $name = x.$name;
        if ($name == null)
          this.unsupported$2(x, "Closures can't be transmitted:");
        return ["function", $name];
      }
      return ["dart", init.classIdExtractor(x), this.serializeArrayInPlace$1(init.classFieldsExtractor(x))];
    }, "call$1", "get$serialize", 2, 0, 2],
    unsupported$2: function(x, message) {
      throw H.wrapException(P.UnsupportedError$(H.S(message == null ? "Can't transmit:" : message) + " " + H.S(x)));
    },
    unsupported$1: function(x) {
      return this.unsupported$2(x, null);
    },
    serializeJSIndexable$1: function(indexable) {
      var serialized = this.serializeArray$1(indexable);
      if (!!indexable.fixed$length)
        return ["fixed", serialized];
      if (!indexable.fixed$length)
        return ["extendable", serialized];
      if (!indexable.immutable$list)
        return ["mutable", serialized];
      if (indexable.constructor === Array)
        return ["const", serialized];
      this.unsupported$2(indexable, "Can't serialize indexable: ");
    },
    serializeArray$1: function(x) {
      var serialized, i, t1;
      serialized = [];
      C.JSArray_methods.set$length(serialized, x.length);
      for (i = 0; i < x.length; ++i) {
        t1 = this.serialize$1(x[i]);
        if (i >= serialized.length)
          return H.ioore(serialized, i);
        serialized[i] = t1;
      }
      return serialized;
    },
    serializeArrayInPlace$1: function(x) {
      var i;
      for (i = 0; i < x.length; ++i)
        C.JSArray_methods.$indexSet(x, i, this.serialize$1(x[i]));
      return x;
    },
    serializeJSObject$1: function(x) {
      var keys, values, i, t1;
      if (!!x.constructor && x.constructor !== Object)
        this.unsupported$2(x, "Only plain JS Objects are supported:");
      keys = Object.keys(x);
      values = [];
      C.JSArray_methods.set$length(values, keys.length);
      for (i = 0; i < keys.length; ++i) {
        t1 = this.serialize$1(x[keys[i]]);
        if (i >= values.length)
          return H.ioore(values, i);
        values[i] = t1;
      }
      return ["js-object", keys, values];
    },
    serializeWorkerSendPort$1: function(x) {
      if (this._serializeSendPorts)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      return ["raw sendport", x];
    },
    serializeJsSendPort$1: function(x) {
      if (this._serializeSendPorts)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      return ["raw sendport", x];
    }
  },
  _Deserializer: {
    "^": "Object;_adjustSendPorts,deserializedObjects",
    deserialize$1: [function(x) {
      var serializationId, t1, result, classId, fields, emptyInstance;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      if (typeof x !== "object" || x === null || x.constructor !== Array)
        throw H.wrapException(P.ArgumentError$("Bad serialized message: " + H.S(x)));
      switch (C.JSArray_methods.get$first(x)) {
        case "ref":
          if (1 >= x.length)
            return H.ioore(x, 1);
          serializationId = x[1];
          t1 = this.deserializedObjects;
          if (serializationId >>> 0 !== serializationId || serializationId >= t1.length)
            return H.ioore(t1, serializationId);
          return t1[serializationId];
        case "buffer":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          return result;
        case "typed":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          return result;
        case "fixed":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          t1 = this.deserializeArrayInPlace$1(result);
          t1.$builtinTypeInfo = [null];
          t1.fixed$length = Array;
          return t1;
        case "extendable":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          t1 = this.deserializeArrayInPlace$1(result);
          t1.$builtinTypeInfo = [null];
          return t1;
        case "mutable":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          return this.deserializeArrayInPlace$1(result);
        case "const":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          t1 = this.deserializeArrayInPlace$1(result);
          t1.$builtinTypeInfo = [null];
          t1.fixed$length = Array;
          return t1;
        case "map":
          return this.deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "raw sendport":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          return result;
        case "js-object":
          return this.deserializeJSObject$1(x);
        case "function":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = init.globalFunctions[x[1]]();
          this.deserializedObjects.push(result);
          return result;
        case "dart":
          t1 = x.length;
          if (1 >= t1)
            return H.ioore(x, 1);
          classId = x[1];
          if (2 >= t1)
            return H.ioore(x, 2);
          fields = x[2];
          emptyInstance = init.instanceFromClassId(classId);
          this.deserializedObjects.push(emptyInstance);
          this.deserializeArrayInPlace$1(fields);
          return init.initializeEmptyInstance(classId, emptyInstance, fields);
        default:
          throw H.wrapException("couldn't deserialize: " + H.S(x));
      }
    }, "call$1", "get$deserialize", 2, 0, 2],
    deserializeArrayInPlace$1: function(x) {
      var t1, i, t2;
      t1 = J.getInterceptor$asx(x);
      i = 0;
      while (true) {
        t2 = t1.get$length(x);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.$indexSet(x, i, this.deserialize$1(t1.$index(x, i)));
        ++i;
      }
      return x;
    },
    deserializeMap$1: function(x) {
      var t1, keys, values, result, t2, i;
      t1 = x.length;
      if (1 >= t1)
        return H.ioore(x, 1);
      keys = x[1];
      if (2 >= t1)
        return H.ioore(x, 2);
      values = x[2];
      result = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      this.deserializedObjects.push(result);
      keys = J.toList$0$ax(J.map$1$ax(keys, this.get$deserialize()));
      for (t1 = J.getInterceptor$asx(keys), t2 = J.getInterceptor$asx(values), i = 0; i < t1.get$length(keys); ++i) {
        if (i >= keys.length)
          return H.ioore(keys, i);
        result.$indexSet(0, keys[i], this.deserialize$1(t2.$index(values, i)));
      }
      return result;
    },
    deserializeSendPort$1: function(x) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort, result;
      t1 = x.length;
      if (1 >= t1)
        return H.ioore(x, 1);
      managerId = x[1];
      if (2 >= t1)
        return H.ioore(x, 2);
      isolateId = x[2];
      if (3 >= t1)
        return H.ioore(x, 3);
      receivePortId = x[3];
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        result = new H._NativeJsSendPort(receivePort, isolateId);
      } else
        result = new H._WorkerSendPort(managerId, receivePortId, isolateId);
      this.deserializedObjects.push(result);
      return result;
    },
    deserializeJSObject$1: function(x) {
      var t1, keys, values, o, t2, i, t3;
      t1 = x.length;
      if (1 >= t1)
        return H.ioore(x, 1);
      keys = x[1];
      if (2 >= t1)
        return H.ioore(x, 2);
      values = x[2];
      o = {};
      this.deserializedObjects.push(o);
      t1 = J.getInterceptor$asx(keys);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      while (true) {
        t3 = t1.get$length(keys);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        o[t1.$index(keys, i)] = this.deserialize$1(t2.$index(values, i));
        ++i;
      }
      return o;
    }
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives__throwFormatException: [function(string) {
    throw H.wrapException(new P.FormatException(string, null, null));
  }, "call$1", "Primitives__throwFormatException$closure", 2, 0, 4],
  Primitives_parseInt: function(source, radix, handleError) {
    var match, t1;
    handleError = H.Primitives__throwFormatException$closure();
    H.checkString(source);
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (match != null) {
      t1 = match.length;
      if (2 >= t1)
        return H.ioore(match, 2);
      if (match[2] != null)
        return parseInt(source, 16);
      if (3 >= t1)
        return H.ioore(match, 3);
      if (match[3] != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    if (match == null)
      return handleError.call$1(source);
    return parseInt(source, 10);
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_8ZY(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = /^\w+$/.test(decompiled) ? decompiled : $name;
    }
    if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return ($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null)).replace(/[^<,> ]+/g, function(m) {
      return init.mangledGlobalNames[m] || m;
    });
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_lazyAsJsDate: function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    object[key] = value;
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index, null, null));
  },
  checkNum: function(value) {
    if (typeof value !== "number")
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  checkInt: function(value) {
    if (typeof value !== "number" || Math.floor(value) !== value)
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  checkString: function(value) {
    if (typeof value !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: function() {
    return J.toString$0(this.dartException);
  },
  throwExpression: function(ex) {
    throw H.wrapException(ex);
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(false, null, null, null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  getTraceFromException: function(exception) {
    return new H._StackTrace(exception, null);
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  },
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = function(closure, arity, context, invoke) {
      return function(a1, a2, a3, a4) {
        return invoke(closure, context, arity, a1, a2, a3, a4);
      };
    }(closure, arity, init.globalState.currentContext, H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    if (!!J.getInterceptor(reflectionInfo).$isList) {
      $function.$reflectionInfo = reflectionInfo;
      functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    } else
      functionType = reflectionInfo;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function() {
        this.$initialize();
      };
    else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = function(s) {
        return function() {
          return init.metadata[s];
        };
      }(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f, r) {
        return function() {
          return f.apply({$receiver: r(this)}, arguments);
        };
      }(functionType, getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    $prototype.$requiredArgCount = $function.$requiredArgCount;
    $prototype.$defaultValues = $function.$defaultValues;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n, S) {
          return function() {
            return S(this)[n]();
          };
        }(stubName, getSelf);
      case 1:
        return function(n, S) {
          return function(a) {
            return S(this)[n](a);
          };
        }(stubName, getSelf);
      case 2:
        return function(n, S) {
          return function(a, b) {
            return S(this)[n](a, b);
          };
        }(stubName, getSelf);
      case 3:
        return function(n, S) {
          return function(a, b, c) {
            return S(this)[n](a, b, c);
          };
        }(stubName, getSelf);
      case 4:
        return function(n, S) {
          return function(a, b, c, d) {
            return S(this)[n](a, b, c, d);
          };
        }(stubName, getSelf);
      case 5:
        return function(n, S) {
          return function(a, b, c, d, e) {
            return S(this)[n](a, b, c, d, e);
          };
        }(stubName, getSelf);
      default:
        return function(f, s) {
          return function() {
            return f.apply(s(this), arguments);
          };
        }($function, getSelf);
    }
  },
  Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    t2 = !t1 || arity >= 27;
    if (t2)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  },
  Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n, s, r) {
          return function() {
            return s(this)[n](r(this));
          };
        }($name, getSelf, getReceiver);
      case 2:
        return function(n, s, r) {
          return function(a) {
            return s(this)[n](r(this), a);
          };
        }($name, getSelf, getReceiver);
      case 3:
        return function(n, s, r) {
          return function(a, b) {
            return s(this)[n](r(this), a, b);
          };
        }($name, getSelf, getReceiver);
      case 4:
        return function(n, s, r) {
          return function(a, b, c) {
            return s(this)[n](r(this), a, b, c);
          };
        }($name, getSelf, getReceiver);
      case 5:
        return function(n, s, r) {
          return function(a, b, c, d) {
            return s(this)[n](r(this), a, b, c, d);
          };
        }($name, getSelf, getReceiver);
      case 6:
        return function(n, s, r) {
          return function(a, b, c, d, e) {
            return s(this)[n](r(this), a, b, c, d, e);
          };
        }($name, getSelf, getReceiver);
      default:
        return function(f, s, r, a) {
          return function() {
            a = [r(this)];
            Array.prototype.push.apply(a, arguments);
            return f.apply(s(this), a);
          };
        }($function, getSelf, getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function(receiver, $function) {
    var selfField, t1, stubName, arity, lookedUpFunction, t2, t3, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    t3 = !t2 || arity >= 28;
    if (t3)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    var t1;
    functions.fixed$length = Array;
    if (!!J.getInterceptor(reflectionInfo).$isList) {
      reflectionInfo.fixed$length = Array;
      t1 = reflectionInfo;
    } else
      t1 = reflectionInfo;
    return H.Closure_fromTearOff(receiver, functions, t1, !!isStatic, jsArguments, $name);
  },
  propertyTypeCastError: function(value, property) {
    var t1 = J.getInterceptor$asx(property);
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
  },
  interceptedTypeCast: function(value, property) {
    var t1;
    if (value != null)
      t1 = typeof value === "object" && J.getInterceptor(value)[property];
    else
      t1 = true;
    if (t1)
      return value;
    H.propertyTypeCastError(value, property);
  },
  listTypeCast: function(value) {
    if (!!J.getInterceptor(value).$isList || value == null)
      return value;
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), "List"));
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(new P.CyclicInitializationError("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  random64: function() {
    return (Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296;
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, t1, argument;
    if (types == null)
      return "";
    buffer = new P.StringBuffer("");
    for (index = startIndex, firstArgument = true, allDynamic = true, t1 = ""; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents = t1 + ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      t1 = buffer._contents += H.S(H.runtimeTypeToString(argument, onTypeVariable));
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (substitution == null || typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  checkSubtype: function(object, isField, checks, asField) {
    var $arguments, interceptor;
    if (object == null)
      return false;
    $arguments = H.getRuntimeTypeInfo(object);
    interceptor = J.getInterceptor(object);
    if (interceptor[isField] == null)
      return false;
    return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
  },
  computeTypeName: function(isField, $arguments) {
    var t1 = J.getInterceptor$asx(isField);
    return (t1.substring$2(isField, 3, t1.get$length(isField)) + H.joinArguments($arguments, 0, null)).replace(/[^<,> ]+/g, function(m) {
      return init.mangledGlobalNames[m] || m;
    });
  },
  subtypeCast: function(object, isField, checks, asField) {
    if (object != null && !H.checkSubtype(object, isField, checks, asField))
      throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(object), H.computeTypeName(isField, checks)));
    return object;
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  isSubtype: function(s, t) {
    var t1, typeOfS, t2, typeOfT, $name, test, typeOfSPrototype, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t)
      return H.isFunctionSubtype(s, t);
    if ("func" in s)
      return t.builtin$cls === "Function";
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      test = "$is" + H.S($name);
      typeOfSPrototype = typeOfS.prototype;
      if (!(test in typeOfSPrototype))
        return false;
      substitution = typeOfSPrototype["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var t1, sLength, tLength, i, t2;
    t1 = t == null;
    if (t1 && s == null)
      return true;
    if (t1)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = Array;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto = Object.getPrototypeOf(obj);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, fun, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      fun = function() {
      };
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null) {
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            fun.prototype = proto;
          }
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_gkc();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc0, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  stringContainsUnchecked: function(receiver, other, startIndex) {
    return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    static: {ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = Array;
        data = data;
        requiredParametersInfo = data[0];
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  TypeErrorDecoder: {
    "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
          var $argumentsExpr$ = '$arguments$';
          try {
            $expr$.$method$($argumentsExpr$);
          } catch (e) {
            return e.message;
          }
        }(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
          try {
            $expr$.$method$;
          } catch (e) {
            return e.message;
          }
        }(expression);
      }}
  },
  NullError: {
    "^": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    }
  },
  JsNoSuchMethodError: {
    "^": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    },
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "^": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "^": "Closure:2;ex_0",
    call$1: function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    }
  },
  _StackTrace: {
    "^": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "^": "Closure:0;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    }
  },
  invokeClosure_closure0: {
    "^": "Closure:0;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    }
  },
  invokeClosure_closure1: {
    "^": "Closure:0;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    }
  },
  invokeClosure_closure2: {
    "^": "Closure:0;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    }
  },
  invokeClosure_closure3: {
    "^": "Closure:0;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    }
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    },
    get$$call: function() {
      return this;
    },
    get$$call: function() {
      return this;
    }
  },
  TearOffClosure: {
    "^": "Closure;"
  },
  BoundClosure: {
    "^": "TearOffClosure;_self,_target,_receiver,__js_helper$_name",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this._target)) >>> 0;
    },
    static: {BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = Array;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  CastErrorImplementation: {
    "^": "Error;message",
    toString$0: function(_) {
      return this.message;
    },
    static: {CastErrorImplementation$: function(actualType, expectedType) {
        return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
      }}
  },
  RuntimeError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "^": "Object;"
  },
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = {func: "dynafunc"};
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = Object.create(null);
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    }
  },
  JsLinkedHashMap: {
    "^": "Object;__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$keys: function(_) {
      return H.setRuntimeTypeInfo(new H.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new H.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new H.JsLinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(_, key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    $index: function(_, key) {
      var strings, cell, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$hashMapCellValue();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$hashMapCellValue();
      } else
        return this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$hashMapCellValue();
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = H.JsLinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = H.JsLinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = H.JsLinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$hashMapCellValue(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    },
    remove$1: function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else
        return this.internalRemove$1(key);
    },
    internalRemove$1: function(key) {
      var rest, bucket, index, cell;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$hashMapCellValue();
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$hashMapCellValue(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$hashMapCellValue();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new H.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last._next = cell;
        this._last = cell;
      }
      ++this.__js_helper$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell._next;
      if (previous == null)
        this._first = next;
      else
        previous._next = next;
      if (next == null)
        this._last = previous;
      else
        next._previous = previous;
      --this.__js_helper$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$hashMapCellKey(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isInternalMap: 1,
    static: {JsLinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  JsLinkedHashMap_values_closure: {
    "^": "Closure:2;this_0",
    call$1: function(each) {
      return this.this_0.$index(0, each);
    }
  },
  LinkedHashMapCell: {
    "^": "Object;hashMapCellKey<,hashMapCellValue@,_next,_previous<"
  },
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map.__js_helper$_length;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.hashMapCellKey);
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell._next;
      }
    },
    $isEfficientLength: 1
  },
  LinkedHashMapKeyIterator: {
    "^": "Object;_map,_modifications,_cell,__js_helper$_current",
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this.__js_helper$_current = null;
          return false;
        } else {
          this.__js_helper$_current = t1.hashMapCellKey;
          this._cell = t1._next;
          return true;
        }
      }
    }
  },
  initHooks_closure: {
    "^": "Closure:2;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    }
  },
  initHooks_closure0: {
    "^": "Closure:3;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    }
  },
  initHooks_closure1: {
    "^": "Closure:4;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    }
  }
}],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableElementError_noElement: function() {
    return new P.StateError("No element");
  },
  IterableElementError_tooFew: function() {
    return new P.StateError("Too few elements");
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
          break;
        j0 = j - 1;
        t1.$indexSet(a, j, t1.$index(a, j0));
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
    sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    el2 = t1.$index(a, index2);
    el3 = t1.$index(a, index3);
    el4 = t1.$index(a, index4);
    el5 = t1.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    t1.$indexSet(a, index2, t1.$index(a, left));
    t1.$indexSet(a, index4, t1.$index(a, right));
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            comp = compare.call$2(t1.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              --great;
              continue;
            } else {
              great0 = great - 1;
              if (t2.$lt(comp, 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    t1.$indexSet(a, left, t1.$index(a, t2));
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    t1.$indexSet(a, right, t1.$index(a, t2));
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
        ++less;
      for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
        --great;
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  Symbol_getName: function(symbol) {
    return symbol.get$_name();
  },
  ListIterable: {
    "^": "IterableBase;",
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, null);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    map$1: function(_, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(this, f), [null, null]);
    },
    toList$1$growable: function(_, growable) {
      var result, t1, i;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else {
        t1 = Array(this.get$length(this));
        t1.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      }
      for (i = 0; i < this.get$length(this); ++i) {
        t1 = this.elementAt$1(0, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: 1
  },
  ListIterator: {
    "^": "Object;__internal$_iterable,__internal$_length,__internal$_index,__internal$_current",
    get$current: function() {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this.__internal$_iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this.__internal$_index;
      if (t3 >= $length) {
        this.__internal$_current = null;
        return false;
      }
      this.__internal$_current = t2.elementAt$1(t1, t3);
      ++this.__internal$_index;
      return true;
    }
  },
  MappedIterable: {
    "^": "IterableBase;__internal$_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.MappedIterator(null, J.get$iterator$ax(this.__internal$_iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        if (!!J.getInterceptor(iterable).$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;__internal$_iterable,_f",
    $isEfficientLength: 1
  },
  MappedIterator: {
    "^": "Iterator;__internal$_current,_iterator,_f",
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this.__internal$_current = this._f$1(t1.get$current());
        return true;
      }
      this.__internal$_current = null;
      return false;
    },
    get$current: function() {
      return this.__internal$_current;
    },
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    }
  },
  MappedListIterable: {
    "^": "ListIterable;_source,_f",
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._source, index));
    },
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: 1
  },
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    remove$1: function(receiver, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo(victim ? Object.keys(victim) : [], [null]);
    t1.fixed$length = Array;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _AsyncRun__initializeScheduleImmediate: function() {
    var t1, div, span;
    t1 = {};
    if (self.scheduleImmediate != null)
      return P._AsyncRun__scheduleImmediateJsOverride$closure();
    if (self.MutationObserver != null && self.document != null) {
      div = self.document.createElement("div");
      span = self.document.createElement("span");
      t1.storedCallback_0 = null;
      new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
      return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
    } else if (self.setImmediate != null)
      return P._AsyncRun__scheduleImmediateWithSetImmediate$closure();
    return P._AsyncRun__scheduleImmediateWithTimer$closure();
  },
  _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 22],
  _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateWithSetImmediate$closure", 2, 0, 22],
  _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
    P.Timer__createTimer(C.Duration_0, callback);
  }, "call$1", "_AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 22],
  _asyncRunCallbackLoop: function() {
    var t1, t2;
    for (; t1 = $._nextCallback, t1 != null;) {
      $._lastPriorityCallback = null;
      t2 = J.get$next$x(t1);
      $._nextCallback = t2;
      if (t2 == null)
        $._lastCallback = null;
      t1.callback$0();
    }
  },
  _asyncRunCallback: [function() {
    $._isInCallbackLoop = true;
    try {
      P._asyncRunCallbackLoop();
    } finally {
      $._lastPriorityCallback = null;
      $._isInCallbackLoop = false;
      if ($._nextCallback != null)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    }
  }, "call$0", "_asyncRunCallback$closure", 0, 0, 1],
  _scheduleAsyncCallback: function(callback) {
    var t1, newEntry;
    if ($._nextCallback == null) {
      t1 = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      if (!$._isInCallbackLoop)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    } else {
      newEntry = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback.next = newEntry;
      $._lastCallback = newEntry;
    }
  },
  Timer_Timer: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P.Timer__createTimer(duration, callback);
    }
    return P.Timer__createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  Timer__createTimer: function(duration, callback) {
    var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  Zone__enter: function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    var t1, entry, t2;
    t1 = new P._rootHandleUncaughtError_closure(error, stackTrace);
    entry = new P._AsyncCallbackEntry(t1, null);
    t2 = $._nextCallback;
    if (t2 == null) {
      P._scheduleAsyncCallback(t1);
      $._lastPriorityCallback = $._lastCallback;
    } else {
      t1 = $._lastPriorityCallback;
      if (t1 == null) {
        entry.next = t2;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t1.next;
        t1.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    }
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _AsyncRun__initializeScheduleImmediate_internalCallback: {
    "^": "Closure:2;box_0",
    call$1: function(_) {
      var t1, f;
      H.leaveJsAsync();
      t1 = this.box_0;
      f = t1.storedCallback_0;
      t1.storedCallback_0 = null;
      f.call$0();
    }
  },
  _AsyncRun__initializeScheduleImmediate_closure: {
    "^": "Closure:5;box_0,div_1,span_2",
    call$1: function(callback) {
      var t1, t2;
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      this.box_0.storedCallback_0 = callback;
      t1 = this.div_1;
      t2 = this.span_2;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    }
  },
  _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
    "^": "Closure:0;callback_0",
    call$0: function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    }
  },
  _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
    "^": "Closure:0;callback_0",
    call$0: function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    }
  },
  _UncaughtAsyncError: {
    "^": "AsyncError;error,stackTrace",
    toString$0: function(_) {
      var result, t1;
      result = "Uncaught Error: " + H.S(this.error);
      t1 = this.stackTrace;
      return t1 != null ? result + ("\nStack Trace:\n" + H.S(t1)) : result;
    },
    static: {_UncaughtAsyncError__getBestStackTrace: function(error, stackTrace) {
        if (stackTrace != null)
          return stackTrace;
        if (!!J.getInterceptor(error).$isError)
          return error.get$stackTrace();
        return;
      }}
  },
  Future: {
    "^": "Object;"
  },
  _AsyncCallbackEntry: {
    "^": "Object;callback,next>",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  Stream: {
    "^": "Object;"
  },
  StreamSubscription: {
    "^": "Object;"
  },
  _EventSink: {
    "^": "Object;"
  },
  _DelayedEvent: {
    "^": "Object;"
  },
  AsyncError: {
    "^": "Object;stackTrace<",
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1
  },
  _Zone: {
    "^": "Object;"
  },
  _rootHandleUncaughtError_closure: {
    "^": "Closure:0;error_0,stackTrace_1",
    call$0: function() {
      var t1 = this.error_0;
      throw H.wrapException(new P._UncaughtAsyncError(t1, P._UncaughtAsyncError__getBestStackTrace(t1, this.stackTrace_1)));
    }
  },
  _RootZone: {
    "^": "_Zone;",
    get$parent: function(_) {
      return;
    },
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$0();
          return t1;
        }
        t1 = P._rootRun(null, null, this, f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }
    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$1(arg);
          return t1;
        }
        t1 = P._rootRunUnary(null, null, this, f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }
    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      if (runGuarded)
        return new P._RootZone_bindCallback_closure(this, f);
      else
        return new P._RootZone_bindCallback_closure0(this, f);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      if (runGuarded)
        return new P._RootZone_bindUnaryCallback_closure(this, f);
      else
        return new P._RootZone_bindUnaryCallback_closure0(this, f);
    },
    $index: function(_, key) {
      return;
    },
    run$1: function(f) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f);
    },
    runUnary$2: function(f, arg) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg);
    }
  },
  _RootZone_bindCallback_closure: {
    "^": "Closure:0;this_0,f_1",
    call$0: function() {
      return this.this_0.runGuarded$1(this.f_1);
    }
  },
  _RootZone_bindCallback_closure0: {
    "^": "Closure:0;this_2,f_3",
    call$0: function() {
      return this.this_2.run$1(this.f_3);
    }
  },
  _RootZone_bindUnaryCallback_closure: {
    "^": "Closure:2;this_0,f_1",
    call$1: function(arg) {
      return this.this_0.runUnaryGuarded$2(this.f_1, arg);
    }
  },
  _RootZone_bindUnaryCallback_closure0: {
    "^": "Closure:2;this_2,f_3",
    call$1: function(arg) {
      return this.this_2.runUnary$2(this.f_3, arg);
    }
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
    return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]));
  },
  LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
    return H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 23],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 15],
  IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
    var parts, t1;
    if (P.IterableBase__isToStringVisiting(iterable)) {
      if (leftDelimiter === "(" && rightDelimiter === ")")
        return "(...)";
      return leftDelimiter + "..." + rightDelimiter;
    }
    parts = [];
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      P.IterableBase__iterablePartsToStrings(iterable, parts);
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = new P.StringBuffer(leftDelimiter);
    t1.writeAll$2(parts, ", ");
    t1 = t1._contents += rightDelimiter;
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
    var buffer, t1;
    if (P.IterableBase__isToStringVisiting(iterable))
      return leftDelimiter + "..." + rightDelimiter;
    buffer = new P.StringBuffer(leftDelimiter);
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      buffer.writeAll$2(iterable, ", ");
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = buffer;
    t1._contents = t1.get$_contents() + rightDelimiter;
    t1 = buffer.get$_contents();
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  IterableBase__isToStringVisiting: function(o) {
    var i, t1;
    for (i = 0; t1 = $.get$IterableBase__toStringVisiting(), i < t1.length; ++i) {
      t1 = t1[i];
      if (o == null ? t1 == null : o === t1)
        return true;
    }
    return false;
  },
  IterableBase__iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashMap_LinkedHashMap$identity: function($K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result, t2;
    t1 = {};
    if (P.IterableBase__isToStringVisiting(m))
      return "{...}";
    result = new P.StringBuffer("");
    try {
      $.get$IterableBase__toStringVisiting().push(m);
      t2 = result;
      t2._contents = t2.get$_contents() + "{";
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      t1 = result;
      t1._contents = t1.get$_contents() + "}";
    } finally {
      t1 = $.get$IterableBase__toStringVisiting();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = result.get$_contents();
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  _LinkedIdentityHashMap: {
    "^": "JsLinkedHashMap;__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
    internalComputeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i].get$hashMapCellKey();
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  },
  _LinkedHashSet: {
    "^": "_HashSetBase;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_first,_collection$_last,_collection$_modifications",
    get$iterator: function(_) {
      var t1 = new P.LinkedHashSetIterator(this, this._collection$_modifications, null, null);
      t1._collection$_cell = this._collection$_first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._collection$_nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else
        return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._collection$_rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_element();
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._collection$_first;
      modifications = this._collection$_modifications;
      for (; cell != null;) {
        action.call$1(cell._element);
        if (modifications !== this._collection$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._collection$_next;
      }
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._collection$_strings = table;
          strings = table;
        }
        return this._collection$_addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._collection$_nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._collection$_nums = table;
          nums = table;
        }
        return this._collection$_addHashTableEntry$2(nums, element);
      } else
        return this._add$1(0, element);
    },
    _add$1: function(_, element) {
      var rest, hash, bucket;
      rest = this._collection$_rest;
      if (rest == null) {
        rest = P._LinkedHashSet__newHashTable();
        this._collection$_rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._collection$_newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._collection$_removeHashTableEntry$2(this._collection$_strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._collection$_removeHashTableEntry$2(this._collection$_nums, object);
      else
        return this._remove$1(0, object);
    },
    _remove$1: function(_, object) {
      var rest, bucket, index;
      rest = this._collection$_rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._collection$_unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._collection$_last = null;
        this._collection$_first = null;
        this._collection$_rest = null;
        this._collection$_nums = null;
        this._collection$_strings = null;
        this._collection$_length = 0;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
      }
    },
    _collection$_addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _collection$_removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._collection$_unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _collection$_newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._collection$_first == null) {
        this._collection$_last = cell;
        this._collection$_first = cell;
      } else {
        last = this._collection$_last;
        cell._collection$_previous = last;
        last._collection$_next = cell;
        this._collection$_last = cell;
      }
      ++this._collection$_length;
      this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
      return cell;
    },
    _collection$_unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_collection$_previous();
      next = cell._collection$_next;
      if (previous == null)
        this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --this._collection$_length;
      this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_element(), element))
          return i;
      return -1;
    },
    $isEfficientLength: 1,
    static: {_LinkedHashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  LinkedHashSetCell: {
    "^": "Object;_element<,_collection$_next,_collection$_previous<"
  },
  LinkedHashSetIterator: {
    "^": "Object;_set,_collection$_modifications,_collection$_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._collection$_modifications !== t1._collection$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._collection$_cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1._element;
          this._collection$_cell = t1._collection$_next;
          return true;
        }
      }
    }
  },
  _HashSetBase: {
    "^": "SetBase;"
  },
  IterableBase: {
    "^": "Object;",
    map$1: function(_, f) {
      return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      if (index < 0)
        H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  },
  ListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    },
    toList$1$growable: function(receiver, growable) {
      var result, t1, i;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
      } else {
        t1 = Array(this.get$length(receiver));
        t1.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      }
      for (i = 0; i < this.get$length(receiver); ++i) {
        t1 = this.$index(receiver, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    remove$1: function(receiver, element) {
      var i;
      for (i = 0; i < this.get$length(receiver); ++i)
        if (J.$eq(this.$index(receiver, i), element)) {
          this.setRange$4(receiver, i, this.get$length(receiver) - 1, receiver, i + 1);
          this.set$length(receiver, this.get$length(receiver) - 1);
          return true;
        }
      return false;
    },
    setRange$4: ["super$ListMixin$setRange$4", function(receiver, start, end, iterable, skipCount) {
      var $length, t1, i;
      P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
      $length = end - start;
      if ($length === 0)
        return;
      t1 = J.getInterceptor$asx(iterable);
      if (skipCount + $length > t1.get$length(iterable))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (skipCount < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
    }],
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    $isList: 1,
    $asList: null,
    $isEfficientLength: 1
  },
  Maps_mapToString_closure: {
    "^": "Closure:6;box_0,result_1",
    call$2: function(k, v) {
      var t1, t2;
      t1 = this.box_0;
      if (!t1.first_0)
        this.result_1._contents += ", ";
      t1.first_0 = false;
      t1 = this.result_1;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    }
  },
  ListQueue: {
    "^": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    toList$1$growable: function(_, growable) {
      var list, t1;
      if (growable) {
        list = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(list, this.get$length(this));
      } else {
        t1 = Array(this.get$length(this));
        t1.fixed$length = Array;
        list = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      }
      this._writeToList$1(list);
      return list;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    remove$1: function(_, object) {
      var i, t1;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        if (J.$eq(t1[i], object)) {
          this._remove$1(0, i);
          ++this._modificationCount;
          return true;
        }
      }
      return false;
    },
    clear$0: function(_) {
      var i, t1, t2, t3, t4;
      i = this._head;
      t1 = this._tail;
      if (i !== t1) {
        for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = null;
        }
        this._tail = 0;
        this._head = 0;
        ++this._modificationCount;
      }
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      ++this._modificationCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      t2[t1] = null;
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _add$1: function(_, element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      ++this._modificationCount;
    },
    _remove$1: function(_, offset) {
      var t1, t2, mask, t3, t4, i, prevOffset, nextOffset;
      t1 = this._table;
      t2 = t1.length;
      mask = t2 - 1;
      t3 = this._head;
      t4 = this._tail;
      if ((offset - t3 & mask) >>> 0 < (t4 - offset & mask) >>> 0) {
        for (i = offset; i !== t3; i = prevOffset) {
          prevOffset = (i - 1 & mask) >>> 0;
          if (prevOffset < 0 || prevOffset >= t2)
            return H.ioore(t1, prevOffset);
          t4 = t1[prevOffset];
          if (i < 0 || i >= t2)
            return H.ioore(t1, i);
          t1[i] = t4;
        }
        if (t3 >= t2)
          return H.ioore(t1, t3);
        t1[t3] = null;
        this._head = (t3 + 1 & mask) >>> 0;
        return (offset + 1 & mask) >>> 0;
      } else {
        t3 = (t4 - 1 & mask) >>> 0;
        this._tail = t3;
        for (i = offset; i !== t3; i = nextOffset) {
          nextOffset = (i + 1 & mask) >>> 0;
          if (nextOffset < 0 || nextOffset >= t2)
            return H.ioore(t1, nextOffset);
          t4 = t1[nextOffset];
          if (i < 0 || i >= t2)
            return H.ioore(t1, i);
          t1[i] = t4;
        }
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        t1[t3] = null;
        return offset;
      }
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = Array;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
      C.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    _writeToList$1: function(target) {
      var t1, t2, t3, $length, firstPartSize;
      t1 = this._head;
      t2 = this._tail;
      t3 = this._table;
      if (t1 <= t2) {
        $length = t2 - t1;
        C.JSArray_methods.setRange$4(target, 0, $length, t3, t1);
        return $length;
      } else {
        firstPartSize = t3.length - t1;
        C.JSArray_methods.setRange$4(target, 0, firstPartSize, t3, t1);
        C.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + this._tail, this._table, 0);
        return this._tail + firstPartSize;
      }
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = Array;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    $isEfficientLength: 1,
    static: {ListQueue$: function(initialCapacity, $E) {
        var t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [$E]);
        t1.ListQueue$1(initialCapacity, $E);
        return t1;
      }}
  },
  _ListQueueIterator: {
    "^": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  },
  SetMixin: {
    "^": "Object;",
    toList$1$growable: function(_, growable) {
      var result, t1, i, element, i0;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else {
        t1 = Array(this.get$length(this));
        t1.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      }
      for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
        element = t1._collection$_current;
        i0 = i + 1;
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = element;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    map$1: function(_, f) {
      return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(this, f), [H.getTypeArgumentByIndex(this, 0), null]);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1._collection$_current);
    },
    $isEfficientLength: 1
  },
  SetBase: {
    "^": "SetMixin;"
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  _symbolToString: function(symbol) {
    return H.Symbol_getName(symbol);
  },
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 24],
  Error_safeToString: function(object) {
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string")
      return JSON.stringify(object);
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 25],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 26],
  List_List$from: function(elements, growable, $E) {
    var list, t1;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = Array;
    return list;
  },
  print: function(object) {
    var line = H.S(object);
    H.printString(line);
  },
  NoSuchMethodError_toString_closure: {
    "^": "Closure:7;box_0",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0._contents += ", ";
      P._symbolToString(key);
    }
  },
  bool: {
    "^": "Object;"
  },
  "+bool": 0,
  Comparable: {
    "^": "Object;"
  },
  DateTime: {
    "^": "Object;millisecondsSinceEpoch<,isUtc",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof P.DateTime))
        return false;
      return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
    },
    get$hashCode: function(_) {
      return this.millisecondsSinceEpoch;
    },
    toString$0: function(_) {
      var t1, y, m, d, h, min, sec, ms;
      t1 = this.isUtc;
      y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
      m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
      d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
      h = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
      min = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
      sec = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
      ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
      if (t1)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
      if (Math.abs(millisecondsSinceEpoch) > 864e13)
        throw H.wrapException(P.ArgumentError$(millisecondsSinceEpoch));
    },
    $isComparable: 1,
    $asComparable: $.functionThatReturnsNull,
    static: {DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
        var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
        t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
        return t1;
      }, DateTime__fourDigits: function(n) {
        var absN, sign;
        absN = Math.abs(n);
        sign = n < 0 ? "-" : "";
        if (absN >= 1000)
          return "" + n;
        if (absN >= 100)
          return sign + "0" + H.S(absN);
        if (absN >= 10)
          return sign + "00" + H.S(absN);
        return sign + "000" + H.S(absN);
      }, DateTime__threeDigits: function(n) {
        if (n >= 100)
          return "" + n;
        if (n >= 10)
          return "0" + n;
        return "00" + n;
      }, DateTime__twoDigits: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }}
  },
  $double: {
    "^": "num;",
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  },
  "+double": 0,
  Duration: {
    "^": "Object;_duration<",
    $add: function(_, other) {
      return new P.Duration(C.JSInt_methods.$add(this._duration, other.get$_duration()));
    },
    $sub: function(_, other) {
      return new P.Duration(this._duration - other.get$_duration());
    },
    $lt: function(_, other) {
      return C.JSInt_methods.$lt(this._duration, other.get$_duration());
    },
    $gt: function(_, other) {
      return this._duration > other.get$_duration();
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof P.Duration))
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, other.get$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + new P.Duration(-t2).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSInt_methods.remainder$1(t2, 1000000));
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $negate: function(_) {
      return new P.Duration(-this._duration);
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.Duration];
    }
  },
  Duration_toString_sixDigits: {
    "^": "Closure:8;",
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    }
  },
  Duration_toString_twoDigits: {
    "^": "Closure:8;",
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    }
  },
  Error: {
    "^": "Object;",
    get$stackTrace: function() {
      return H.getTraceFromException(this.$thrownJsError);
    }
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;_hasValue,invalidValue,name,message",
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var t1, nameString, message, prefix, explanation, errorValue;
      t1 = this.name;
      nameString = t1 != null ? " (" + H.S(t1) + ")" : "";
      t1 = this.message;
      message = t1 == null ? "" : ": " + H.S(t1);
      prefix = this.get$_errorName() + nameString + message;
      if (!this._hasValue)
        return prefix;
      explanation = this.get$_errorExplanation();
      errorValue = P.Error_safeToString(this.invalidValue);
      return prefix + explanation + ": " + H.S(errorValue);
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(false, null, null, message);
      }}
  },
  RangeError: {
    "^": "ArgumentError;start>,end>,_hasValue,invalidValue,name,message",
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1, explanation, t2;
      t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else {
          if (typeof t2 !== "number")
            return t2.$gt();
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (t2 > t1)
            explanation = ": Not in range " + t1 + ".." + t2 + ", inclusive";
          else
            explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + t1;
        }
      }
      return explanation;
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(null, null, false, null, null, message);
      }, RangeError$value: function(value, $name, message) {
        return new P.RangeError(null, null, true, value, $name, "Value not in range");
      }, RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
        return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
      }, RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
        if (start < 0 || start > $length)
          throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
        if (end < start || end > $length)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
        return end;
      }}
  },
  IndexError: {
    "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
    get$start: function(_) {
      return 0;
    },
    get$end: function(_) {
      return J.$sub$n(this.length, 1);
    },
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      P.Error_safeToString(this.indexable);
      var explanation = ": index should be less than " + H.S(this.length);
      return J.$lt$n(this.invalidValue, 0) ? ": index must not be negative" : explanation;
    },
    static: {IndexError$: function(invalidValue, indexable, $name, message, $length) {
        var t1 = $length != null ? $length : J.get$length$asx(indexable);
        return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
      }}
  },
  UnsupportedError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(this.modifiedObject)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  OutOfMemoryError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: 1
  },
  StackOverflowError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: 1
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }
  },
  _ExceptionImplementation: {
    "^": "Object;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  FormatException: {
    "^": "Object;message,source,offset",
    toString$0: function(_) {
      var t1, report;
      t1 = this.message;
      report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
      return report;
    }
  },
  Expando: {
    "^": "Object;name",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0(0));
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(0), value);
    },
    _getKey$0: function(_) {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    }
  },
  Function: {
    "^": "Object;"
  },
  $int: {
    "^": "num;",
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  },
  "+int": 0,
  Iterable: {
    "^": "Object;"
  },
  Iterator: {
    "^": "Object;"
  },
  List: {
    "^": "Object;",
    $asList: null,
    $isIterable: 1,
    $isEfficientLength: 1
  },
  "+List": 0,
  Map: {
    "^": "Object;"
  },
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  "+Null": 0,
  num: {
    "^": "Object;",
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  },
  "+num": 0,
  Object: {
    "^": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    }
  },
  StackTrace: {
    "^": "Object;"
  },
  String: {
    "^": "Object;",
    $isComparable: 1,
    $asComparable: function() {
      return [P.String];
    }
  },
  "+String": 0,
  StringBuffer: {
    "^": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    writeAll$2: function(objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0) {
        do
          this._contents += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        this._contents += H.S(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents += separator;
          this._contents += H.S(iterator.get$current());
        }
      }
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  },
  Symbol: {
    "^": "Object;"
  }
}],
["dart.dom.html", "dart:html", , W, {
  "^": "",
  CanvasElement_CanvasElement: function(height, width) {
    var e = document.createElement("canvas", null);
    return e;
  },
  CssStyleDeclaration__camelCase: function(hyphenated) {
    return hyphenated.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, C.JS_CONST_s8I);
  },
  _JenkinsSmiHash_combine: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  _convertNativeToDart_Window: function(win) {
    if (win == null)
      return;
    return W._DOMWindowCrossFrame__createSafe(win);
  },
  _wrapZone: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone)
      return callback;
    return t1.bindUnaryCallback$2$runGuarded(callback, true);
  },
  HtmlElement: {
    "^": "Element;",
    $isHtmlElement: 1,
    $isElement: 1,
    $isNode: 1,
    $isObject: 1,
    "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMapElement|HTMLMarqueeElement|HTMLMetaElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPictureElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|PluginPlaceholderElement;HTMLElement"
  },
  _EntryArray: {
    "^": "Interceptor;",
    $isList: 1,
    $asList: function() {
      return [W.Entry];
    },
    $isEfficientLength: 1,
    "%": "EntryArray"
  },
  AnchorElement: {
    "^": "HtmlElement;type=",
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isInterceptor: 1,
    "%": "HTMLAnchorElement"
  },
  AreaElement: {
    "^": "HtmlElement;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isInterceptor: 1,
    "%": "HTMLAreaElement"
  },
  AudioTrack: {
    "^": "Interceptor;id=",
    "%": "AudioTrack"
  },
  AudioTrackList: {
    "^": "EventTarget;length=",
    "%": "AudioTrackList"
  },
  BarProp: {
    "^": "Interceptor;visible=",
    "%": "BarProp"
  },
  Blob: {
    "^": "Interceptor;type=",
    "%": ";Blob"
  },
  Body: {
    "^": "Interceptor;",
    "%": "Response;Body"
  },
  BodyElement: {
    "^": "HtmlElement;",
    $isInterceptor: 1,
    "%": "HTMLBodyElement"
  },
  ButtonElement: {
    "^": "HtmlElement;type=,value%",
    "%": "HTMLButtonElement"
  },
  Canvas2DContextAttributes: {
    "^": "Interceptor;storage=",
    "%": "Canvas2DContextAttributes"
  },
  CanvasElement: {
    "^": "HtmlElement;height%,width%",
    getContext$2: function(receiver, contextId, attrs) {
      return receiver.getContext(contextId, P.convertDartToNative_Dictionary(attrs));
    },
    getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil: function(receiver, alpha, antialias, depth, premultipliedAlpha, preserveDrawingBuffer, stencil) {
      var options, context;
      options = P.LinkedHashMap_LinkedHashMap$_literal(["alpha", alpha, "depth", depth, "stencil", stencil, "antialias", antialias, "premultipliedAlpha", premultipliedAlpha, "preserveDrawingBuffer", preserveDrawingBuffer], null, null);
      context = this.getContext$2(receiver, "webgl", options);
      return context == null ? this.getContext$2(receiver, "experimental-webgl", options) : context;
    },
    getContext3d$5$alpha$antialias$premultipliedAlpha$preserveDrawingBuffer$stencil: function($receiver, alpha, antialias, premultipliedAlpha, preserveDrawingBuffer, stencil) {
      return this.getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil($receiver, alpha, antialias, true, premultipliedAlpha, preserveDrawingBuffer, stencil);
    },
    $isCanvasElement: 1,
    "%": "HTMLCanvasElement"
  },
  CanvasRenderingContext2D: {
    "^": "Interceptor;",
    lineWidth$1: function($receiver, arg0) {
      return $receiver.lineWidth.call$1(arg0);
    },
    "%": "CanvasRenderingContext2D"
  },
  CharacterData: {
    "^": "Node;length=",
    $isInterceptor: 1,
    "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
  },
  Credential: {
    "^": "Interceptor;id=",
    "%": "Credential|FederatedCredential|LocalCredential"
  },
  CryptoKey: {
    "^": "Interceptor;type=",
    "%": "CryptoKey"
  },
  CssRule: {
    "^": "Interceptor;type=",
    $isObject: 1,
    "%": "CSSCharsetRule|CSSFontFaceRule|CSSImportRule|CSSKeyframeRule|CSSKeyframesRule|CSSMediaRule|CSSPageRule|CSSRule|CSSStyleRule|CSSSupportsRule|CSSUnknownRule|CSSViewportRule|MozCSSKeyframeRule|MozCSSKeyframesRule|WebKitCSSFilterRule|WebKitCSSKeyframeRule|WebKitCSSKeyframesRule"
  },
  CssStyleDeclaration: {
    "^": "Interceptor_CssStyleDeclarationBase;length=",
    getPropertyValue$1: function(receiver, propertyName) {
      var propValue = this._getPropertyValueHelper$1(receiver, propertyName);
      return propValue != null ? propValue : "";
    },
    _getPropertyValueHelper$1: function(receiver, propertyName) {
      if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
        return receiver.getPropertyValue(propertyName);
      else
        return receiver.getPropertyValue(P.Device_cssPrefix() + propertyName);
    },
    setProperty$3: function(receiver, propertyName, value, priority) {
      if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
        return this._setPropertyHelper$3(receiver, propertyName, value, priority);
      else
        return this._setPropertyHelper$3(receiver, P.Device_cssPrefix() + propertyName, value, priority);
    },
    _setPropertyHelper$3: function(receiver, propertyName, value, priority) {
      var exception;
      try {
        if (value == null)
          value = "";
        if (priority == null)
          priority = "";
        receiver.setProperty(propertyName, value, priority);
        if (!!receiver.setAttribute)
          receiver.setAttribute(propertyName, value);
      } catch (exception) {
        H.unwrapException(exception);
      }
    },
    "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
  },
  Interceptor_CssStyleDeclarationBase: {
    "^": "Interceptor+CssStyleDeclarationBase;"
  },
  CssStyleDeclarationBase: {
    "^": "Object;",
    get$color: function(receiver) {
      return this.getPropertyValue$1(receiver, "color");
    },
    set$height: function(receiver, value) {
      this.setProperty$3(receiver, "height", value, "");
    },
    set$width: function(receiver, value) {
      this.setProperty$3(receiver, "width", value, "");
    }
  },
  DataTransferItem: {
    "^": "Interceptor;type=",
    $isDataTransferItem: 1,
    $isObject: 1,
    "%": "DataTransferItem"
  },
  DataTransferItemList: {
    "^": "Interceptor;length=",
    remove$1: function(receiver, index) {
      return receiver.remove(index);
    },
    $index: function(receiver, index) {
      return receiver[index];
    },
    "%": "DataTransferItemList"
  },
  DeviceAcceleration: {
    "^": "Interceptor;x=,y=,z=",
    "%": "DeviceAcceleration"
  },
  DeviceLightEvent: {
    "^": "Event;value=",
    "%": "DeviceLightEvent"
  },
  DocumentFragment: {
    "^": "Node;",
    $isInterceptor: 1,
    "%": "DocumentFragment|ShadowRoot"
  },
  DomException: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    "%": "DOMException"
  },
  DomIterator: {
    "^": "Interceptor;",
    next$1: [function(receiver, value) {
      return receiver.next(value);
    }, function($receiver) {
      return $receiver.next();
    }, "next$0", "call$1", "call$0", "get$next", 0, 2, 9, 28],
    $isDomIterator: 1,
    $isObject: 1,
    "%": "Iterator"
  },
  DomMatrix: {
    "^": "DomMatrixReadOnly;",
    get$a: function(receiver) {
      return receiver.a;
    },
    get$b: function(receiver) {
      return receiver.b;
    },
    get$c: function(receiver) {
      return receiver.c;
    },
    $isDomMatrix: 1,
    $isObject: 1,
    "%": "DOMMatrix"
  },
  DomMatrixReadOnly: {
    "^": "Interceptor;a=,b=,c=",
    "%": ";DOMMatrixReadOnly"
  },
  DomPoint: {
    "^": "DomPointReadOnly;",
    get$w: function(receiver) {
      return receiver.w;
    },
    get$x: function(receiver) {
      return receiver.x;
    },
    get$y: function(receiver) {
      return receiver.y;
    },
    get$z: function(receiver) {
      return receiver.z;
    },
    "%": "DOMPoint"
  },
  DomPointReadOnly: {
    "^": "Interceptor;w=,x=,y=,z=",
    "%": ";DOMPointReadOnly"
  },
  DomRectReadOnly: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=,x=,y=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = this.get$width(receiver);
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = this.get$height(receiver);
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(this.get$width(receiver));
      t4 = J.get$hashCode$(this.get$height(receiver));
      return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
    },
    $isRectangle: 1,
    $asRectangle: $.functionThatReturnsNull,
    "%": ";DOMRectReadOnly"
  },
  DomSettableTokenList: {
    "^": "DomTokenList;value%",
    "%": "DOMSettableTokenList"
  },
  DomStringList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "DOMStringList"
  },
  Interceptor_ListMixin: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "^": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isEfficientLength: 1
  },
  DomTokenList: {
    "^": "Interceptor;length=",
    remove$1: function(receiver, tokens) {
      return receiver.remove(tokens);
    },
    "%": ";DOMTokenList"
  },
  Element: {
    "^": "Node;id%",
    toString$0: function(receiver) {
      return receiver.localName;
    },
    $isElement: 1,
    $isNode: 1,
    $isObject: 1,
    $isInterceptor: 1,
    "%": ";Element"
  },
  EmbedElement: {
    "^": "HtmlElement;height%,type=,width%",
    "%": "HTMLEmbedElement"
  },
  Entry: {
    "^": "Interceptor;",
    $isObject: 1,
    "%": "DirectoryEntry|Entry|FileEntry"
  },
  Event: {
    "^": "Interceptor;type=",
    "%": "AnimationPlayerEvent|ApplicationCacheErrorEvent|AudioProcessingEvent|AutocompleteErrorEvent|BeforeUnloadEvent|CloseEvent|CompositionEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|DragEvent|ErrorEvent|ExtendableEvent|FetchEvent|FocusEvent|FontFaceSetLoadEvent|GamepadEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|KeyboardEvent|MIDIConnectionEvent|MIDIMessageEvent|MSPointerEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaQueryListEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PointerEvent|PopStateEvent|ProgressEvent|PushEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|RelatedEvent|ResourceProgressEvent|SVGZoomEvent|SecurityPolicyViolationEvent|SpeechRecognitionError|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TextEvent|TouchEvent|TrackEvent|TransitionEvent|UIEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|WheelEvent|XMLHttpRequestProgressEvent;ClipboardEvent|Event|InputEvent"
  },
  EventTarget: {
    "^": "Interceptor;",
    "%": "AnimationPlayer|ApplicationCache|AudioContext|BatteryManager|DOMApplicationCache|EventSource|FileReader|IDBDatabase|IDBOpenDBRequest|IDBRequest|IDBTransaction|IDBVersionChangeRequest|InputMethodContext|MIDIAccess|MediaController|MediaKeySession|MediaQueryList|MediaSource|Notification|OfflineAudioContext|OfflineResourceList|Performance|Presentation|RTCDTMFSender|RTCPeerConnection|ServiceWorkerRegistration|SpeechSynthesis|SpeechSynthesisUtterance|mozRTCPeerConnection|webkitAudioContext;EventTarget;EventTarget_ListMixin|EventTarget_ListMixin_ImmutableListMixin|EventTarget_ListMixin0|EventTarget_ListMixin_ImmutableListMixin0"
  },
  FieldSetElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLFieldSetElement"
  },
  File: {
    "^": "Blob;",
    $isObject: 1,
    "%": "File"
  },
  FileList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.File];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "FileList"
  },
  Interceptor_ListMixin0: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.File];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "^": "Interceptor_ListMixin0+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.File];
    },
    $isEfficientLength: 1
  },
  FileStream: {
    "^": "Interceptor;type=",
    "%": "Stream"
  },
  FileWriter: {
    "^": "EventTarget;length=",
    "%": "FileWriter"
  },
  FontFace: {
    "^": "Interceptor;",
    $isFontFace: 1,
    $isObject: 1,
    "%": "FontFace"
  },
  FontFaceSet: {
    "^": "EventTarget;",
    forEach$2: function(receiver, callback, thisArg) {
      return receiver.forEach(H.convertDartClosureToJS(callback, 3), thisArg);
    },
    forEach$1: function($receiver, callback) {
      callback = H.convertDartClosureToJS(callback, 3);
      return $receiver.forEach(callback);
    },
    "%": "FontFaceSet"
  },
  FormElement: {
    "^": "HtmlElement;length=",
    "%": "HTMLFormElement"
  },
  Gamepad: {
    "^": "Interceptor;id=",
    $isObject: 1,
    "%": "Gamepad"
  },
  GamepadButton: {
    "^": "Interceptor;value=",
    "%": "GamepadButton"
  },
  GeofencingRegion: {
    "^": "Interceptor;id=",
    "%": "CircularGeofencingRegion|GeofencingRegion"
  },
  HRElement: {
    "^": "HtmlElement;color=",
    "%": "HTMLHRElement"
  },
  Headers: {
    "^": "Interceptor;",
    forEach$2: function(receiver, callback, thisArg) {
      return receiver.forEach(H.convertDartClosureToJS(callback, 3), thisArg);
    },
    forEach$1: function($receiver, callback) {
      callback = H.convertDartClosureToJS(callback, 3);
      return $receiver.forEach(callback);
    },
    "%": "Headers"
  },
  History: {
    "^": "Interceptor;length=",
    "%": "History"
  },
  HtmlCollection: {
    "^": "Interceptor_ListMixin_ImmutableListMixin1;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
  },
  Interceptor_ListMixin1: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin1: {
    "^": "Interceptor_ListMixin1+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: 1
  },
  HttpRequest: {
    "^": "HttpRequestEventTarget;",
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    "%": "XMLHttpRequest"
  },
  HttpRequestEventTarget: {
    "^": "EventTarget;",
    "%": "XMLHttpRequestUpload;XMLHttpRequestEventTarget"
  },
  IFrameElement: {
    "^": "HtmlElement;height%,width%",
    "%": "HTMLIFrameElement"
  },
  ImageData: {
    "^": "Interceptor;",
    $isImageData: 1,
    "%": "ImageData"
  },
  ImageElement: {
    "^": "HtmlElement;height%,width%",
    $isImageElement: 1,
    "%": "HTMLImageElement"
  },
  InputElement: {
    "^": "HtmlElement;height%,type=,value%,width%",
    $isInterceptor: 1,
    "%": "HTMLInputElement"
  },
  KeygenElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLKeygenElement"
  },
  LIElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLLIElement"
  },
  LinkElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLLinkElement"
  },
  Location: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    "%": "Location"
  },
  MediaElement: {
    "^": "HtmlElement;",
    "%": "HTMLAudioElement;HTMLMediaElement"
  },
  MediaList: {
    "^": "Interceptor;length=",
    "%": "MediaList"
  },
  MediaStream: {
    "^": "EventTarget;id=",
    clone$0: function(receiver) {
      return receiver.clone();
    },
    "%": "MediaStream"
  },
  MediaStreamTrack: {
    "^": "EventTarget;id=",
    clone$0: function(receiver) {
      return receiver.clone();
    },
    "%": "MediaStreamTrack"
  },
  MenuElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLMenuElement"
  },
  MenuItemElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLMenuItemElement"
  },
  MessagePort: {
    "^": "EventTarget;",
    start$0: [function(receiver) {
      return receiver.start();
    }, "call$0", "get$start", 0, 0, 1],
    "%": "MessagePort"
  },
  MeterElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLMeterElement"
  },
  MidiOutput: {
    "^": "MidiPort;",
    send$2: function(receiver, data, timestamp) {
      return receiver.send(data, timestamp);
    },
    send$1: function($receiver, data) {
      return $receiver.send(data);
    },
    "%": "MIDIOutput"
  },
  MidiPort: {
    "^": "EventTarget;id=,type=",
    "%": "MIDIInput;MIDIPort"
  },
  MimeType: {
    "^": "Interceptor;type=",
    $isObject: 1,
    "%": "MimeType"
  },
  MimeTypeArray: {
    "^": "Interceptor_ListMixin_ImmutableListMixin2;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "MimeTypeArray"
  },
  Interceptor_ListMixin2: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin2: {
    "^": "Interceptor_ListMixin2+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    },
    $isEfficientLength: 1
  },
  MutationRecord: {
    "^": "Interceptor;type=",
    "%": "MutationRecord"
  },
  Navigator: {
    "^": "Interceptor;",
    $isInterceptor: 1,
    "%": "Navigator"
  },
  NetworkInformation: {
    "^": "EventTarget;type=",
    "%": "NetworkInformation"
  },
  Node: {
    "^": "EventTarget;parent:parentElement=",
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString$0(receiver) : value;
    },
    $isNode: 1,
    $isObject: 1,
    "%": "Document|HTMLDocument|XMLDocument;Node"
  },
  NodeList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin3;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "NodeList|RadioNodeList"
  },
  Interceptor_ListMixin3: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin3: {
    "^": "Interceptor_ListMixin3+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: 1
  },
  OListElement: {
    "^": "HtmlElement;start=,type=",
    "%": "HTMLOListElement"
  },
  ObjectElement: {
    "^": "HtmlElement;height%,type=,width%",
    "%": "HTMLObjectElement"
  },
  OptionElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLOptionElement"
  },
  OutputElement: {
    "^": "HtmlElement;type=,value%",
    "%": "HTMLOutputElement"
  },
  ParamElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLParamElement"
  },
  Path2D: {
    "^": "Interceptor;",
    $isInterceptor: 1,
    "%": "Path2D"
  },
  PerformanceNavigation: {
    "^": "Interceptor;type=",
    "%": "PerformanceNavigation"
  },
  Plugin: {
    "^": "Interceptor;length=",
    $isObject: 1,
    "%": "Plugin"
  },
  PluginArray: {
    "^": "Interceptor_ListMixin_ImmutableListMixin4;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "PluginArray"
  },
  Interceptor_ListMixin4: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin4: {
    "^": "Interceptor_ListMixin4+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    },
    $isEfficientLength: 1
  },
  ProgressElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLProgressElement"
  },
  RtcDataChannel: {
    "^": "EventTarget;id=",
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    "%": "DataChannel|RTCDataChannel"
  },
  RtcSessionDescription: {
    "^": "Interceptor;type=",
    "%": "RTCSessionDescription|mozRTCSessionDescription"
  },
  RtcStatsReport: {
    "^": "Interceptor;id=,type=",
    $isRtcStatsReport: 1,
    $isObject: 1,
    "%": "RTCStatsReport"
  },
  ScreenOrientation: {
    "^": "EventTarget;type=",
    "%": "ScreenOrientation"
  },
  ScriptElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLScriptElement"
  },
  SelectElement: {
    "^": "HtmlElement;length%,type=,value%",
    "%": "HTMLSelectElement"
  },
  Selection: {
    "^": "Interceptor;type=",
    "%": "Selection"
  },
  ServiceWorkerClient: {
    "^": "Interceptor;id=",
    "%": "ServiceWorkerClient"
  },
  SharedWorker: {
    "^": "EventTarget;",
    $isInterceptor: 1,
    "%": "SharedWorker"
  },
  SourceBuffer: {
    "^": "EventTarget;",
    $isObject: 1,
    "%": "SourceBuffer"
  },
  SourceBufferList: {
    "^": "EventTarget_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "SourceBufferList"
  },
  EventTarget_ListMixin: {
    "^": "EventTarget+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $isEfficientLength: 1
  },
  EventTarget_ListMixin_ImmutableListMixin: {
    "^": "EventTarget_ListMixin+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $isEfficientLength: 1
  },
  SourceElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLSourceElement"
  },
  SourceInfo: {
    "^": "Interceptor;id=",
    "%": "SourceInfo"
  },
  SpeechGrammar: {
    "^": "Interceptor;",
    $isObject: 1,
    "%": "SpeechGrammar"
  },
  SpeechGrammarList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin5;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "SpeechGrammarList"
  },
  Interceptor_ListMixin5: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin5: {
    "^": "Interceptor_ListMixin5+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $isEfficientLength: 1
  },
  SpeechRecognition: {
    "^": "EventTarget;",
    start$0: [function(receiver) {
      return receiver.start();
    }, "call$0", "get$start", 0, 0, 1],
    "%": "SpeechRecognition"
  },
  SpeechRecognitionResult: {
    "^": "Interceptor;length=",
    $isObject: 1,
    "%": "SpeechRecognitionResult"
  },
  Storage: {
    "^": "Interceptor;",
    $index: function(receiver, key) {
      return receiver.getItem(key);
    },
    $indexSet: function(receiver, key, value) {
      receiver.setItem(key, value);
    },
    remove$1: function(receiver, key) {
      var value = receiver.getItem(key);
      receiver.removeItem(key);
      return value;
    },
    forEach$1: function(receiver, f) {
      var i, key;
      for (i = 0; true; ++i) {
        key = receiver.key(i);
        if (key == null)
          return;
        f.call$2(key, receiver.getItem(key));
      }
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    "%": "Storage"
  },
  StyleElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLStyleElement"
  },
  StyleMedia: {
    "^": "Interceptor;type=",
    "%": "StyleMedia"
  },
  StyleSheet: {
    "^": "Interceptor;type=",
    $isObject: 1,
    "%": "CSSStyleSheet|StyleSheet"
  },
  TextAreaElement: {
    "^": "HtmlElement;type=,value%",
    "%": "HTMLTextAreaElement"
  },
  TextTrack: {
    "^": "EventTarget;id=",
    $isObject: 1,
    "%": "TextTrack"
  },
  TextTrackCue: {
    "^": "EventTarget;id%",
    $isObject: 1,
    "%": "TextTrackCue|VTTCue"
  },
  TextTrackCueList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin6;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $isEfficientLength: 1,
    "%": "TextTrackCueList"
  },
  Interceptor_ListMixin6: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin6: {
    "^": "Interceptor_ListMixin6+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $isEfficientLength: 1
  },
  TextTrackList: {
    "^": "EventTarget_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "TextTrackList"
  },
  EventTarget_ListMixin0: {
    "^": "EventTarget+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    },
    $isEfficientLength: 1
  },
  EventTarget_ListMixin_ImmutableListMixin0: {
    "^": "EventTarget_ListMixin0+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    },
    $isEfficientLength: 1
  },
  TimeRanges: {
    "^": "Interceptor;length=",
    end$1: [function(receiver, index) {
      return receiver.end(index);
    }, "call$1", "get$end", 2, 0, 10],
    start$1: [function(receiver, index) {
      return receiver.start(index);
    }, "call$1", "get$start", 2, 0, 10],
    "%": "TimeRanges"
  },
  Touch: {
    "^": "Interceptor;",
    $isObject: 1,
    "%": "Touch"
  },
  TouchList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin7;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "TouchList"
  },
  Interceptor_ListMixin7: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin7: {
    "^": "Interceptor_ListMixin7+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $isEfficientLength: 1
  },
  Url: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isInterceptor: 1,
    "%": "URL"
  },
  VideoElement: {
    "^": "MediaElement;height%,width%",
    $isVideoElement: 1,
    "%": "HTMLVideoElement"
  },
  VideoTrack: {
    "^": "Interceptor;id=",
    "%": "VideoTrack"
  },
  VideoTrackList: {
    "^": "EventTarget;length=",
    "%": "VideoTrackList"
  },
  VttRegion: {
    "^": "Interceptor;id%",
    "%": "VTTRegion"
  },
  VttRegionList: {
    "^": "Interceptor;length=",
    "%": "VTTRegionList"
  },
  WebSocket: {
    "^": "EventTarget;",
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    "%": "WebSocket"
  },
  Window: {
    "^": "EventTarget;",
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
          $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    get$parent: function(receiver) {
      return W._convertNativeToDart_Window(receiver.parent);
    },
    $isInterceptor: 1,
    "%": "DOMWindow|Window"
  },
  Worker: {
    "^": "EventTarget;",
    $isInterceptor: 1,
    "%": "Worker"
  },
  WorkerGlobalScope: {
    "^": "EventTarget;",
    $isInterceptor: 1,
    "%": "DedicatedWorkerGlobalScope|ServiceWorkerGlobalScope|SharedWorkerGlobalScope|WorkerGlobalScope"
  },
  _Attr: {
    "^": "Node;value%",
    "%": "Attr"
  },
  _CSSValue: {
    "^": "Interceptor;",
    $isObject: 1,
    "%": "CSSPrimitiveValue;CSSValue;_CSSValue_ListMixin|_CSSValue_ListMixin_ImmutableListMixin"
  },
  _ClientRect: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.width;
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.height;
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(receiver.width);
      t4 = J.get$hashCode$(receiver.height);
      return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
    },
    $isRectangle: 1,
    $asRectangle: $.functionThatReturnsNull,
    "%": "ClientRect"
  },
  _ClientRectList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin8;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    $isList: 1,
    $asList: function() {
      return [P.Rectangle];
    },
    $isEfficientLength: 1,
    "%": "ClientRectList|DOMRectList"
  },
  Interceptor_ListMixin8: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.Rectangle];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin8: {
    "^": "Interceptor_ListMixin8+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.Rectangle];
    },
    $isEfficientLength: 1
  },
  _CssRuleList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin9;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "CSSRuleList"
  },
  Interceptor_ListMixin9: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin9: {
    "^": "Interceptor_ListMixin9+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    },
    $isEfficientLength: 1
  },
  _CssValueList: {
    "^": "_CSSValue_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W._CSSValue];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "CSSValueList|WebKitCSSFilterValue|WebKitCSSTransformValue"
  },
  _CSSValue_ListMixin: {
    "^": "_CSSValue+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W._CSSValue];
    },
    $isEfficientLength: 1
  },
  _CSSValue_ListMixin_ImmutableListMixin: {
    "^": "_CSSValue_ListMixin+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W._CSSValue];
    },
    $isEfficientLength: 1
  },
  _DocumentType: {
    "^": "Node;",
    $isInterceptor: 1,
    "%": "DocumentType"
  },
  _DomRect: {
    "^": "DomRectReadOnly;",
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    },
    get$x: function(receiver) {
      return receiver.x;
    },
    get$y: function(receiver) {
      return receiver.y;
    },
    "%": "DOMRect"
  },
  _GamepadList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin10;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "GamepadList"
  },
  Interceptor_ListMixin10: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin10: {
    "^": "Interceptor_ListMixin10+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    },
    $isEfficientLength: 1
  },
  _HTMLFrameSetElement: {
    "^": "HtmlElement;",
    $isInterceptor: 1,
    "%": "HTMLFrameSetElement"
  },
  _NamedNodeMap: {
    "^": "Interceptor_ListMixin_ImmutableListMixin11;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  Interceptor_ListMixin11: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin11: {
    "^": "Interceptor_ListMixin11+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: 1
  },
  _Request: {
    "^": "Body;",
    clone$0: function(receiver) {
      return receiver.clone();
    },
    "%": "Request"
  },
  _ServiceWorker: {
    "^": "EventTarget;",
    $isInterceptor: 1,
    "%": "ServiceWorker"
  },
  _SpeechRecognitionResultList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin12;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "SpeechRecognitionResultList"
  },
  Interceptor_ListMixin12: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin12: {
    "^": "Interceptor_ListMixin12+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLength: 1
  },
  _StyleSheetList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin13;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "StyleSheetList"
  },
  Interceptor_ListMixin13: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin13: {
    "^": "Interceptor_ListMixin13+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    },
    $isEfficientLength: 1
  },
  _WorkerLocation: {
    "^": "Interceptor;",
    $isInterceptor: 1,
    "%": "WorkerLocation"
  },
  _WorkerNavigator: {
    "^": "Interceptor;",
    $isInterceptor: 1,
    "%": "WorkerNavigator"
  },
  ImmutableListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
    },
    remove$1: function(receiver, object) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
    },
    $isList: 1,
    $asList: null,
    $isEfficientLength: 1
  },
  FixedSizeListIterator: {
    "^": "Object;_array,_length,_position,_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._length;
      if (nextPosition < t1) {
        this._current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._current = null;
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._current;
    }
  },
  _DOMWindowCrossFrame: {
    "^": "Object;_window",
    get$parent: function(_) {
      return W._DOMWindowCrossFrame__createSafe(this._window.parent);
    },
    $isInterceptor: 1,
    static: {_DOMWindowCrossFrame__createSafe: function(w) {
        if (w === window)
          return w;
        else
          return new W._DOMWindowCrossFrame(w);
      }}
  }
}],
["dart.dom.indexed_db", "dart:indexed_db", , P, {
  "^": "",
  Cursor: {
    "^": "Interceptor;",
    next$1: [function(receiver, key) {
      receiver.continue(key);
    }, function($receiver) {
      return this.next$1($receiver, null);
    }, "next$0", "call$1", "call$0", "get$next", 0, 2, 11, 28],
    "%": ";IDBCursor"
  },
  CursorWithValue: {
    "^": "Cursor;",
    get$value: function(receiver) {
      return P.convertNativeToDart_AcceptStructuredClone(receiver.value, false);
    },
    "%": "IDBCursorWithValue"
  },
  Index: {
    "^": "Interceptor;",
    $isIndex: 1,
    $isObject: 1,
    "%": "IDBIndex"
  }
}],
["dart.dom.svg", "dart:svg", , P, {
  "^": "",
  AElement: {
    "^": "GraphicsElement;",
    $isInterceptor: 1,
    "%": "SVGAElement"
  },
  AltGlyphElement: {
    "^": "TextPositioningElement;",
    $isInterceptor: 1,
    "%": "SVGAltGlyphElement"
  },
  Angle: {
    "^": "Interceptor;value%",
    "%": "SVGAngle"
  },
  AnimationElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement"
  },
  CircleElement: {
    "^": "GeometryElement;r=",
    "%": "SVGCircleElement"
  },
  FEBlendElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEBlendElement"
  },
  FEColorMatrixElement: {
    "^": "SvgElement;type=,height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEColorMatrixElement"
  },
  FEComponentTransferElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEComponentTransferElement"
  },
  FECompositeElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFECompositeElement"
  },
  FEConvolveMatrixElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEConvolveMatrixElement"
  },
  FEDiffuseLightingElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEDiffuseLightingElement"
  },
  FEDisplacementMapElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEDisplacementMapElement"
  },
  FEFloodElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEFloodElement"
  },
  FEGaussianBlurElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEGaussianBlurElement"
  },
  FEImageElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEImageElement"
  },
  FEMergeElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEMergeElement"
  },
  FEMorphologyElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEMorphologyElement"
  },
  FEOffsetElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEOffsetElement"
  },
  FEPointLightElement: {
    "^": "SvgElement;x=,y=,z=",
    "%": "SVGFEPointLightElement"
  },
  FESpecularLightingElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFESpecularLightingElement"
  },
  FESpotLightElement: {
    "^": "SvgElement;x=,y=,z=",
    "%": "SVGFESpotLightElement"
  },
  FETileElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFETileElement"
  },
  FETurbulenceElement: {
    "^": "SvgElement;type=,height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFilterElement"
  },
  ForeignObjectElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGForeignObjectElement"
  },
  GeometryElement: {
    "^": "GraphicsElement;",
    "%": "SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
  },
  GraphicsElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
  },
  ImageElement0: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGImageElement"
  },
  Length: {
    "^": "Interceptor;value%",
    $isObject: 1,
    "%": "SVGLength"
  },
  LengthList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin14;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isList: 1,
    $asList: function() {
      return [P.Length];
    },
    $isEfficientLength: 1,
    "%": "SVGLengthList"
  },
  Interceptor_ListMixin14: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.Length];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin14: {
    "^": "Interceptor_ListMixin14+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.Length];
    },
    $isEfficientLength: 1
  },
  MarkerElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGMarkerElement"
  },
  MaskElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGMaskElement"
  },
  Matrix: {
    "^": "Interceptor;a=,b=,c=",
    $isMatrix: 1,
    $isObject: 1,
    "%": "SVGMatrix"
  },
  Number: {
    "^": "Interceptor;value%",
    $isObject: 1,
    "%": "SVGNumber"
  },
  NumberList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin15;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isList: 1,
    $asList: function() {
      return [P.Number];
    },
    $isEfficientLength: 1,
    "%": "SVGNumberList"
  },
  Interceptor_ListMixin15: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.Number];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin15: {
    "^": "Interceptor_ListMixin15+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.Number];
    },
    $isEfficientLength: 1
  },
  PathSeg: {
    "^": "Interceptor;",
    $isObject: 1,
    "%": "SVGPathSegClosePath;SVGPathSeg"
  },
  PathSegArcAbs: {
    "^": "PathSeg;x=,y=",
    "%": "SVGPathSegArcAbs"
  },
  PathSegArcRel: {
    "^": "PathSeg;x=,y=",
    "%": "SVGPathSegArcRel"
  },
  PathSegCurvetoCubicAbs: {
    "^": "PathSeg;x=,y=",
    "%": "SVGPathSegCurvetoCubicAbs"
  },
  PathSegCurvetoCubicRel: {
    "^": "PathSeg;x=,y=",
    "%": "SVGPathSegCurvetoCubicRel"
  },
  PathSegCurvetoCubicSmoothAbs: {
    "^": "PathSeg;x=,y=",
    "%": "SVGPathSegCurvetoCubicSmoothAbs"
  },
  PathSegCurvetoCubicSmoothRel: {
    "^": "PathSeg;x=,y=",
    "%": "SVGPathSegCurvetoCubicSmoothRel"
  },
  PathSegCurvetoQuadraticAbs: {
    "^": "PathSeg;x=,y=",
    "%": "SVGPathSegCurvetoQuadraticAbs"
  },
  PathSegCurvetoQuadraticRel: {
    "^": "PathSeg;x=,y=",
    "%": "SVGPathSegCurvetoQuadraticRel"
  },
  PathSegCurvetoQuadraticSmoothAbs: {
    "^": "PathSeg;x=,y=",
    "%": "SVGPathSegCurvetoQuadraticSmoothAbs"
  },
  PathSegCurvetoQuadraticSmoothRel: {
    "^": "PathSeg;x=,y=",
    "%": "SVGPathSegCurvetoQuadraticSmoothRel"
  },
  PathSegLinetoAbs: {
    "^": "PathSeg;x=,y=",
    "%": "SVGPathSegLinetoAbs"
  },
  PathSegLinetoHorizontalAbs: {
    "^": "PathSeg;x=",
    "%": "SVGPathSegLinetoHorizontalAbs"
  },
  PathSegLinetoHorizontalRel: {
    "^": "PathSeg;x=",
    "%": "SVGPathSegLinetoHorizontalRel"
  },
  PathSegLinetoRel: {
    "^": "PathSeg;x=,y=",
    "%": "SVGPathSegLinetoRel"
  },
  PathSegLinetoVerticalAbs: {
    "^": "PathSeg;y=",
    "%": "SVGPathSegLinetoVerticalAbs"
  },
  PathSegLinetoVerticalRel: {
    "^": "PathSeg;y=",
    "%": "SVGPathSegLinetoVerticalRel"
  },
  PathSegList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin16;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isList: 1,
    $asList: function() {
      return [P.PathSeg];
    },
    $isEfficientLength: 1,
    "%": "SVGPathSegList"
  },
  Interceptor_ListMixin16: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.PathSeg];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin16: {
    "^": "Interceptor_ListMixin16+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.PathSeg];
    },
    $isEfficientLength: 1
  },
  PathSegMovetoAbs: {
    "^": "PathSeg;x=,y=",
    "%": "SVGPathSegMovetoAbs"
  },
  PathSegMovetoRel: {
    "^": "PathSeg;x=,y=",
    "%": "SVGPathSegMovetoRel"
  },
  PatternElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGPatternElement"
  },
  Point: {
    "^": "Interceptor;x=,y=",
    "%": "SVGPoint"
  },
  PointList: {
    "^": "Interceptor;length=",
    "%": "SVGPointList"
  },
  RadialGradientElement: {
    "^": "_GradientElement;r=",
    "%": "SVGRadialGradientElement"
  },
  Rect: {
    "^": "Interceptor;x=,y=",
    "%": "SVGRect"
  },
  RectElement: {
    "^": "GeometryElement;height=,width=,x=,y=",
    "%": "SVGRectElement"
  },
  ScriptElement0: {
    "^": "SvgElement;type=",
    $isInterceptor: 1,
    "%": "SVGScriptElement"
  },
  StringList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin17;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isEfficientLength: 1,
    "%": "SVGStringList"
  },
  Interceptor_ListMixin17: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin17: {
    "^": "Interceptor_ListMixin17+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isEfficientLength: 1
  },
  StyleElement0: {
    "^": "SvgElement;type=",
    "%": "SVGStyleElement"
  },
  SvgElement: {
    "^": "Element;",
    $isInterceptor: 1,
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGComponentTransferFunctionElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMetadataElement|SVGMissingGlyphElement|SVGStopElement|SVGTitleElement|SVGVKernElement;SVGElement"
  },
  SvgSvgElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGSVGElement"
  },
  SymbolElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGSymbolElement"
  },
  TextContentElement: {
    "^": "GraphicsElement;",
    "%": ";SVGTextContentElement"
  },
  TextPathElement: {
    "^": "TextContentElement;",
    $isInterceptor: 1,
    "%": "SVGTextPathElement"
  },
  TextPositioningElement: {
    "^": "TextContentElement;x=,y=",
    "%": "SVGTSpanElement|SVGTextElement;SVGTextPositioningElement"
  },
  Transform: {
    "^": "Interceptor;type=",
    $isObject: 1,
    "%": "SVGTransform"
  },
  TransformList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin18;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    },
    $isEfficientLength: 1,
    "%": "SVGTransformList"
  },
  Interceptor_ListMixin18: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin18: {
    "^": "Interceptor_ListMixin18+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    },
    $isEfficientLength: 1
  },
  UseElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGUseElement"
  },
  ViewElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGViewElement"
  },
  ViewSpec: {
    "^": "Interceptor;",
    $isInterceptor: 1,
    "%": "SVGViewSpec"
  },
  _GradientElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGLinearGradientElement;SVGGradientElement"
  },
  _SVGCursorElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGCursorElement"
  },
  _SVGFEDropShadowElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGFEDropShadowElement"
  },
  _SVGGlyphRefElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGGlyphRefElement"
  },
  _SVGMPathElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGMPathElement"
  }
}],
["dart.dom.web_audio", "dart:web_audio", , P, {
  "^": "",
  AudioBuffer: {
    "^": "Interceptor;length=",
    "%": "AudioBuffer"
  },
  AudioBufferSourceNode: {
    "^": "AudioSourceNode;",
    start$3: [function(receiver, when, grainOffset, grainDuration) {
      if (!!receiver.start)
        if (grainDuration != null)
          receiver.start(when, grainOffset, grainDuration);
        else if (grainOffset != null)
          receiver.start(when, grainOffset);
        else
          receiver.start(when);
      else if (grainDuration != null)
        receiver.noteOn(when, grainOffset, grainDuration);
      else if (grainOffset != null)
        receiver.noteOn(when, grainOffset);
      else
        receiver.noteOn(when);
    }, function($receiver, when) {
      return this.start$3($receiver, when, null, null);
    }, "start$1", function($receiver, when, grainOffset) {
      return this.start$3($receiver, when, grainOffset, null);
    }, "start$2", "call$3", "call$1", "call$2", "get$start", 2, 4, 12, 28, 28],
    "%": "AudioBufferSourceNode"
  },
  AudioNode: {
    "^": "EventTarget;",
    "%": "AnalyserNode|AudioChannelMerger|AudioChannelSplitter|AudioDestinationNode|AudioGainNode|AudioPannerNode|ChannelMergerNode|ChannelSplitterNode|ConvolverNode|DelayNode|DynamicsCompressorNode|GainNode|JavaScriptAudioNode|MediaStreamAudioDestinationNode|PannerNode|RealtimeAnalyserNode|ScriptProcessorNode|WaveShaperNode|webkitAudioPannerNode;AudioNode"
  },
  AudioParam: {
    "^": "Interceptor;value%",
    "%": "AudioParam"
  },
  AudioSourceNode: {
    "^": "AudioNode;",
    "%": "MediaElementAudioSourceNode|MediaStreamAudioSourceNode;AudioSourceNode"
  },
  BiquadFilterNode: {
    "^": "AudioNode;type=",
    "%": "BiquadFilterNode"
  },
  OscillatorNode: {
    "^": "AudioSourceNode;type=",
    start$1: [function(receiver, when) {
      return receiver.start(when);
    }, function($receiver) {
      return $receiver.start();
    }, "start$0", "call$1", "call$0", "get$start", 0, 2, 13, 28],
    "%": "Oscillator|OscillatorNode"
  }
}],
["dart.dom.web_gl", "dart:web_gl", , P, {
  "^": "",
  ActiveInfo: {
    "^": "Interceptor;type=",
    "%": "WebGLActiveInfo"
  },
  RenderingContext: {
    "^": "Interceptor;",
    activeTexture$1: function(receiver, texture) {
      return receiver.activeTexture(texture);
    },
    attachShader$2: function(receiver, program, shader) {
      return receiver.attachShader(program, shader);
    },
    bindBuffer$2: function(receiver, target, buffer) {
      return receiver.bindBuffer(target, buffer);
    },
    bindFramebuffer$2: function(receiver, target, framebuffer) {
      return receiver.bindFramebuffer(target, framebuffer);
    },
    bindRenderbuffer$2: function(receiver, target, renderbuffer) {
      return receiver.bindRenderbuffer(target, renderbuffer);
    },
    bindTexture$2: function(receiver, target, texture) {
      return receiver.bindTexture(target, texture);
    },
    blendEquation$1: function(receiver, mode) {
      return receiver.blendEquation(mode);
    },
    blendEquationSeparate$2: function(receiver, modeRGB, modeAlpha) {
      return receiver.blendEquationSeparate(modeRGB, modeAlpha);
    },
    blendFunc$2: function(receiver, sfactor, dfactor) {
      return receiver.blendFunc(sfactor, dfactor);
    },
    blendFuncSeparate$4: function(receiver, srcRGB, dstRGB, srcAlpha, dstAlpha) {
      return receiver.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
    },
    bufferDataTyped$3: function(receiver, target, data, usage) {
      return receiver.bufferData(target, data, usage);
    },
    clear$1: function(receiver, mask) {
      return receiver.clear(mask);
    },
    clearColor$4: function(receiver, red, green, blue, alpha) {
      return receiver.clearColor(red, green, blue, alpha);
    },
    clearDepth$1: function(receiver, depth) {
      return receiver.clearDepth(depth);
    },
    clearStencil$1: function(receiver, s) {
      return receiver.clearStencil(s);
    },
    compileShader$1: function(receiver, shader) {
      return receiver.compileShader(shader);
    },
    createBuffer$0: function(receiver) {
      return receiver.createBuffer();
    },
    createFramebuffer$0: function(receiver) {
      return receiver.createFramebuffer();
    },
    createProgram$0: function(receiver) {
      return receiver.createProgram();
    },
    createRenderbuffer$0: function(receiver) {
      return receiver.createRenderbuffer();
    },
    createShader$1: function(receiver, type) {
      return receiver.createShader(type);
    },
    createTexture$0: function(receiver) {
      return receiver.createTexture();
    },
    cullFace$1: function(receiver, mode) {
      return receiver.cullFace(mode);
    },
    deleteShader$1: function(receiver, shader) {
      return receiver.deleteShader(shader);
    },
    depthFunc$1: function(receiver, func) {
      return receiver.depthFunc(func);
    },
    depthMask$1: function(receiver, flag) {
      return receiver.depthMask(flag);
    },
    disable$1: function(receiver, cap) {
      return receiver.disable(cap);
    },
    disableVertexAttribArray$1: function(receiver, index) {
      return receiver.disableVertexAttribArray(index);
    },
    drawArrays$3: function(receiver, mode, first, count) {
      return receiver.drawArrays(mode, first, count);
    },
    drawElements$4: function(receiver, mode, count, type, offset) {
      return receiver.drawElements(mode, count, type, offset);
    },
    enable$1: function(receiver, cap) {
      return receiver.enable(cap);
    },
    enableVertexAttribArray$1: function(receiver, index) {
      return receiver.enableVertexAttribArray(index);
    },
    framebufferRenderbuffer$4: function(receiver, target, attachment, renderbuffertarget, renderbuffer) {
      return receiver.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    },
    framebufferTexture2D$5: function(receiver, target, attachment, textarget, texture, level) {
      return receiver.framebufferTexture2D(target, attachment, textarget, texture, level);
    },
    frontFace$1: function(receiver, mode) {
      return receiver.frontFace(mode);
    },
    generateMipmap$1: function(receiver, target) {
      return receiver.generateMipmap(target);
    },
    getAttribLocation$2: function(receiver, program, $name) {
      return receiver.getAttribLocation(program, $name);
    },
    getError$0: function(receiver) {
      return receiver.getError();
    },
    getExtension$1: function(receiver, $name) {
      return receiver.getExtension($name);
    },
    getParameter$1: function(receiver, pname) {
      return receiver.getParameter(pname);
    },
    getProgramParameter$2: function(receiver, program, pname) {
      return receiver.getProgramParameter(program, pname);
    },
    getShaderInfoLog$1: function(receiver, shader) {
      return receiver.getShaderInfoLog(shader);
    },
    getShaderParameter$2: function(receiver, shader, pname) {
      return receiver.getShaderParameter(shader, pname);
    },
    getShaderPrecisionFormat$2: function(receiver, shadertype, precisiontype) {
      return receiver.getShaderPrecisionFormat(shadertype, precisiontype);
    },
    getUniformLocation$2: function(receiver, program, $name) {
      return receiver.getUniformLocation(program, $name);
    },
    lineWidth$1: function(receiver, width) {
      return receiver.lineWidth(width);
    },
    linkProgram$1: function(receiver, program) {
      return receiver.linkProgram(program);
    },
    pixelStorei$2: function(receiver, pname, param) {
      return receiver.pixelStorei(pname, param);
    },
    polygonOffset$2: function(receiver, factor, units) {
      return receiver.polygonOffset(factor, units);
    },
    renderbufferStorage$4: function(receiver, target, internalformat, width, height) {
      return receiver.renderbufferStorage(target, internalformat, width, height);
    },
    shaderSource$2: function(receiver, shader, string) {
      return receiver.shaderSource(shader, string);
    },
    texImage2D$9: function(receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels) {
      var t1, t2;
      t1 = J.getInterceptor(border_OR_canvas_OR_image_OR_pixels_OR_video);
      if (!!t1.$isImageData || border_OR_canvas_OR_image_OR_pixels_OR_video == null)
        t2 = true;
      else
        t2 = false;
      if (t2) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, P.convertDartToNative_ImageData(border_OR_canvas_OR_image_OR_pixels_OR_video));
        return;
      }
      if (!!t1.$isImageElement)
        t2 = true;
      else
        t2 = false;
      if (t2) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
        return;
      }
      if (!!t1.$isCanvasElement)
        t2 = true;
      else
        t2 = false;
      if (t2) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
        return;
      }
      if (!!t1.$isVideoElement)
        t1 = true;
      else
        t1 = false;
      if (t1) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
        return;
      }
      throw H.wrapException(P.ArgumentError$("Incorrect number or type of arguments"));
    },
    texImage2D$6: function($receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video) {
      return this.texImage2D$9($receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, null, null, null);
    },
    texParameterf$3: function(receiver, target, pname, param) {
      return receiver.texParameterf(target, pname, param);
    },
    texParameteri$3: function(receiver, target, pname, param) {
      return receiver.texParameteri(target, pname, param);
    },
    uniform1f$2: function(receiver, $location, x) {
      return receiver.uniform1f($location, x);
    },
    uniform1fv$2: function(receiver, $location, v) {
      return receiver.uniform1fv($location, v);
    },
    uniform1i$2: function(receiver, $location, x) {
      return receiver.uniform1i($location, x);
    },
    uniform1iv$2: function(receiver, $location, v) {
      return receiver.uniform1iv($location, v);
    },
    uniform2f$3: function(receiver, $location, x, y) {
      return receiver.uniform2f($location, x, y);
    },
    uniform2fv$2: function(receiver, $location, v) {
      return receiver.uniform2fv($location, v);
    },
    uniform3f$4: function(receiver, $location, x, y, z) {
      return receiver.uniform3f($location, x, y, z);
    },
    uniform3fv$2: function(receiver, $location, v) {
      return receiver.uniform3fv($location, v);
    },
    uniform3iv$2: function(receiver, $location, v) {
      return receiver.uniform3iv($location, v);
    },
    uniform4f$5: function(receiver, $location, x, y, z, w) {
      return receiver.uniform4f($location, x, y, z, w);
    },
    uniform4fv$2: function(receiver, $location, v) {
      return receiver.uniform4fv($location, v);
    },
    uniformMatrix2fv$3: function(receiver, $location, transpose, array) {
      return receiver.uniformMatrix2fv($location, transpose, array);
    },
    uniformMatrix3fv$3: function(receiver, $location, transpose, array) {
      return receiver.uniformMatrix3fv($location, transpose, array);
    },
    uniformMatrix4fv$3: function(receiver, $location, transpose, array) {
      return receiver.uniformMatrix4fv($location, transpose, array);
    },
    useProgram$1: function(receiver, program) {
      return receiver.useProgram(program);
    },
    vertexAttribPointer$6: function(receiver, indx, size, type, normalized, stride, offset) {
      return receiver.vertexAttribPointer(indx, size, type, normalized, stride, offset);
    },
    viewport$4: function(receiver, x, y, width, height) {
      return receiver.viewport(x, y, width, height);
    },
    texImage2DTyped$9: function(receiver, targetTexture, levelOfDetail, internalFormat, width, height, border, format, type, data) {
      return receiver.texImage2D(targetTexture, levelOfDetail, internalFormat, width, height, border, format, type, data);
    },
    "%": "WebGLRenderingContext"
  }
}],
["dart.dom.web_sql", "dart:web_sql", , P, {
  "^": "",
  SqlResultSetRowList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin19;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return P.convertNativeToDart_Dictionary(receiver.item(index));
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isList: 1,
    $asList: function() {
      return [P.Map];
    },
    $isEfficientLength: 1,
    "%": "SQLResultSetRowList"
  },
  Interceptor_ListMixin19: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.Map];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin19: {
    "^": "Interceptor_ListMixin19+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.Map];
    },
    $isEfficientLength: 1
  }
}],
["dart.isolate", "dart:isolate", , P, {
  "^": "",
  Capability: {
    "^": "Object;"
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  _JenkinsSmiHash_combine0: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish0: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  min: function(a, b) {
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0 && C.JSNumber_methods.get$isNegative(b) || isNaN(b))
        return b;
      return a;
    }
    return a;
  },
  max: function(a, b) {
    if (typeof a !== "number")
      throw H.wrapException(P.ArgumentError$(a));
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (isNaN(b))
        return b;
      return a;
    }
    if (b === 0 && C.JSNumber_methods.get$isNegative(a))
      return b;
    return a;
  },
  _JSRandom: {
    "^": "Object;",
    nextDouble$0: function() {
      return Math.random();
    }
  },
  _RectangleBase: {
    "^": "Object;",
    get$right: function(_) {
      return this.get$left(this) + this.width;
    },
    get$bottom: function(_) {
      return this.get$top(this) + this.height;
    },
    toString$0: function(_) {
      return "Rectangle (" + this.get$left(this) + ", " + this.top + ") " + this.width + " x " + this.height;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      if (this.get$left(this) === t1.get$left(other)) {
        t2 = this.top;
        t1 = t2 === t1.get$top(other) && this.left + this.width === t1.get$right(other) && t2 + this.height === t1.get$bottom(other);
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = this.top;
      return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, this.get$left(this) & 0x1FFFFFFF), t1 & 0x1FFFFFFF), this.left + this.width & 0x1FFFFFFF), t1 + this.height & 0x1FFFFFFF));
    }
  },
  Rectangle: {
    "^": "_RectangleBase;left>,top>,width>,height>",
    $asRectangle: null
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  _checkLength: function($length) {
    return $length;
  },
  _ensureNativeList: function(list) {
    var t1, result, t2, i, t3;
    t1 = J.getInterceptor(list);
    if (!!t1.$isJSIndexable)
      return list;
    t1 = t1.get$length(list);
    result = Array(t1);
    result.fixed$length = Array;
    for (t2 = list.length, i = 0; i < t2; ++i) {
      t3 = list[i];
      if (i >= t1)
        return H.ioore(result, i);
      result[i] = t3;
    }
    return result;
  },
  NativeByteBuffer: {
    "^": "Interceptor;",
    $isNativeByteBuffer: 1,
    "%": "ArrayBuffer"
  },
  NativeTypedData: {
    "^": "Interceptor;",
    _invalidIndex$2: function(receiver, index, $length) {
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0 || index >= $length) {
        if (!!this.$isList)
          if ($length === receiver.length)
            throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        throw H.wrapException(P.RangeError$range(index, 0, $length - 1, null, null));
      } else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + index));
    },
    _checkIndex$2: function(receiver, index, $length) {
      if (index >>> 0 !== index || index >= $length)
        this._invalidIndex$2(receiver, index, $length);
    },
    $isNativeTypedData: 1,
    "%": "DataView;ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
  },
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var t1, count, sourceLength;
      t1 = receiver.length + 1;
      this._checkIndex$2(receiver, start, t1);
      this._checkIndex$2(receiver, end, t1);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      count = end - start;
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1
  },
  NativeTypedArrayOfDouble: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfDouble) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange$4(receiver, start, end, iterable, skipCount);
    }
  },
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: 1
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  NativeTypedArrayOfInt: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange$4(receiver, start, end, iterable, skipCount);
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1
  },
  NativeTypedArray_ListMixin0: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  },
  NativeFloat32List: {
    "^": "NativeTypedArrayOfDouble;",
    $isFloat32List: 1,
    $isList: 1,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: 1,
    "%": "Float32Array"
  },
  NativeFloat64List: {
    "^": "NativeTypedArrayOfDouble;",
    $isList: 1,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: 1,
    "%": "Float64Array"
  },
  NativeInt16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    "%": "Int16Array"
  },
  NativeInt32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isInt32List: 1,
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    "%": "Int32Array"
  },
  NativeInt8List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    "%": "Int8Array"
  },
  NativeUint16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    "%": "Uint16Array"
  },
  NativeUint32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    "%": "Uint32Array"
  },
  NativeUint8ClampedList: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  NativeUint8List: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    "%": ";Uint8Array"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log != "undefined") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["html_common", "dart:html_common", , P, {
  "^": "",
  convertNativeToDart_Dictionary: function(object) {
    var dict, keys, t1, key;
    if (object == null)
      return;
    dict = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
    keys = Object.getOwnPropertyNames(object);
    for (t1 = new J.ArrayIterator(keys, keys.length, 0, null); t1.moveNext$0();) {
      key = t1.__interceptors$_current;
      dict.$indexSet(0, key, object[key]);
    }
    return dict;
  },
  convertDartToNative_Dictionary: function(dict) {
    var object = {};
    dict.forEach$1(0, new P.convertDartToNative_Dictionary_closure(object));
    return object;
  },
  convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
    var copies = [];
    return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
  },
  convertDartToNative_ImageData: function(imageData) {
    return imageData;
  },
  Device_isOpera: function() {
    var t1 = $.Device__isOpera;
    if (t1 == null) {
      t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
      $.Device__isOpera = t1;
    }
    return t1;
  },
  Device_cssPrefix: function() {
    var prefix, t1;
    prefix = $.Device__cachedCssPrefix;
    if (prefix != null)
      return prefix;
    t1 = $.Device__isFirefox;
    if (t1 == null) {
      t1 = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
      $.Device__isFirefox = t1;
    }
    if (t1 === true)
      prefix = "-moz-";
    else {
      t1 = $.Device__isIE;
      if (t1 == null) {
        t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
        $.Device__isIE = t1;
      }
      if (t1 === true)
        prefix = "-ms-";
      else
        prefix = P.Device_isOpera() === true ? "-o-" : "-webkit-";
    }
    $.Device__cachedCssPrefix = prefix;
    return prefix;
  },
  convertDartToNative_Dictionary_closure: {
    "^": "Closure:14;object_0",
    call$2: function(key, value) {
      this.object_0[key] = value;
    }
  },
  convertNativeToDart_AcceptStructuredClone_findSlot: {
    "^": "Closure:15;values_0,copies_1",
    call$1: function(value) {
      var t1, $length, i, t2;
      t1 = this.values_0;
      $length = t1.length;
      for (i = 0; i < $length; ++i) {
        t2 = t1[i];
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      t1.push(value);
      this.copies_1.push(null);
      return $length;
    }
  },
  convertNativeToDart_AcceptStructuredClone_readSlot: {
    "^": "Closure:16;copies_2",
    call$1: function(i) {
      var t1 = this.copies_2;
      if (i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    }
  },
  convertNativeToDart_AcceptStructuredClone_writeSlot: {
    "^": "Closure:17;copies_3",
    call$2: function(i, x) {
      var t1 = this.copies_3;
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    }
  },
  convertNativeToDart_AcceptStructuredClone_walk: {
    "^": "Closure:2;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
    call$1: function(e) {
      var proto, slot, copy, t1, key, $length, t2, i;
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(e.getTime(), true);
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      proto = Object.getPrototypeOf(e);
      if (proto === Object.prototype || proto === null) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        this.writeSlot_7.call$2(slot, copy);
        for (t1 = Object.keys(e), t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          key = t1.__interceptors$_current;
          copy.$indexSet(0, key, this.call$1(e[key]));
        }
        return copy;
      }
      if (e instanceof Array) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        t1 = J.getInterceptor$asx(e);
        $length = t1.get$length(e);
        copy = this.mustCopy_4 ? new Array($length) : e;
        this.writeSlot_7.call$2(slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
        return copy;
      }
      return e;
    }
  }
}],
["", "index.dart", , E, {
  "^": "",
  main: [function() {
    E.init();
    E.render(0);
  }, "call$0", "main$closure", 0, 0, 1],
  init: function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, intersectionPoint, circle;
    t1 = document.createElement("div", null);
    $.container = t1;
    document.body.appendChild(t1);
    t1 = $.Object3DCount;
    $.Object3DCount = t1 + 1;
    t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
    t2.setValues$3(0, 1, 0);
    t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
    t3.setValues$3(0, 0, 0);
    t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
    t4.setValues$3(0, 0, 0);
    t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
    t5.setValues$3(1, 1, 1);
    t6 = new T.Matrix4(new Float32Array(H._checkLength(16)));
    t6.setIdentity$0();
    t7 = new T.Matrix4(new Float32Array(H._checkLength(16)));
    t7.setIdentity$0();
    t8 = new T.Matrix4(new Float32Array(H._checkLength(16)));
    t8.setIdentity$0();
    t8 = new S.Scene(null, null, null, null, null, null, null, null, null, null, t1, "", P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, [], t2, t3, t4, t5, "XYZ", null, null, null, true, null, t6, t7, t8, true, true, T.Quaternion$identity(), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(H._checkLength(3))), null, null, null, false, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    t8.Scene$0();
    $.scene = t8;
    t8 = window.innerWidth;
    t7 = window.innerHeight;
    if (typeof t8 !== "number")
      return t8.$div();
    if (typeof t7 !== "number")
      return H.iae(t7);
    t6 = new Float32Array(H._checkLength(16));
    t5 = new Float32Array(H._checkLength(16));
    t4 = new T.Matrix4(new Float32Array(H._checkLength(16)));
    t4.setIdentity$0();
    t3 = new T.Matrix4(new Float32Array(H._checkLength(16)));
    t3.setIdentity$0();
    t2 = new T.Matrix4(new Float32Array(H._checkLength(16)));
    t2.setIdentity$0();
    t1 = $.Object3DCount;
    $.Object3DCount = t1 + 1;
    t9 = new T.Vector3(new Float32Array(H._checkLength(3)));
    t9.setValues$3(0, 1, 0);
    t10 = new T.Vector3(new Float32Array(H._checkLength(3)));
    t10.setValues$3(0, 0, 0);
    t11 = new T.Vector3(new Float32Array(H._checkLength(3)));
    t11.setValues$3(0, 0, 0);
    t12 = new T.Vector3(new Float32Array(H._checkLength(3)));
    t12.setValues$3(1, 1, 1);
    t13 = new T.Matrix4(new Float32Array(H._checkLength(16)));
    t13.setIdentity$0();
    t14 = new T.Matrix4(new Float32Array(H._checkLength(16)));
    t14.setIdentity$0();
    t15 = new T.Matrix4(new Float32Array(H._checkLength(16)));
    t15.setIdentity$0();
    t15 = new S.PerspectiveCamera(70, t8 / t7, null, null, null, null, null, null, t4, t3, t2, 0.1, 2000, t6, t5, t1, "", P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, [], t9, t10, t11, t12, "XYZ", null, null, null, true, null, t13, t14, t15, true, true, T.Quaternion$identity(), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(H._checkLength(3))), null, null, null, false, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    t15.updateProjectionMatrix$0();
    $.camera = t15;
    t15.position.storage[2] = 15;
    $.scene.add$1(0, t15);
    E.calculateLines();
    E.drawLineSegments();
    for (t1 = $.get$intersectionPoints(), t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      intersectionPoint = t1.__interceptors$_current;
      t2 = $.MaterialCount;
      $.MaterialCount = t2 + 1;
      t3 = new S.Color(1, 1, 1);
      t3.setHex$1(65280);
      circle = S.Mesh$(S.CircleGeometry$(0.1, 32, 0, 6.283185307179586), new S.MeshBasicMaterial(null, null, null, null, 0, 1, 0.98, 2, false, 1, "round", "round", false, false, false, 0, 0, "", t2, 0, t3, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, true, 0, null, null, null, null, null, false));
      t2 = J.getInterceptor$x(intersectionPoint);
      t3 = t2.get$x(intersectionPoint);
      t2 = t2.get$y(intersectionPoint);
      t4 = new Float32Array(3);
      t4[0] = t3;
      t4[1] = t2;
      t4[2] = 0;
      circle.position = new T.Vector3(t4);
      $.scene.add$1(0, circle);
    }
    t1 = S.Color$(0);
    t2 = new S.WebGLRendererInfo(null, null);
    t2.WebGLRendererInfo$0();
    t3 = S.Frustum$();
    t4 = new T.Matrix4(new Float32Array(H._checkLength(16)));
    t4.setIdentity$0();
    t5 = new T.Matrix4(new Float32Array(H._checkLength(16)));
    t5.setIdentity$0();
    t5 = new S.WebGLRenderer(null, null, "highp", t1, 0, null, true, true, true, true, false, true, true, true, true, true, true, true, false, false, false, false, true, false, false, 1, 2, 8, 4, true, [], [], t2, [], 0, null, null, -1, null, null, 0, 0, P.LinkedHashMap_LinkedHashMap$_empty(null, null), -1, -1, -1, -1, -1, -1, -1, -1, null, null, null, null, 0, 0, 0, 0, 0, 0, t3, t4, t5, new T.Vector3(new Float32Array(H._checkLength(3))), new T.Vector3(new Float32Array(H._checkLength(3))), null, true, null, null, null, null, null, null, null, null, null, null, null, null);
    t5.WebGLRenderer$10$alpha$antialias$canvas$clearAlpha$clearColorHex$devicePixelRatio$precision$premultipliedAlpha$preserveDrawingBuffer$stencil(true, true, null, 0, 0, null, "highp", true, false, true);
    $.renderer = t5;
    t4 = window.innerWidth;
    t3 = window.innerHeight;
    t2 = t5.canvas;
    t1 = t5.devicePixelRatio;
    if (typeof t4 !== "number")
      return t4.$mul();
    if (typeof t1 !== "number")
      return H.iae(t1);
    J.set$width$x(t2, C.JSNumber_methods.toInt$0(t4 * t1));
    t1 = t5.canvas;
    t2 = t5.devicePixelRatio;
    if (typeof t3 !== "number")
      return t3.$mul();
    if (typeof t2 !== "number")
      return H.iae(t2);
    J.set$height$x(t1, C.JSNumber_methods.toInt$0(t3 * t2));
    J.set$width$x(t5.canvas.style, "" + t4 + "px");
    J.set$height$x(t5.canvas.style, "" + t3 + "px");
    t3 = J.get$width$x(t5.canvas);
    t4 = J.get$height$x(t5.canvas);
    t5._viewportX = 0;
    t5._viewportY = 0;
    t5._viewportWidth = t3 !== -1 ? t3 : J.get$width$x(t5.canvas);
    t1 = t4 !== -1 ? t4 : J.get$height$x(t5.canvas);
    t5._viewportHeight = t1;
    J.viewport$4$x(t5._gl, t5._viewportX, t5._viewportY, t5._viewportWidth, t1);
    $.container.appendChild($.renderer.canvas);
  },
  render: [function(dt) {
    var t1, t2;
    t1 = window;
    C.Window_methods._ensureRequestAnimationFrame$0(t1);
    C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(E.render$closure()));
    t1 = $.camera;
    t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
    t2.setValues$3(0, 0, 0);
    t1.lookAt$1(t2);
    $.renderer._render$2($.scene, $.camera);
  }, "call$1", "render$closure", 2, 0, 27],
  intersects: function(a, b) {
    var t1, t2, qmp, pmq, r, s, qmpxr, t3, t4, t5, rxs, t6, t, u;
    t1 = J.getInterceptor$x(b);
    t2 = J.getInterceptor$x(a);
    qmp = J.$sub$n(t1.get$start(b), t2.get$start(a));
    pmq = J.$sub$n(t2.get$start(a), t1.get$start(b));
    r = J.$sub$n(t2.get$end(a), t2.get$start(a));
    s = J.$sub$n(t1.get$end(b), t1.get$start(b));
    qmpxr = qmp.cross$1(r);
    t1 = qmp.storage;
    t3 = t1[0];
    t4 = J.getInterceptor$x(s);
    t5 = t4.get$storage(s);
    if (1 >= t5.length)
      return H.ioore(t5, 1);
    t5 = t5[1];
    if (typeof t5 !== "number")
      return H.iae(t5);
    t1 = t1[1];
    t4 = t4.get$storage(s);
    if (0 >= t4.length)
      return H.ioore(t4, 0);
    t4 = t4[0];
    if (typeof t4 !== "number")
      return H.iae(t4);
    rxs = r.cross$1(s);
    t6 = rxs === 0;
    if (t6 && qmpxr === 0) {
      if (!(qmp.dot$1(r) >= 0 && qmp.dot$1(r) <= r.dot$1(r)))
        t1 = pmq.dot$1(s) >= 0 && pmq.dot$1(s) <= s.dot$1(s);
      else
        t1 = true;
      if (t1)
        return;
      return;
    }
    if (t6 && qmpxr === 0)
      ;
    if (t6 && qmpxr !== 0)
      return;
    if (!t6) {
      if (typeof rxs !== "number")
        return H.iae(rxs);
      t = (t3 * t5 - t1 * t4) / rxs;
      if (t < 0 || t > 1)
        return;
      u = qmpxr / rxs;
      if (u < 0 || u > 1)
        return;
      return J.$add$ns(t2.get$start(a), r.$mul(0, t));
    }
    return;
  },
  getPossibleIntersectors: function(line, parentIndex) {
    var possibleIntersectors, t1, i, t2, j, lineSegment, t3, t4;
    possibleIntersectors = [];
    possibleIntersectors.$builtinTypeInfo = [E.LineSegment];
    for (t1 = J.getInterceptor$x(line), i = 0; t2 = $.get$Lines(), i < t2.length; ++i) {
      if (i === parentIndex)
        continue;
      for (t2 = t2[i].Line, j = 0; j < t2.length; ++j) {
        lineSegment = t2[j];
        if (!(J.get$start$x(lineSegment).storage[0] <= J.get$x$x(t1.get$start(line)) && lineSegment.end.storage[0] >= J.get$x$x(t1.get$start(line)))) {
          t3 = lineSegment.start.storage;
          if (t3[0] >= J.get$x$x(t1.get$start(line))) {
            t3 = t3[0];
            t4 = J.get$x$x(t1.get$end(line));
            if (typeof t4 !== "number")
              return H.iae(t4);
            t4 = t3 <= t4;
            t3 = t4;
          } else
            t3 = false;
        } else
          t3 = true;
        if (t3)
          possibleIntersectors.push(lineSegment);
      }
    }
    return possibleIntersectors;
  },
  calculateLines: function() {
    var t1, a, t2, t3, from, i, to, lineGroup, line, possibleIntersectors, line0, intersectionPoint;
    t1 = H.setRuntimeTypeInfo([], [E.LineSegment]);
    a = new E.LineGroup(t1);
    t2 = C.C__JSRandom.nextDouble$0();
    t3 = new Float32Array(H._checkLength(2));
    from = new T.Vector2(t3);
    t3[0] = -6;
    t3[1] = 3 * t2;
    for (i = 0; i < 10; ++i, from = to) {
      t2 = C.C__JSRandom.nextDouble$0();
      t3 = new Float32Array(2);
      to = new T.Vector2(t3);
      t3[0] = i - 5;
      t3[1] = 3 * t2;
      t1.push(new E.LineSegment(from, to, null, true, false));
    }
    $.get$Lines().push(a);
    $.Horizon = a;
    t1 = H.setRuntimeTypeInfo([], [E.LineSegment]);
    t2 = C.C__JSRandom.nextDouble$0();
    t3 = new Float32Array(H._checkLength(2));
    from = new T.Vector2(t3);
    t3[0] = -6;
    t3[1] = 3 * t2;
    for (i = 0; i < 10; ++i, from = to) {
      t2 = C.C__JSRandom.nextDouble$0();
      t3 = new Float32Array(2);
      to = new T.Vector2(t3);
      t3[0] = i - 5;
      t3[1] = 3 * t2;
      t1.push(new E.LineSegment(from, to, null, true, false));
    }
    $.get$Lines().push(new E.LineGroup(t1));
    for (t1 = $.get$Lines(), t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      lineGroup = t1.__interceptors$_current;
      for (t2 = lineGroup.get$Line(), t2 = new J.ArrayIterator(t2, t2.length, 0, null); t2.moveNext$0();) {
        line = t2.__interceptors$_current;
        possibleIntersectors = E.getPossibleIntersectors(line, J.indexOf$1$asx($.get$Lines(), lineGroup));
        line0 = "Number of possibles: " + C.JSInt_methods.toString$0(possibleIntersectors.length);
        H.printString(line0);
        for (t3 = new J.ArrayIterator(possibleIntersectors, possibleIntersectors.length, 0, null); t3.moveNext$0();) {
          intersectionPoint = E.intersects(line, t3.__interceptors$_current);
          if (intersectionPoint != null)
            $.get$intersectionPoints().push(intersectionPoint);
        }
      }
    }
  },
  drawLineSegments: function() {
    var i, t1, t2, t3, material, geometry, counter, line, t4;
    for (i = 0; i < $.get$Lines().length; ++i) {
      t1 = i === 0 ? 30685 : 16711680;
      t2 = $.MaterialCount;
      $.MaterialCount = t2 + 1;
      t3 = new S.Color(1, 1, 1);
      t3.setHex$1(t1);
      material = new S.LineBasicMaterial(100, "round", "round", "", t2, 0, t3, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, true, 0, null, null, null, null, null, false);
      geometry = S.Geometry$();
      for (counter = 0; true;) {
        t1 = $.get$Lines();
        t2 = t1.length;
        if (i >= t2)
          return H.ioore(t1, i);
        t3 = t1[i].Line;
        if (counter >= t3.length)
          break;
        if (i >= t2)
          return H.ioore(t1, i);
        line = t3[counter];
        if (J.get$visible$x(line)) {
          t1 = geometry.vertices;
          t2 = line.start.storage;
          t3 = t2[0];
          t2 = t2[1];
          t4 = new Float32Array(3);
          t4[0] = t3;
          t4[1] = t2;
          t4[2] = 0;
          t1.push(new T.Vector3(t4));
          t4 = geometry.vertices;
          t1 = line.end.storage;
          t2 = t1[0];
          t1 = t1[1];
          t3 = new Float32Array(3);
          t3[0] = t2;
          t3[1] = t1;
          t3[2] = 0;
          t4.push(new T.Vector3(t3));
        } else {
          line = S.Line$(geometry, material, 0);
          $.scene.add$1(0, line);
          geometry = S.Geometry$();
        }
        ++counter;
      }
      line = S.Line$(geometry, material, 0);
      $.scene.add$1(0, line);
    }
  },
  LineSegment: {
    "^": "Object;start>,end>,depth,visible>,intersects",
    toString$0: function(_) {
      return "(" + this.start.toString$0(0) + "; " + this.end.toString$0(0) + ")";
    }
  },
  LineGroup: {
    "^": "Object;Line<",
    get$length: function(_) {
      return this.Line.length;
    },
    $index: function(_, index) {
      var t1 = this.Line;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    toString$0: function(_) {
      var t1, out, line, t2, t3;
      for (t1 = this.Line, t1 = new J.ArrayIterator(t1, t1.length, 0, null), out = ""; t1.moveNext$0();) {
        line = t1.__interceptors$_current;
        t2 = J.getInterceptor(line);
        t3 = J.$add$ns(t2.toString$0(line), " (");
        out = C.JSString_methods.$add(out, J.$add$ns(J.$add$ns(t3, t2.get$visible(line) === true ? "visible" : "not visible"), ")"));
      }
      return out;
    }
  }
},
1],
["three", "package:three/three.dart", , S, {
  "^": "",
  makeLookAt: function(m, eye, center, up) {
    var z, x, t1, t2, t3;
    z = eye.$sub(0, center).normalize$0(0);
    if (z.get$length(z) === 0)
      z.storage[2] = 1;
    x = up.cross$1(z).normalize$0(0);
    if (x.get$length(x) === 0) {
      t1 = z.storage;
      t1[0] = t1[0] + 0.0001;
      x = up.cross$1(z).normalize$0(0);
    }
    t1 = x.storage;
    t2 = z.cross$1(x).normalize$0(0).storage;
    t3 = z.storage;
    m.setValues$16(t1[0], t1[1], t1[2], 0, t2[0], t2[1], t2[2], 0, t3[0], t3[1], t3[2], 0, 0, 0, 0, 1);
    return m;
  },
  setRotationFromQuaternion: function(m, q) {
    var t1, x, y, z, w, x2, y2, z2, xx, xy, xz, yy, yz, zz, wx, wy, wz;
    t1 = q.storage;
    x = t1[0];
    y = t1[1];
    z = t1[2];
    w = t1[3];
    x2 = x + x;
    y2 = y + y;
    z2 = z + z;
    xx = x * x2;
    xy = x * y2;
    xz = x * z2;
    yy = y * y2;
    yz = y * z2;
    zz = z * z2;
    wx = w * x2;
    wy = w * y2;
    wz = w * z2;
    t1 = m.storage;
    t1[0] = 1 - (yy + zz);
    t1[4] = xy - wz;
    t1[8] = xz + wy;
    t1[1] = xy + wz;
    t1[5] = 1 - (xx + zz);
    t1[9] = yz - wx;
    t1[2] = xz - wy;
    t1[6] = yz + wx;
    t1[10] = 1 - (xx + yy);
    return m;
  },
  calcInverse: function(m) {
    var a11, t1, t2, t3, t4, t5, t6, t7, t8, a12, t9, t10, t11, t12, t13, t14, t15, t16, a13, t17, t18, t19, t20, t21, t22, t23, t24, det, idet, t25;
    a11 = m.$index(0, 10) * m.$index(0, 5) - m.$index(0, 6) * m.$index(0, 9);
    t1 = m.$index(0, 10);
    t2 = m.$index(0, 1);
    t3 = m.$index(0, 2);
    t4 = m.$index(0, 9);
    t5 = m.$index(0, 6);
    t6 = m.$index(0, 1);
    t7 = m.$index(0, 2);
    t8 = m.$index(0, 5);
    a12 = -m.$index(0, 10) * m.$index(0, 4) + m.$index(0, 6) * m.$index(0, 8);
    t9 = m.$index(0, 10);
    t10 = m.$index(0, 0);
    t11 = m.$index(0, 2);
    t12 = m.$index(0, 8);
    t13 = m.$index(0, 6);
    t14 = m.$index(0, 0);
    t15 = m.$index(0, 2);
    t16 = m.$index(0, 4);
    a13 = m.$index(0, 9) * m.$index(0, 4) - m.$index(0, 5) * m.$index(0, 8);
    t17 = m.$index(0, 9);
    t18 = m.$index(0, 0);
    t19 = m.$index(0, 1);
    t20 = m.$index(0, 8);
    t21 = m.$index(0, 5);
    t22 = m.$index(0, 0);
    t23 = m.$index(0, 1);
    t24 = m.$index(0, 4);
    det = m.$index(0, 0) * a11 + m.$index(0, 1) * a12 + m.$index(0, 2) * a13;
    if (det === 0)
      P.print("Matrix3.getInverse(): determinant == 0");
    idet = 1 / det;
    t25 = new T.Matrix3(new Float32Array(H._checkLength(9)));
    t25.setValues$9(idet * a11, idet * (-t1 * t2 + t3 * t4), idet * (t5 * t6 - t7 * t8), idet * a12, idet * (t9 * t10 - t11 * t12), idet * (-t13 * t14 + t15 * t16), idet * a13, idet * (-t17 * t18 + t19 * t20), idet * (t21 * t22 - t23 * t24));
    return t25;
  },
  decompose: function(m, translation, rotation, scale) {
    var te, t1, t2, t3, t4, x, y, z, matrix, quaternion, m11, m12, m13, m21, m22, m23, m31, m32, m33, trace, s;
    te = m.get$storage(m);
    t1 = te.length;
    if (0 >= t1)
      return H.ioore(te, 0);
    t2 = te[0];
    if (1 >= t1)
      return H.ioore(te, 1);
    t3 = te[1];
    if (2 >= t1)
      return H.ioore(te, 2);
    t4 = te[2];
    x = new T.Vector3(new Float32Array(H._checkLength(3)));
    x.setValues$3(t2, t3, t4);
    if (4 >= t1)
      return H.ioore(te, 4);
    t4 = te[4];
    if (5 >= t1)
      return H.ioore(te, 5);
    t3 = te[5];
    if (6 >= t1)
      return H.ioore(te, 6);
    t2 = te[6];
    y = new T.Vector3(new Float32Array(H._checkLength(3)));
    y.setValues$3(t4, t3, t2);
    if (8 >= t1)
      return H.ioore(te, 8);
    t2 = te[8];
    if (9 >= t1)
      return H.ioore(te, 9);
    t3 = te[9];
    if (10 >= t1)
      return H.ioore(te, 10);
    t4 = te[10];
    z = new T.Vector3(new Float32Array(H._checkLength(3)));
    z.setValues$3(t2, t3, t4);
    t2 = scale.storage;
    t2[0] = x.get$length(x);
    t2[1] = y.get$length(y);
    t2[2] = z.get$length(z);
    if (12 >= t1)
      return H.ioore(te, 12);
    t3 = translation.storage;
    t3[0] = te[12];
    if (13 >= t1)
      return H.ioore(te, 13);
    t3[1] = te[13];
    if (14 >= t1)
      return H.ioore(te, 14);
    t3[2] = te[14];
    matrix = m.clone$0(0);
    t3 = matrix.get$storage(matrix);
    if (0 >= t3.length)
      return H.ioore(t3, 0);
    t3[0] = t3[0] / t2[0];
    t3 = matrix.get$storage(matrix);
    if (1 >= t3.length)
      return H.ioore(t3, 1);
    t3[1] = t3[1] / t2[0];
    t3 = matrix.get$storage(matrix);
    if (2 >= t3.length)
      return H.ioore(t3, 2);
    t3[2] = t3[2] / t2[0];
    t3 = matrix.get$storage(matrix);
    if (4 >= t3.length)
      return H.ioore(t3, 4);
    t3[4] = t3[4] / t2[1];
    t3 = matrix.get$storage(matrix);
    if (5 >= t3.length)
      return H.ioore(t3, 5);
    t3[5] = t3[5] / t2[1];
    t3 = matrix.get$storage(matrix);
    if (6 >= t3.length)
      return H.ioore(t3, 6);
    t3[6] = t3[6] / t2[1];
    t3 = matrix.get$storage(matrix);
    if (8 >= t3.length)
      return H.ioore(t3, 8);
    t3[8] = t3[8] / t2[2];
    t3 = matrix.get$storage(matrix);
    if (9 >= t3.length)
      return H.ioore(t3, 9);
    t3[9] = t3[9] / t2[2];
    t3 = matrix.get$storage(matrix);
    if (10 >= t3.length)
      return H.ioore(t3, 10);
    t3[10] = t3[10] / t2[2];
    quaternion = T.Quaternion$identity();
    te = matrix.get$storage(matrix);
    t2 = te.length;
    if (0 >= t2)
      return H.ioore(te, 0);
    m11 = te[0];
    if (4 >= t2)
      return H.ioore(te, 4);
    m12 = te[4];
    if (8 >= t2)
      return H.ioore(te, 8);
    m13 = te[8];
    m21 = te[1];
    m22 = te[5];
    if (9 >= t2)
      return H.ioore(te, 9);
    m23 = te[9];
    m31 = te[2];
    m32 = te[6];
    if (10 >= t2)
      return H.ioore(te, 10);
    m33 = te[10];
    trace = m11 + m22 + m33;
    if (trace > 0) {
      s = 0.5 / Math.sqrt(H.checkNum(trace + 1));
      t1 = quaternion.storage;
      t1[3] = 0.25 / s;
      t1[0] = (m32 - m23) * s;
      t1[1] = (m13 - m31) * s;
      t1[2] = (m21 - m12) * s;
    } else if (m11 > m22 && m11 > m33) {
      s = 2 * Math.sqrt(H.checkNum(1 + m11 - m22 - m33));
      t1 = quaternion.storage;
      t1[3] = (m32 - m23) / s;
      t1[0] = 0.25 * s;
      t1[1] = (m12 + m21) / s;
      t1[2] = (m13 + m31) / s;
    } else {
      t1 = quaternion.storage;
      t2 = m23 + m32;
      if (m22 > m33) {
        s = 2 * Math.sqrt(H.checkNum(1 + m22 - m11 - m33));
        t1[3] = (m13 - m31) / s;
        t1[0] = (m12 + m21) / s;
        t1[1] = 0.25 * s;
        t1[2] = t2 / s;
      } else {
        s = 2 * Math.sqrt(H.checkNum(1 + m33 - m11 - m22));
        t1[3] = (m21 - m12) / s;
        t1[0] = (m13 + m31) / s;
        t1[1] = t2 / s;
        t1[2] = 0.25 * s;
      }
    }
    return [translation, rotation, scale];
  },
  calcEulerFromRotationMatrix: function(m, order) {
    var clamp, t1, m11, m12, m13, m21, m22, m23, m31, m32, m33, y, x, z;
    clamp = new S.calcEulerFromRotationMatrix_closure();
    t1 = m.storage;
    m11 = t1[0];
    m12 = t1[4];
    m13 = t1[8];
    m21 = t1[1];
    m22 = t1[5];
    m23 = t1[9];
    m31 = t1[2];
    m32 = t1[6];
    m33 = t1[10];
    if (order === "XYZ") {
      y = Math.asin(H.checkNum(clamp.call$1(m13)));
      if (Math.abs(m13) < 0.99999) {
        x = Math.atan2(H.checkNum(-m23), H.checkNum(m33));
        z = Math.atan2(H.checkNum(-m12), H.checkNum(m11));
      } else {
        x = Math.atan2(H.checkNum(m21), H.checkNum(m22));
        z = 0;
      }
    } else if (order === "YXZ") {
      x = Math.asin(H.checkNum(J.$negate$n(clamp.call$1(m23))));
      if (Math.abs(m23) < 0.99999) {
        y = Math.atan2(H.checkNum(m13), H.checkNum(m33));
        z = Math.atan2(H.checkNum(m21), H.checkNum(m22));
      } else {
        y = Math.atan2(H.checkNum(-m31), H.checkNum(m11));
        z = 0;
      }
    } else if (order === "ZXY") {
      x = Math.asin(H.checkNum(clamp.call$1(m32)));
      if (Math.abs(m32) < 0.99999) {
        y = Math.atan2(H.checkNum(-m31), H.checkNum(m33));
        z = Math.atan2(H.checkNum(-m12), H.checkNum(m22));
      } else {
        z = Math.atan2(H.checkNum(m13), H.checkNum(m11));
        y = 0;
      }
    } else if (order === "ZYX") {
      y = Math.asin(H.checkNum(J.$negate$n(clamp.call$1(m31))));
      if (Math.abs(m31) < 0.99999) {
        x = Math.atan2(H.checkNum(m32), H.checkNum(m33));
        z = Math.atan2(H.checkNum(m21), H.checkNum(m11));
      } else {
        z = Math.atan2(H.checkNum(-m12), H.checkNum(m22));
        x = 0;
      }
    } else if (order === "YZX") {
      z = Math.asin(H.checkNum(clamp.call$1(m21)));
      if (Math.abs(m21) < 0.99999) {
        x = Math.atan2(H.checkNum(-m23), H.checkNum(m22));
        y = Math.atan2(H.checkNum(-m31), H.checkNum(m11));
      } else {
        y = Math.atan2(H.checkNum(m31), H.checkNum(m33));
        x = 0;
      }
    } else if (order === "XZY") {
      z = Math.asin(H.checkNum(J.$negate$n(clamp.call$1(m12))));
      if (Math.abs(m12) < 0.99999) {
        x = Math.atan2(H.checkNum(m32), H.checkNum(m22));
        y = Math.atan2(H.checkNum(m13), H.checkNum(m11));
      } else {
        x = Math.atan2(H.checkNum(-m13), H.checkNum(m33));
        y = 0;
      }
    } else {
      x = null;
      y = null;
      z = null;
    }
    t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
    t1.setValues$3(x, y, z);
    return t1;
  },
  ShaderChunk: function() {
    var t1 = $.__ShaderChunk;
    if (t1 == null) {
      t1 = P.LinkedHashMap_LinkedHashMap$_literal(["fog_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_FOG", "uniform vec3 fogColor;", "#ifdef FOG_EXP2", "uniform float fogDensity;", "#else", "uniform float fogNear;", "uniform float fogFar;", "#endif", "#endif"], "\n"), "fog_fragment", C.JSArray_methods.join$1(["#ifdef USE_FOG", "float depth = gl_FragCoord.z / gl_FragCoord.w;", "#ifdef FOG_EXP2", "const float LOG2 = 1.442695;", "float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );", "fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );", "#else", "float fogFactor = smoothstep( fogNear, fogFar, depth );", "#endif", "gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );", "#endif"], "\n"), "envmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_ENVMAP", "uniform float reflectivity;", "uniform samplerCube envMap;", "uniform float flipEnvMap;", "uniform int combine;", "#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )", "uniform bool useRefract;", "uniform float refractionRatio;", "#else", "varying vec3 vReflect;", "#endif", "#endif"], "\n"), "envmap_fragment", C.JSArray_methods.join$1(["#ifdef USE_ENVMAP", "vec3 reflectVec;", "#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )", "vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );", "if ( useRefract ) {", "reflectVec = refract( cameraToVertex, normal, refractionRatio );", "} else { ", "reflectVec = reflect( cameraToVertex, normal );", "}", "#else", "reflectVec = vReflect;", "#endif", "#ifdef DOUBLE_SIDED", "float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );", "vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "#else", "vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "#endif", "#ifdef GAMMA_INPUT", "cubeColor.xyz *= cubeColor.xyz;", "#endif", "if ( combine == 1 ) {", "gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );", "} else if ( combine == 2 ) {", "gl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;", "} else {", "gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );", "}", "#endif"], "\n"), "envmap_pars_vertex", C.JSArray_methods.join$1(["#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )", "varying vec3 vReflect;", "uniform float refractionRatio;", "uniform bool useRefract;", "#endif"], "\n"), "worldpos_vertex", C.JSArray_methods.join$1(["#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )", "#ifdef USE_SKINNING", "vec4 worldPosition = modelMatrix * skinned;", "#endif", "#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )", "vec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );", "#endif", "#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )", "vec4 worldPosition = modelMatrix * vec4( position, 1.0 );", "#endif", "#endif"], "\n"), "envmap_vertex", C.JSArray_methods.join$1(["#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )", "vec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;", "worldNormal = normalize( worldNormal );", "vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );", "if ( useRefract ) {", "vReflect = refract( cameraToVertex, worldNormal, refractionRatio );", "} else {", "vReflect = reflect( cameraToVertex, worldNormal );", "}", "#endif"], "\n"), "map_particle_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_MAP", "uniform sampler2D map;", "#endif"], "\n"), "map_particle_fragment", C.JSArray_methods.join$1(["#ifdef USE_MAP", "gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );", "#endif"], "\n"), "map_pars_vertex", C.JSArray_methods.join$1(["#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )", "varying vec2 vUv;", "uniform vec4 offsetRepeat;", "#endif"], "\n"), "map_pars_fragment", C.JSArray_methods.join$1(["#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )", "varying vec2 vUv;", "#endif", "#ifdef USE_MAP", "uniform sampler2D map;", "#endif"], "\n"), "map_vertex", C.JSArray_methods.join$1(["#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )", "vUv = uv * offsetRepeat.zw + offsetRepeat.xy;", "#endif"], "\n"), "map_fragment", C.JSArray_methods.join$1(["#ifdef USE_MAP", "vec4 texelColor = texture2D( map, vUv );", "#ifdef GAMMA_INPUT", "texelColor.xyz *= texelColor.xyz;", "#endif", "gl_FragColor = gl_FragColor * texelColor;", "#endif"], "\n"), "lightmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_LIGHTMAP", "varying vec2 vUv2;", "uniform sampler2D lightMap;", "#endif"], "\n"), "lightmap_pars_vertex", C.JSArray_methods.join$1(["#ifdef USE_LIGHTMAP", "varying vec2 vUv2;", "#endif"], "\n"), "lightmap_fragment", C.JSArray_methods.join$1(["#ifdef USE_LIGHTMAP", "gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );", "#endif"], "\n"), "lightmap_vertex", C.JSArray_methods.join$1(["#ifdef USE_LIGHTMAP", "vUv2 = uv2;", "#endif"], "\n"), "bumpmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_BUMPMAP", "uniform sampler2D bumpMap;", "uniform float bumpScale;", "vec2 dHdxy_fwd() {", "vec2 dSTdx = dFdx( vUv );", "vec2 dSTdy = dFdy( vUv );", "float Hll = bumpScale * texture2D( bumpMap, vUv ).x;", "float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;", "float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;", "return vec2( dBx, dBy );", "}", "vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {", "vec3 vSigmaX = dFdx( surf_pos );", "vec3 vSigmaY = dFdy( surf_pos );", "vec3 vN = surf_norm;", "vec3 R1 = cross( vSigmaY, vN );", "vec3 R2 = cross( vN, vSigmaX );", "float fDet = dot( vSigmaX, R1 );", "vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );", "return normalize( abs( fDet ) * surf_norm - vGrad );", "}", "#endif"], "\n"), "normalmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_NORMALMAP", "uniform sampler2D normalMap;", "uniform vec2 normalScale;", "vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {", "vec3 q0 = dFdx( eye_pos.xyz );", "vec3 q1 = dFdy( eye_pos.xyz );", "vec2 st0 = dFdx( vUv.st );", "vec2 st1 = dFdy( vUv.st );", "vec3 S = normalize(  q0 * st1.t - q1 * st0.t );", "vec3 T = normalize( -q0 * st1.s + q1 * st0.s );", "vec3 N = normalize( surf_norm );", "vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;", "mapN.xy = normalScale * mapN.xy;", "mat3 tsn = mat3( S, T, N );", "return normalize( tsn * mapN );", "}", "#endif"], "\n"), "specularmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_SPECULARMAP", "uniform sampler2D specularMap;", "#endif"], "\n"), "specularmap_fragment", C.JSArray_methods.join$1(["float specularStrength;", "#ifdef USE_SPECULARMAP", "vec4 texelSpecular = texture2D( specularMap, vUv );", "specularStrength = texelSpecular.r;", "#else", "specularStrength = 1.0;", "#endif"], "\n"), "lights_lambert_pars_vertex", C.JSArray_methods.join$1(["uniform vec3 ambient;", "uniform vec3 diffuse;", "uniform vec3 emissive;", "uniform vec3 ambientLightColor;", "#if MAX_DIR_LIGHTS > 0", "uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];", "uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];", "#endif", "#if MAX_HEMI_LIGHTS > 0", "uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];", "#endif", "#if MAX_POINT_LIGHTS > 0", "uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "#endif", "#if MAX_SPOT_LIGHTS > 0", "uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];", "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];", "uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];", "#endif", "#ifdef WRAP_AROUND", "uniform vec3 wrapRGB;", "#endif"], "\n"), "lights_lambert_vertex", C.JSArray_methods.join$1(["vLightFront = vec3( 0.0 );", "#ifdef DOUBLE_SIDED", "vLightBack = vec3( 0.0 );", "#endif", "transformedNormal = normalize( transformedNormal );", "#if MAX_DIR_LIGHTS > 0", "for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {", "vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );", "vec3 dirVector = normalize( lDirection.xyz );", "float dotProduct = dot( transformedNormal, dirVector );", "vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );", "#ifdef DOUBLE_SIDED", "vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );", "#ifdef WRAP_AROUND", "vec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );", "#endif", "#endif", "#ifdef WRAP_AROUND", "vec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );", "directionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );", "#ifdef DOUBLE_SIDED", "directionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );", "#endif", "#endif", "vLightFront += directionalLightColor[ i ] * directionalLightWeighting;", "#ifdef DOUBLE_SIDED", "vLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;", "#endif", "}", "#endif", "#if MAX_POINT_LIGHTS > 0", "for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "float lDistance = 1.0;", "if ( pointLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );", "lVector = normalize( lVector );", "float dotProduct = dot( transformedNormal, lVector );", "vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );", "#ifdef DOUBLE_SIDED", "vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );", "#ifdef WRAP_AROUND", "vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );", "#endif", "#endif", "#ifdef WRAP_AROUND", "vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );", "pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );", "#ifdef DOUBLE_SIDED", "pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );", "#endif", "#endif", "vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;", "#ifdef DOUBLE_SIDED", "vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;", "#endif", "}", "#endif", "#if MAX_SPOT_LIGHTS > 0", "for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );", "if ( spotEffect > spotLightAngleCos[ i ] ) {", "spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );", "float lDistance = 1.0;", "if ( spotLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );", "lVector = normalize( lVector );", "float dotProduct = dot( transformedNormal, lVector );", "vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );", "#ifdef DOUBLE_SIDED", "vec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );", "#ifdef WRAP_AROUND", "vec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );", "#endif", "#endif", "#ifdef WRAP_AROUND", "vec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );", "spotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );", "#ifdef DOUBLE_SIDED", "spotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );", "#endif", "#endif", "vLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;", "#ifdef DOUBLE_SIDED", "vLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;", "#endif", "}", "}", "#endif", "#if MAX_HEMI_LIGHTS > 0", "for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {", "vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );", "vec3 lVector = normalize( lDirection.xyz );", "float dotProduct = dot( transformedNormal, lVector );", "float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;", "float hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;", "vLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );", "#ifdef DOUBLE_SIDED", "vLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );", "#endif", "}", "#endif", "vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;", "#ifdef DOUBLE_SIDED", "vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;", "#endif"], "\n"), "lights_phong_pars_vertex", C.JSArray_methods.join$1(["#ifndef PHONG_PER_PIXEL", "#if MAX_POINT_LIGHTS > 0", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "varying vec4 vPointLight[ MAX_POINT_LIGHTS ];", "#endif", "#if MAX_SPOT_LIGHTS > 0", "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )", "varying vec3 vWorldPosition;", "#endif"], "\n"), "lights_phong_vertex", C.JSArray_methods.join$1(["#ifndef PHONG_PER_PIXEL", "#if MAX_POINT_LIGHTS > 0", "for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "float lDistance = 1.0;", "if ( pointLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );", "vPointLight[ i ] = vec4( lVector, lDistance );", "}", "#endif", "#if MAX_SPOT_LIGHTS > 0", "for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "float lDistance = 1.0;", "if ( spotLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );", "vSpotLight[ i ] = vec4( lVector, lDistance );", "}", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )", "vWorldPosition = worldPosition.xyz;", "#endif"], "\n"), "lights_phong_pars_fragment", C.JSArray_methods.join$1(["uniform vec3 ambientLightColor;", "#if MAX_DIR_LIGHTS > 0", "uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];", "uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];", "#endif", "#if MAX_HEMI_LIGHTS > 0", "uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];", "#endif", "#if MAX_POINT_LIGHTS > 0", "uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];", "#ifdef PHONG_PER_PIXEL", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "#else", "varying vec4 vPointLight[ MAX_POINT_LIGHTS ];", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0", "uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];", "uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];", "uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];", "#ifdef PHONG_PER_PIXEL", "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "#else", "varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )", "varying vec3 vWorldPosition;", "#endif", "#ifdef WRAP_AROUND", "uniform vec3 wrapRGB;", "#endif", "varying vec3 vViewPosition;", "varying vec3 vNormal;"], "\n"), "lights_phong_fragment", C.JSArray_methods.join$1(["vec3 normal = normalize( vNormal );", "vec3 viewPosition = normalize( vViewPosition );", "#ifdef DOUBLE_SIDED", "normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );", "#endif", "#ifdef USE_NORMALMAP", "normal = perturbNormal2Arb( -viewPosition, normal );", "#elif defined( USE_BUMPMAP )", "normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );", "#endif", "#if MAX_POINT_LIGHTS > 0", "vec3 pointDiffuse  = vec3( 0.0 );", "vec3 pointSpecular = vec3( 0.0 );", "for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {", "#ifdef PHONG_PER_PIXEL", "vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz + vViewPosition.xyz;", "float lDistance = 1.0;", "if ( pointLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );", "lVector = normalize( lVector );", "#else", "vec3 lVector = normalize( vPointLight[ i ].xyz );", "float lDistance = vPointLight[ i ].w;", "#endif", "float dotProduct = dot( normal, lVector );", "#ifdef WRAP_AROUND", "float pointDiffuseWeightFull = max( dotProduct, 0.0 );", "float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );", "vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );", "#else", "float pointDiffuseWeight = max( dotProduct, 0.0 );", "#endif", "pointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;", "vec3 pointHalfVector = normalize( lVector + viewPosition );", "float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );", "float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization = ( shininess + 2.0001 ) / 8.0;", "vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );", "pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;", "#else", "pointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;", "#endif", "}", "#endif", "#if MAX_SPOT_LIGHTS > 0", "vec3 spotDiffuse  = vec3( 0.0 );", "vec3 spotSpecular = vec3( 0.0 );", "for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {", "#ifdef PHONG_PER_PIXEL", "vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz + vViewPosition.xyz;", "float lDistance = 1.0;", "if ( spotLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );", "lVector = normalize( lVector );", "#else", "vec3 lVector = normalize( vSpotLight[ i ].xyz );", "float lDistance = vSpotLight[ i ].w;", "#endif", "float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );", "if ( spotEffect > spotLightAngleCos[ i ] ) {", "spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );", "float dotProduct = dot( normal, lVector );", "#ifdef WRAP_AROUND", "float spotDiffuseWeightFull = max( dotProduct, 0.0 );", "float spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );", "vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );", "#else", "float spotDiffuseWeight = max( dotProduct, 0.0 );", "#endif", "spotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;", "vec3 spotHalfVector = normalize( lVector + viewPosition );", "float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );", "float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization = ( shininess + 2.0001 ) / 8.0;", "vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );", "spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;", "#else", "spotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;", "#endif", "}", "}", "#endif", "#if MAX_DIR_LIGHTS > 0", "vec3 dirDiffuse  = vec3( 0.0 );", "vec3 dirSpecular = vec3( 0.0 );", "for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {", "vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );", "vec3 dirVector = normalize( lDirection.xyz );", "float dotProduct = dot( normal, dirVector );", "#ifdef WRAP_AROUND", "float dirDiffuseWeightFull = max( dotProduct, 0.0 );", "float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );", "vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );", "#else", "float dirDiffuseWeight = max( dotProduct, 0.0 );", "#endif", "dirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;", "vec3 dirHalfVector = normalize( dirVector + viewPosition );", "float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );", "float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization = ( shininess + 2.0001 ) / 8.0;", "vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );", "dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;", "#else", "dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;", "#endif", "}", "#endif", "#if MAX_HEMI_LIGHTS > 0", "vec3 hemiDiffuse  = vec3( 0.0 );", "vec3 hemiSpecular = vec3( 0.0 );", "for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {", "vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );", "vec3 lVector = normalize( lDirection.xyz );", "float dotProduct = dot( normal, lVector );", "float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;", "vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );", "hemiDiffuse += diffuse * hemiColor;", "vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );", "float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;", "float hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );", "vec3 lVectorGround = -lVector;", "vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );", "float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;", "float hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float dotProductGround = dot( normal, lVectorGround );", "float specularNormalization = ( shininess + 2.0001 ) / 8.0;", "vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );", "vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );", "hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );", "#else", "hemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;", "#endif", "}", "#endif", "vec3 totalDiffuse = vec3( 0.0 );", "vec3 totalSpecular = vec3( 0.0 );", "#if MAX_DIR_LIGHTS > 0", "totalDiffuse += dirDiffuse;", "totalSpecular += dirSpecular;", "#endif", "#if MAX_HEMI_LIGHTS > 0", "totalDiffuse += hemiDiffuse;", "totalSpecular += hemiSpecular;", "#endif", "#if MAX_POINT_LIGHTS > 0", "totalDiffuse += pointDiffuse;", "totalSpecular += pointSpecular;", "#endif", "#if MAX_SPOT_LIGHTS > 0", "totalDiffuse += spotDiffuse;", "totalSpecular += spotSpecular;", "#endif", "#ifdef METAL", "gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );", "#else", "gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;", "#endif"], "\n"), "color_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_COLOR", "varying vec3 vColor;", "#endif"], "\n"), "color_fragment", C.JSArray_methods.join$1(["#ifdef USE_COLOR", "gl_FragColor = gl_FragColor * vec4( vColor, opacity );", "#endif"], "\n"), "color_pars_vertex", C.JSArray_methods.join$1(["#ifdef USE_COLOR", "varying vec3 vColor;", "#endif"], "\n"), "color_vertex", C.JSArray_methods.join$1(["#ifdef USE_COLOR", "#ifdef GAMMA_INPUT", "vColor = color * color;", "#else", "vColor = color;", "#endif", "#endif"], "\n"), "skinning_pars_vertex", C.JSArray_methods.join$1(["#ifdef USE_SKINNING", "#ifdef BONE_TEXTURE", "uniform sampler2D boneTexture;", "mat4 getBoneMatrix( const in float i ) {", "float j = i * 4.0;", "float x = mod( j, N_BONE_PIXEL_X );", "float y = floor( j / N_BONE_PIXEL_X );", "const float dx = 1.0 / N_BONE_PIXEL_X;", "const float dy = 1.0 / N_BONE_PIXEL_Y;", "y = dy * ( y + 0.5 );", "vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );", "vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );", "vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );", "vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );", "mat4 bone = mat4( v1, v2, v3, v4 );", "return bone;", "}", "#else", "uniform mat4 boneGlobalMatrices[ MAX_BONES ];", "mat4 getBoneMatrix( const in float i ) {", "mat4 bone = boneGlobalMatrices[ int(i) ];", "return bone;", "}", "#endif", "#endif"], "\n"), "skinbase_vertex", C.JSArray_methods.join$1(["#ifdef USE_SKINNING", "mat4 boneMatX = getBoneMatrix( skinIndex.x );", "mat4 boneMatY = getBoneMatrix( skinIndex.y );", "#endif"], "\n"), "skinning_vertex", C.JSArray_methods.join$1(["#ifdef USE_SKINNING", "#ifdef USE_MORPHTARGETS", "vec4 skinVertex = vec4( morphed, 1.0 );", "#else", "vec4 skinVertex = vec4( position, 1.0 );", "#endif", "vec4 skinned  = boneMatX * skinVertex * skinWeight.x;", "skinned    += boneMatY * skinVertex * skinWeight.y;", "#endif"], "\n"), "morphtarget_pars_vertex", C.JSArray_methods.join$1(["#ifdef USE_MORPHTARGETS", "#ifndef USE_MORPHNORMALS", "uniform float morphTargetInfluences[ 8 ];", "#else", "uniform float morphTargetInfluences[ 4 ];", "#endif", "#endif"], "\n"), "morphtarget_vertex", C.JSArray_methods.join$1(["#ifdef USE_MORPHTARGETS", "vec3 morphed = vec3( 0.0 );", "morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];", "morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];", "morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];", "morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];", "#ifndef USE_MORPHNORMALS", "morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];", "morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];", "morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];", "morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];", "#endif", "morphed += position;", "#endif"], "\n"), "default_vertex", C.JSArray_methods.join$1(["vec4 mvPosition;", "#ifdef USE_SKINNING", "mvPosition = modelViewMatrix * skinned;", "#endif", "#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )", "mvPosition = modelViewMatrix * vec4( morphed, 1.0 );", "#endif", "#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )", "mvPosition = modelViewMatrix * vec4( position, 1.0 );", "#endif", "gl_Position = projectionMatrix * mvPosition;"], "\n"), "morphnormal_vertex", C.JSArray_methods.join$1(["#ifdef USE_MORPHNORMALS", "vec3 morphedNormal = vec3( 0.0 );", "morphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];", "morphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];", "morphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];", "morphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];", "morphedNormal += normal;", "#endif"], "\n"), "skinnormal_vertex", C.JSArray_methods.join$1(["#ifdef USE_SKINNING", "mat4 skinMatrix = skinWeight.x * boneMatX;", "skinMatrix   += skinWeight.y * boneMatY;", "#ifdef USE_MORPHNORMALS", "vec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );", "#else", "vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );", "#endif", "#endif"], "\n"), "defaultnormal_vertex", C.JSArray_methods.join$1(["vec3 objectNormal;", "#ifdef USE_SKINNING", "objectNormal = skinnedNormal.xyz;", "#endif", "#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )", "objectNormal = morphedNormal;", "#endif", "#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )", "objectNormal = normal;", "#endif", "#ifdef FLIP_SIDED", "objectNormal = -objectNormal;", "#endif", "vec3 transformedNormal = normalMatrix * objectNormal;"], "\n"), "shadowmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_SHADOWMAP", "uniform sampler2D shadowMap[ MAX_SHADOWS ];", "uniform vec2 shadowMapSize[ MAX_SHADOWS ];", "uniform float shadowDarkness[ MAX_SHADOWS ];", "uniform float shadowBias[ MAX_SHADOWS ];", "varying vec4 vShadowCoord[ MAX_SHADOWS ];", "float unpackDepth( const in vec4 rgba_depth ) {", "const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );", "float depth = dot( rgba_depth, bit_shift );", "return depth;", "}", "#endif"], "\n"), "shadowmap_fragment", C.JSArray_methods.join$1(["#ifdef USE_SHADOWMAP", "#ifdef SHADOWMAP_DEBUG", "vec3 frustumColors[3];", "frustumColors[0] = vec3( 1.0, 0.5, 0.0 );", "frustumColors[1] = vec3( 0.0, 1.0, 0.8 );", "frustumColors[2] = vec3( 0.0, 0.5, 1.0 );", "#endif", "#ifdef SHADOWMAP_CASCADE", "int inFrustumCount = 0;", "#endif", "float fDepth;", "vec3 shadowColor = vec3( 1.0 );", "for( int i = 0; i < MAX_SHADOWS; i ++ ) {", "vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;", "bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );", "bool inFrustum = all( inFrustumVec );", "#ifdef SHADOWMAP_CASCADE", "inFrustumCount += int( inFrustum );", "bvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );", "#else", "bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );", "#endif", "bool frustumTest = all( frustumTestVec );", "if ( frustumTest ) {", "shadowCoord.z += shadowBias[ i ];", "#if defined( SHADOWMAP_TYPE_PCF )", "float shadow = 0.0;", "const float shadowDelta = 1.0 / 9.0;", "float xPixelOffset = 1.0 / shadowMapSize[ i ].x;", "float yPixelOffset = 1.0 / shadowMapSize[ i ].y;", "float dx0 = -1.25 * xPixelOffset;", "float dy0 = -1.25 * yPixelOffset;", "float dx1 = 1.25 * xPixelOffset;", "float dy1 = 1.25 * yPixelOffset;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );", "#elif defined( SHADOWMAP_TYPE_PCF_SOFT )", "float shadow = 0.0;", "float xPixelOffset = 1.0 / shadowMapSize[ i ].x;", "float yPixelOffset = 1.0 / shadowMapSize[ i ].y;", "float dx0 = -1.0 * xPixelOffset;", "float dy0 = -1.0 * yPixelOffset;", "float dx1 = 1.0 * xPixelOffset;", "float dy1 = 1.0 * yPixelOffset;", "mat3 shadowKernel;", "mat3 depthKernel;", "depthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );", "if ( depthKernel[0][0] < shadowCoord.z ) shadowKernel[0][0] = 0.25;", "else shadowKernel[0][0] = 0.0;", "depthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );", "if ( depthKernel[0][1] < shadowCoord.z ) shadowKernel[0][1] = 0.25;", "else shadowKernel[0][1] = 0.0;", "depthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i], shadowCoord.xy + vec2( dx0, dy1 ) ) );", "if ( depthKernel[0][2] < shadowCoord.z ) shadowKernel[0][2] = 0.25;", "else shadowKernel[0][2] = 0.0;", "depthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );", "if ( depthKernel[1][0] < shadowCoord.z ) shadowKernel[1][0] = 0.25;", "else shadowKernel[1][0] = 0.0;", "depthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );", "if ( depthKernel[1][1] < shadowCoord.z ) shadowKernel[1][1] = 0.25;", "else shadowKernel[1][1] = 0.0;", "depthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );", "if ( depthKernel[1][2] < shadowCoord.z ) shadowKernel[1][2] = 0.25;", "else shadowKernel[1][2] = 0.0;", "depthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );", "if ( depthKernel[2][0] < shadowCoord.z ) shadowKernel[2][0] = 0.25;", "else shadowKernel[2][0] = 0.0;", "depthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );", "if ( depthKernel[2][1] < shadowCoord.z ) shadowKernel[2][1] = 0.25;", "else shadowKernel[2][1] = 0.0;", "depthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );", "if ( depthKernel[2][2] < shadowCoord.z ) shadowKernel[2][2] = 0.25;", "else shadowKernel[2][2] = 0.0;", "vec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );", "shadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );", "shadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );", "vec4 shadowValues;", "shadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );", "shadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );", "shadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );", "shadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );", "shadow = dot( shadowValues, vec4( 1.0 ) );", "shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );", "#else", "vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );", "float fDepth = unpackDepth( rgbaDepth );", "if ( fDepth < shadowCoord.z )", "shadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );", "#endif", "}", "#ifdef SHADOWMAP_DEBUG", "#ifdef SHADOWMAP_CASCADE", "if ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];", "#else", "if ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];", "#endif", "#endif", "}", "#ifdef GAMMA_OUTPUT", "shadowColor *= shadowColor;", "#endif", "gl_FragColor.xyz = gl_FragColor.xyz * shadowColor;", "#endif"], "\n"), "shadowmap_pars_vertex", C.JSArray_methods.join$1(["#ifdef USE_SHADOWMAP", "varying vec4 vShadowCoord[ MAX_SHADOWS ];", "uniform mat4 shadowMatrix[ MAX_SHADOWS ];", "#endif"], "\n"), "shadowmap_vertex", C.JSArray_methods.join$1(["#ifdef USE_SHADOWMAP", "for( int i = 0; i < MAX_SHADOWS; i ++ ) {", "vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;", "}", "#endif"], "\n"), "alphatest_fragment", C.JSArray_methods.join$1(["#ifdef ALPHATEST", "if ( gl_FragColor.a < ALPHATEST ) discard;", "#endif"], "\n"), "linear_to_gamma_fragment", C.JSArray_methods.join$1(["#ifdef GAMMA_OUTPUT", "gl_FragColor.xyz = sqrt( gl_FragColor.xyz );", "#endif"], "\n")], null, null);
      $.__ShaderChunk = t1;
    }
    return t1;
  },
  UniformsUtils_merge: function(uniformsLst) {
    var merged = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
    C.JSArray_methods.forEach$1(uniformsLst, new S.UniformsUtils_merge_closure(merged));
    return merged;
  },
  UniformsUtils_clone: function(uniforms) {
    var result = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
    uniforms.forEach$1(0, new S.UniformsUtils_clone_closure(result));
    return result;
  },
  UniformsLib: function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
    t1 = $.__UniformsLib;
    if (t1 == null) {
      t1 = new S.Uniform("c", null, true, null);
      t1.set$value(0, S.Color$(15658734));
      t2 = new S.Uniform("f", null, true, null);
      t2.set$value(0, 1);
      t3 = new S.Uniform("t", null, true, null);
      t3.set$value(0, null);
      t4 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t4.setValues$4(0, 0, 1, 1);
      t5 = new S.Uniform("v4", null, true, null);
      t5.set$value(0, t4);
      t4 = new S.Uniform("t", null, true, null);
      t4.set$value(0, null);
      t6 = new S.Uniform("t", null, true, null);
      t6.set$value(0, null);
      t7 = new S.Uniform("t", null, true, null);
      t7.set$value(0, null);
      t8 = new S.Uniform("f", null, true, null);
      t8.set$value(0, -1);
      t9 = new S.Uniform("i", null, true, null);
      t9.set$value(0, 0);
      t10 = new S.Uniform("f", null, true, null);
      t10.set$value(0, 1);
      t11 = new S.Uniform("f", null, true, null);
      t11.set$value(0, 0.98);
      t12 = new S.Uniform("i", null, true, null);
      t12.set$value(0, 0);
      t13 = new S.Uniform("f", null, true, null);
      t13.set$value(0, 0);
      t13 = P.LinkedHashMap_LinkedHashMap$_literal(["diffuse", t1, "opacity", t2, "map", t3, "offsetRepeat", t5, "lightMap", t4, "specularMap", t6, "envMap", t7, "flipEnvMap", t8, "useRefract", t9, "reflectivity", t10, "refractionRatio", t11, "combine", t12, "morphTargetInfluences", t13], null, null);
      t12 = new S.Uniform("t", null, true, null);
      t12.set$value(0, null);
      t11 = new S.Uniform("f", null, true, null);
      t11.set$value(0, 1);
      t11 = P.LinkedHashMap_LinkedHashMap$_literal(["bumpMap", t12, "bumpScale", t11], null, null);
      t12 = new S.Uniform("t", null, true, null);
      t12.set$value(0, null);
      t10 = new Float32Array(H._checkLength(2));
      t10[0] = 1;
      t10[1] = 1;
      t9 = new S.Uniform("v2", null, true, null);
      t9.set$value(0, new T.Vector2(t10));
      t9 = P.LinkedHashMap_LinkedHashMap$_literal(["normalMap", t12, "normalScale", t9], null, null);
      t12 = new S.Uniform("f", null, true, null);
      t12.set$value(0, 0.00025);
      t10 = new S.Uniform("f", null, true, null);
      t10.set$value(0, 1);
      t8 = new S.Uniform("f", null, true, null);
      t8.set$value(0, 2000);
      t7 = new S.Uniform("c", null, true, null);
      t7.set$value(0, S.Color$(16777215));
      t7 = P.LinkedHashMap_LinkedHashMap$_literal(["fogDensity", t12, "fogNear", t10, "fogFar", t8, "fogColor", t7], null, null);
      t8 = new S.Uniform("fv", null, true, null);
      t8.set$value(0, []);
      t10 = new S.Uniform("fv", null, true, null);
      t10.set$value(0, []);
      t12 = new S.Uniform("fv", null, true, null);
      t12.set$value(0, []);
      t6 = new S.Uniform("fv", null, true, null);
      t6.set$value(0, []);
      t4 = new S.Uniform("fv", null, true, null);
      t4.set$value(0, []);
      t5 = new S.Uniform("fv", null, true, null);
      t5.set$value(0, []);
      t3 = new S.Uniform("fv", null, true, null);
      t3.set$value(0, []);
      t2 = new S.Uniform("fv", null, true, null);
      t2.set$value(0, []);
      t1 = new S.Uniform("fv1", null, true, null);
      t1.set$value(0, []);
      t14 = new S.Uniform("fv", null, true, null);
      t14.set$value(0, []);
      t15 = new S.Uniform("fv", null, true, null);
      t15.set$value(0, []);
      t16 = new S.Uniform("fv", null, true, null);
      t16.set$value(0, []);
      t17 = new S.Uniform("fv1", null, true, null);
      t17.set$value(0, []);
      t18 = new S.Uniform("fv1", null, true, null);
      t18.set$value(0, []);
      t19 = new S.Uniform("fv1", null, true, null);
      t19.set$value(0, []);
      t19 = P.LinkedHashMap_LinkedHashMap$_literal(["ambientLightColor", t8, "directionalLightDirection", t10, "directionalLightColor", t12, "hemisphereLightDirection", t6, "hemisphereLightSkyColor", t4, "hemisphereLightGroundColor", t5, "pointLightColor", t3, "pointLightPosition", t2, "pointLightDistance", t1, "spotLightColor", t14, "spotLightPosition", t15, "spotLightDirection", t16, "spotLightDistance", t17, "spotLightAngleCos", t18, "spotLightExponent", t19], null, null);
      t18 = new S.Uniform("c", null, true, null);
      t18.set$value(0, S.Color$(15658734));
      t17 = new S.Uniform("f", null, true, null);
      t17.set$value(0, 1);
      t16 = new S.Uniform("f", null, true, null);
      t16.set$value(0, 1);
      t15 = new S.Uniform("f", null, true, null);
      t15.set$value(0, 1);
      t14 = new S.Uniform("t", null, true, null);
      t14.set$value(0, null);
      t1 = new S.Uniform("f", null, true, null);
      t1.set$value(0, 0.00025);
      t2 = new S.Uniform("f", null, true, null);
      t2.set$value(0, 1);
      t3 = new S.Uniform("f", null, true, null);
      t3.set$value(0, 2000);
      t5 = new S.Uniform("c", null, true, null);
      t5.set$value(0, S.Color$(16777215));
      t5 = P.LinkedHashMap_LinkedHashMap$_literal(["psColor", t18, "opacity", t17, "size", t16, "scale", t15, "map", t14, "fogDensity", t1, "fogNear", t2, "fogFar", t3, "fogColor", t5], null, null);
      t3 = new S.Uniform("tv", null, true, null);
      t3.set$value(0, []);
      t2 = new S.Uniform("v2v", null, true, null);
      t2.set$value(0, []);
      t1 = new S.Uniform("fv1", null, true, null);
      t1.set$value(0, []);
      t14 = new S.Uniform("fv1", null, true, null);
      t14.set$value(0, []);
      t15 = new S.Uniform("m4v", null, true, null);
      t15.set$value(0, []);
      t15 = P.LinkedHashMap_LinkedHashMap$_literal(["common", t13, "bump", t11, "normalmap", t9, "fog", t7, "lights", t19, "particle", t5, "shadowmap", P.LinkedHashMap_LinkedHashMap$_literal(["shadowMap", t3, "shadowMapSize", t2, "shadowBias", t1, "shadowDarkness", t14, "shadowMatrix", t15], null, null)], null, null);
      $.__UniformsLib = t15;
      t1 = t15;
    }
    return t1;
  },
  ShaderLib: function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16;
    t1 = $.__ShaderLib;
    if (t1 == null) {
      t1 = new S.Uniform("f", null, true, null);
      t1.set$value(0, 1);
      t2 = new S.Uniform("f", null, true, null);
      t2.set$value(0, 2000);
      t3 = new S.Uniform("f", null, true, null);
      t3.set$value(0, 1);
      t3 = P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", P.LinkedHashMap_LinkedHashMap$_literal(["mNear", t1, "mFar", t2, "opacity", t3], null, null), "vertexShader", C.JSArray_methods.join$1(["void main() {", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform float mNear;", "uniform float mFar;", "uniform float opacity;", "void main() {", "float depth = gl_FragCoord.z / gl_FragCoord.w;", "float color = 1.0 - smoothstep( mNear, mFar, depth );", "gl_FragColor = vec4( vec3( color ), opacity );", "}"], "\n")], null, null);
      t2 = new S.Uniform("f", null, true, null);
      t2.set$value(0, 1);
      t2 = P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", P.LinkedHashMap_LinkedHashMap$_literal(["opacity", t2], null, null), "vertexShader", C.JSArray_methods.join$1(["varying vec3 vNormal;", "void main() {", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "vNormal = normalize( normalMatrix * normal );", "gl_Position = projectionMatrix * mvPosition;", "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform float opacity;", "varying vec3 vNormal;", "void main() {", "gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );", "}"], "\n")], null, null);
      t1 = P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", S.UniformsUtils_merge([S.UniformsLib().$index(0, "common"), S.UniformsLib().$index(0, "fog"), S.UniformsLib().$index(0, "shadowmap")]), "vertexShader", C.JSArray_methods.join$1([S.ShaderChunk().$index(0, "map_pars_vertex"), S.ShaderChunk().$index(0, "lightmap_pars_vertex"), S.ShaderChunk().$index(0, "envmap_pars_vertex"), S.ShaderChunk().$index(0, "color_pars_vertex"), S.ShaderChunk().$index(0, "morphtarget_pars_vertex"), S.ShaderChunk().$index(0, "skinning_pars_vertex"), S.ShaderChunk().$index(0, "shadowmap_pars_vertex"), "void main() {", S.ShaderChunk().$index(0, "map_vertex"), S.ShaderChunk().$index(0, "lightmap_vertex"), S.ShaderChunk().$index(0, "color_vertex"), S.ShaderChunk().$index(0, "skinbase_vertex"), "#ifdef USE_ENVMAP", S.ShaderChunk().$index(0, "morphnormal_vertex"), S.ShaderChunk().$index(0, "skinnormal_vertex"), S.ShaderChunk().$index(0, "defaultnormal_vertex"), "#endif", S.ShaderChunk().$index(0, "morphtarget_vertex"), S.ShaderChunk().$index(0, "skinning_vertex"), S.ShaderChunk().$index(0, "default_vertex"), S.ShaderChunk().$index(0, "worldpos_vertex"), S.ShaderChunk().$index(0, "envmap_vertex"), S.ShaderChunk().$index(0, "shadowmap_vertex"), "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform vec3 diffuse;", "uniform float opacity;", S.ShaderChunk().$index(0, "color_pars_fragment"), S.ShaderChunk().$index(0, "map_pars_fragment"), S.ShaderChunk().$index(0, "lightmap_pars_fragment"), S.ShaderChunk().$index(0, "envmap_pars_fragment"), S.ShaderChunk().$index(0, "fog_pars_fragment"), S.ShaderChunk().$index(0, "shadowmap_pars_fragment"), S.ShaderChunk().$index(0, "specularmap_pars_fragment"), "void main() {", "gl_FragColor = vec4( diffuse, opacity );", S.ShaderChunk().$index(0, "map_fragment"), S.ShaderChunk().$index(0, "alphatest_fragment"), S.ShaderChunk().$index(0, "specularmap_fragment"), S.ShaderChunk().$index(0, "lightmap_fragment"), S.ShaderChunk().$index(0, "color_fragment"), S.ShaderChunk().$index(0, "envmap_fragment"), S.ShaderChunk().$index(0, "shadowmap_fragment"), S.ShaderChunk().$index(0, "linear_to_gamma_fragment"), S.ShaderChunk().$index(0, "fog_fragment"), "}"], "\n")], null, null);
      t4 = S.UniformsLib().$index(0, "common");
      t5 = S.UniformsLib().$index(0, "fog");
      t6 = S.UniformsLib().$index(0, "lights");
      t7 = S.UniformsLib().$index(0, "shadowmap");
      t8 = new S.Uniform("c", null, true, null);
      t8.set$value(0, S.Color$(16777215));
      t9 = new S.Uniform("c", null, true, null);
      t9.set$value(0, S.Color$(0));
      t10 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t10.setValues$3(1, 1, 1);
      t11 = new S.Uniform("v3", null, true, null);
      t11.set$value(0, t10);
      t11 = P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", S.UniformsUtils_merge([t4, t5, t6, t7, P.LinkedHashMap_LinkedHashMap$_literal(["ambient", t8, "emissive", t9, "wrapRGB", t11], null, null)]), "vertexShader", C.JSArray_methods.join$1(["#define LAMBERT", "varying vec3 vLightFront;", "#ifdef DOUBLE_SIDED", "varying vec3 vLightBack;", "#endif", S.ShaderChunk().$index(0, "map_pars_vertex"), S.ShaderChunk().$index(0, "lightmap_pars_vertex"), S.ShaderChunk().$index(0, "envmap_pars_vertex"), S.ShaderChunk().$index(0, "lights_lambert_pars_vertex"), S.ShaderChunk().$index(0, "color_pars_vertex"), S.ShaderChunk().$index(0, "morphtarget_pars_vertex"), S.ShaderChunk().$index(0, "skinning_pars_vertex"), S.ShaderChunk().$index(0, "shadowmap_pars_vertex"), "void main() {", S.ShaderChunk().$index(0, "map_vertex"), S.ShaderChunk().$index(0, "lightmap_vertex"), S.ShaderChunk().$index(0, "color_vertex"), S.ShaderChunk().$index(0, "morphnormal_vertex"), S.ShaderChunk().$index(0, "skinbase_vertex"), S.ShaderChunk().$index(0, "skinnormal_vertex"), S.ShaderChunk().$index(0, "defaultnormal_vertex"), S.ShaderChunk().$index(0, "morphtarget_vertex"), S.ShaderChunk().$index(0, "skinning_vertex"), S.ShaderChunk().$index(0, "default_vertex"), S.ShaderChunk().$index(0, "worldpos_vertex"), S.ShaderChunk().$index(0, "envmap_vertex"), S.ShaderChunk().$index(0, "lights_lambert_vertex"), S.ShaderChunk().$index(0, "shadowmap_vertex"), "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform float opacity;", "varying vec3 vLightFront;", "#ifdef DOUBLE_SIDED", "varying vec3 vLightBack;", "#endif", S.ShaderChunk().$index(0, "color_pars_fragment"), S.ShaderChunk().$index(0, "map_pars_fragment"), S.ShaderChunk().$index(0, "lightmap_pars_fragment"), S.ShaderChunk().$index(0, "envmap_pars_fragment"), S.ShaderChunk().$index(0, "fog_pars_fragment"), S.ShaderChunk().$index(0, "shadowmap_pars_fragment"), S.ShaderChunk().$index(0, "specularmap_pars_fragment"), "void main() {", "gl_FragColor = vec4( vec3 ( 1.0 ), opacity );", S.ShaderChunk().$index(0, "map_fragment"), S.ShaderChunk().$index(0, "alphatest_fragment"), S.ShaderChunk().$index(0, "specularmap_fragment"), "#ifdef DOUBLE_SIDED", "if ( gl_FrontFacing )", "gl_FragColor.xyz *= vLightFront;", "else", "gl_FragColor.xyz *= vLightBack;", "#else", "gl_FragColor.xyz *= vLightFront;", "#endif", S.ShaderChunk().$index(0, "lightmap_fragment"), S.ShaderChunk().$index(0, "color_fragment"), S.ShaderChunk().$index(0, "envmap_fragment"), S.ShaderChunk().$index(0, "shadowmap_fragment"), S.ShaderChunk().$index(0, "linear_to_gamma_fragment"), S.ShaderChunk().$index(0, "fog_fragment"), "}"], "\n")], null, null);
      t9 = S.UniformsLib().$index(0, "common");
      t8 = S.UniformsLib().$index(0, "bump");
      t7 = S.UniformsLib().$index(0, "normalmap");
      t6 = S.UniformsLib().$index(0, "fog");
      t5 = S.UniformsLib().$index(0, "lights");
      t4 = S.UniformsLib().$index(0, "shadowmap");
      t10 = new S.Uniform("c", null, true, null);
      t10.set$value(0, S.Color$(16777215));
      t12 = new S.Uniform("c", null, true, null);
      t12.set$value(0, S.Color$(0));
      t13 = new S.Uniform("c", null, true, null);
      t13.set$value(0, S.Color$(1118481));
      t14 = new S.Uniform("f", null, true, null);
      t14.set$value(0, 30);
      t15 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t15.setValues$3(1, 1, 1);
      t16 = new S.Uniform("v3", null, true, null);
      t16.set$value(0, t15);
      t16 = P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", S.UniformsUtils_merge([t9, t8, t7, t6, t5, t4, P.LinkedHashMap_LinkedHashMap$_literal(["ambient", t10, "emissive", t12, "specular", t13, "shininess", t14, "wrapRGB", t16], null, null)]), "vertexShader", C.JSArray_methods.join$1(["#define PHONG", "varying vec3 vViewPosition;", "varying vec3 vNormal;", S.ShaderChunk().$index(0, "map_pars_vertex"), S.ShaderChunk().$index(0, "lightmap_pars_vertex"), S.ShaderChunk().$index(0, "envmap_pars_vertex"), S.ShaderChunk().$index(0, "lights_phong_pars_vertex"), S.ShaderChunk().$index(0, "color_pars_vertex"), S.ShaderChunk().$index(0, "morphtarget_pars_vertex"), S.ShaderChunk().$index(0, "skinning_pars_vertex"), S.ShaderChunk().$index(0, "shadowmap_pars_vertex"), "void main() {", S.ShaderChunk().$index(0, "map_vertex"), S.ShaderChunk().$index(0, "lightmap_vertex"), S.ShaderChunk().$index(0, "color_vertex"), S.ShaderChunk().$index(0, "morphnormal_vertex"), S.ShaderChunk().$index(0, "skinbase_vertex"), S.ShaderChunk().$index(0, "skinnormal_vertex"), S.ShaderChunk().$index(0, "defaultnormal_vertex"), "vNormal = normalize( transformedNormal );", S.ShaderChunk().$index(0, "morphtarget_vertex"), S.ShaderChunk().$index(0, "skinning_vertex"), S.ShaderChunk().$index(0, "default_vertex"), "vViewPosition = -mvPosition.xyz;", S.ShaderChunk().$index(0, "worldpos_vertex"), S.ShaderChunk().$index(0, "envmap_vertex"), S.ShaderChunk().$index(0, "lights_phong_vertex"), S.ShaderChunk().$index(0, "shadowmap_vertex"), "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform vec3 diffuse;", "uniform float opacity;", "uniform vec3 ambient;", "uniform vec3 emissive;", "uniform vec3 specular;", "uniform float shininess;", S.ShaderChunk().$index(0, "color_pars_fragment"), S.ShaderChunk().$index(0, "map_pars_fragment"), S.ShaderChunk().$index(0, "lightmap_pars_fragment"), S.ShaderChunk().$index(0, "envmap_pars_fragment"), S.ShaderChunk().$index(0, "fog_pars_fragment"), S.ShaderChunk().$index(0, "lights_phong_pars_fragment"), S.ShaderChunk().$index(0, "shadowmap_pars_fragment"), S.ShaderChunk().$index(0, "bumpmap_pars_fragment"), S.ShaderChunk().$index(0, "normalmap_pars_fragment"), S.ShaderChunk().$index(0, "specularmap_pars_fragment"), "void main() {", "gl_FragColor = vec4( vec3 ( 1.0 ), opacity );", S.ShaderChunk().$index(0, "map_fragment"), S.ShaderChunk().$index(0, "alphatest_fragment"), S.ShaderChunk().$index(0, "specularmap_fragment"), S.ShaderChunk().$index(0, "lights_phong_fragment"), S.ShaderChunk().$index(0, "lightmap_fragment"), S.ShaderChunk().$index(0, "color_fragment"), S.ShaderChunk().$index(0, "envmap_fragment"), S.ShaderChunk().$index(0, "shadowmap_fragment"), S.ShaderChunk().$index(0, "linear_to_gamma_fragment"), S.ShaderChunk().$index(0, "fog_fragment"), "}"], "\n")], null, null);
      t14 = P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", S.UniformsUtils_merge([S.UniformsLib().$index(0, "particle"), S.UniformsLib().$index(0, "shadowmap")]), "vertexShader", C.JSArray_methods.join$1(["uniform float size;", "uniform float scale;", S.ShaderChunk().$index(0, "color_pars_vertex"), S.ShaderChunk().$index(0, "shadowmap_pars_vertex"), "void main() {", S.ShaderChunk().$index(0, "color_vertex"), "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "#ifdef USE_SIZEATTENUATION", "gl_PointSize = size * ( scale / length( mvPosition.xyz ) );", "#else", "gl_PointSize = size;", "#endif", "gl_Position = projectionMatrix * mvPosition;", S.ShaderChunk().$index(0, "worldpos_vertex"), S.ShaderChunk().$index(0, "shadowmap_vertex"), "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform vec3 psColor;", "uniform float opacity;", S.ShaderChunk().$index(0, "color_pars_fragment"), S.ShaderChunk().$index(0, "map_particle_pars_fragment"), S.ShaderChunk().$index(0, "fog_pars_fragment"), S.ShaderChunk().$index(0, "shadowmap_pars_fragment"), "void main() {", "gl_FragColor = vec4( psColor, opacity );", S.ShaderChunk().$index(0, "map_particle_fragment"), S.ShaderChunk().$index(0, "alphatest_fragment"), S.ShaderChunk().$index(0, "color_fragment"), S.ShaderChunk().$index(0, "shadowmap_fragment"), S.ShaderChunk().$index(0, "fog_fragment"), "}"], "\n")], null, null);
      t13 = S.UniformsLib().$index(0, "common");
      t12 = S.UniformsLib().$index(0, "fog");
      t10 = new S.Uniform("f", null, true, null);
      t10.set$value(0, 1);
      t4 = new S.Uniform("f", null, true, null);
      t4.set$value(0, 1);
      t5 = new S.Uniform("f", null, true, null);
      t5.set$value(0, 2);
      t5 = P.LinkedHashMap_LinkedHashMap$_literal(["depth", t3, "normal", t2, "basic", t1, "lambert", t11, "phong", t16, "particle_basic", t14, "dashed", P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", S.UniformsUtils_merge([t13, t12, P.LinkedHashMap_LinkedHashMap$_literal(["scale", t10, "dashSize", t4, "totalSize", t5], null, null)]), "vertexShader", C.JSArray_methods.join$1(["uniform float scale;", "attribute float lineDistance;", "varying float vLineDistance;", S.ShaderChunk().$index(0, "color_pars_vertex"), "void main() {", S.ShaderChunk().$index(0, "color_vertex"), "vLineDistance = scale * lineDistance;", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "gl_Position = projectionMatrix * mvPosition;", "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform vec3 diffuse;", "uniform float opacity;", "uniform float dashSize;", "uniform float totalSize;", "varying float vLineDistance;", S.ShaderChunk().$index(0, "color_pars_fragment"), S.ShaderChunk().$index(0, "fog_pars_fragment"), "void main() {", "if ( mod( vLineDistance, totalSize ) > dashSize ) {", "discard;", "}", "gl_FragColor = vec4( diffuse, opacity );", S.ShaderChunk().$index(0, "color_fragment"), S.ShaderChunk().$index(0, "fog_fragment"), "}"], "\n")], null, null), "depthRGBA", P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", P.LinkedHashMap_LinkedHashMap$_empty(null, null), "vertexShader", C.JSArray_methods.join$1([S.ShaderChunk().$index(0, "morphtarget_pars_vertex"), S.ShaderChunk().$index(0, "skinning_pars_vertex"), "void main() {", S.ShaderChunk().$index(0, "skinbase_vertex"), S.ShaderChunk().$index(0, "morphtarget_vertex"), S.ShaderChunk().$index(0, "skinning_vertex"), S.ShaderChunk().$index(0, "default_vertex"), "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["vec4 pack_depth( const in float depth ) {", "const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );", "const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );", "vec4 res = fract( depth * bit_shift );", "res -= res.xxyz * bit_mask;", "return res;", "}", "void main() {", "gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );", "}"], "\n")], null, null)], null, null);
      $.__ShaderLib = t5;
      t1 = t5;
    }
    return t1;
  },
  Gyroscope: {
    "^": "Object3D;translationWorld,translationObject,rotationWorld,rotationObject,scaleWorld,scaleObject,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,geometry,material,__webglInit,__webglActive,immediateRenderCallback,_modelViewMatrix,_normalMatrix,count,hasPositions,hasNormals,hasUvs,hasColors,positionArray,normalArray,uvArray,colorArray,__webglVertexBuffer,__webglNormalBuffer,__webglUVBuffer,__webglColorBuffer,__webglMorphTargetInfluences",
    updateMatrixWorld$1$force: function(force) {
      var t1, t2, t3, t4, te, mRotation, mScale, l, i;
      if (this.matrixAutoUpdate)
        this.updateMatrix$0();
      if (this.matrixWorldNeedsUpdate || force) {
        t1 = this.parent;
        t2 = this.matrix;
        if (t1 != null) {
          t1 = t1.get$matrixWorld().$mul(0, t2);
          this.matrixWorld = t1;
          t3 = this.translationWorld;
          t4 = this.scaleWorld;
          S.decompose(t1, t3, this.rotationWorld, t4);
          t1 = this.rotationObject;
          S.decompose(t2, this.translationObject, t1, this.scaleObject);
          t2 = this.matrixWorld;
          te = t2.get$storage(t2);
          mRotation = new T.Matrix4(new Float32Array(H._checkLength(16)));
          mRotation.setIdentity$0();
          S.setRotationFromQuaternion(mRotation, t1);
          t4 = t4.storage;
          t1 = t4[0];
          t2 = t4[1];
          t4 = t4[2];
          mScale = new T.Matrix4(new Float32Array(H._checkLength(16)));
          mScale.Matrix4$diagonal3Values$3(t1, t2, t4);
          mRotation.multiply$1(0, mScale);
          t3 = t3.storage;
          t4 = t3[0];
          t2 = te.length;
          if (12 >= t2)
            return H.ioore(te, 12);
          te[12] = t4;
          t4 = t3[1];
          if (13 >= t2)
            return H.ioore(te, 13);
          te[13] = t4;
          t3 = t3[2];
          if (14 >= t2)
            return H.ioore(te, 14);
          te[14] = t3;
        } else
          this.matrixWorld.setFrom$1(t2);
        this.matrixWorldNeedsUpdate = false;
        force = true;
      }
      t1 = this.children;
      l = t1.length;
      for (i = 0; i < l; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].updateMatrixWorld$1(force);
      }
    }
  },
  CircleGeometry: {
    "^": "Geometry;radius,segments,thetaStart,thetaLength,name,vertices,colors,normals,materials,faces,faceUvs,faceVertexUvs,morphTargets,morphColors,morphNormals,skinWeights,skinIndices,lineDistances,__tmpVertices,boundingBox,boundingSphere,hasTangents,_dynamic,bones,animation,verticesNeedUpdate,colorsNeedUpdate,elementsNeedUpdate,uvsNeedUpdate,normalsNeedUpdate,tangentsNeedUpdate,buffersNeedUpdate,morphTargetsNeedUpdate,lineDistancesNeedUpdate,__data,WebGLGeometry_id,WebGLGeometry_verticesCount,WebGLGeometry_faces3,WebGLGeometry_faces4,WebGLGeometry_numMorphTargets,WebGLGeometry_numMorphNormals,WebGLGeometry_materialIndex,WebGLGeometry_geometryGroups,WebGLGeometry_geometryGroupsList,WebGLGeometry___webglVertexBuffer,WebGLGeometry___webglNormalBuffer,WebGLGeometry___webglTangentBuffer,WebGLGeometry___webglColorBuffer,WebGLGeometry___webglLineDistanceBuffer,WebGLGeometry___webglUVBuffer,WebGLGeometry___webglUV2Buffer,WebGLGeometry___webglSkinVertexABuffer,WebGLGeometry___webglSkinVertexBBuffer,WebGLGeometry___webglSkinIndicesBuffer,WebGLGeometry___webglSkinWeightsBuffer,WebGLGeometry___webglFaceBuffer,WebGLGeometry___webglLineBuffer,WebGLGeometry___webglMorphTargetsBuffers,WebGLGeometry___webglMorphNormalsBuffers,WebGLGeometry___webglInit,WebGLGeometry___inittedArrays,WebGLGeometry___vertexArray,WebGLGeometry___normalArray,WebGLGeometry___tangentArray,WebGLGeometry___colorArray,WebGLGeometry___lineDistanceArray,WebGLGeometry___uvArray,WebGLGeometry___uv2Array,WebGLGeometry___skinVertexAArray,WebGLGeometry___skinVertexBArray,WebGLGeometry___skinIndexArray,WebGLGeometry___skinWeightArray,WebGLGeometry___faceArray,WebGLGeometry___lineArray,WebGLGeometry___morphTargetsArrays,WebGLGeometry___morphNormalsArrays,WebGLGeometry___webglFaceCount,WebGLGeometry___webglLineCount,WebGLGeometry___webglParticleCount,WebGLGeometry___webglVertexCount,WebGLGeometry___sortArray,WebGLGeometry___webglCustomAttributesList",
    CircleGeometry$4: function(radius, segments, thetaStart, thetaLength) {
      var uvs, t1, centerUV, t2, t3, i, t4, t5, n, v2;
      this.segments = P.max(3, this.segments);
      uvs = [];
      t1 = new Float32Array(H._checkLength(3));
      centerUV = new S.UV(0.5, 0.5);
      this.vertices.push(new T.Vector3(t1));
      uvs.push(centerUV);
      t1 = this.radius;
      t2 = this.thetaStart;
      t3 = this.thetaLength;
      i = 0;
      while (true) {
        t4 = this.segments;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i <= t4))
          break;
        t4 = new Float32Array(3);
        t5 = this.segments;
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (typeof t2 !== "number")
          return t2.$add();
        t5 = Math.cos(t2 + i / t5 * t3);
        if (typeof t1 !== "number")
          return t1.$mul();
        t4[0] = t1 * t5;
        t5 = this.segments;
        if (typeof t5 !== "number")
          return H.iae(t5);
        t4[1] = t1 * Math.sin(t2 + i / t5 * t3);
        this.vertices.push(new T.Vector3(t4));
        uvs.push(new S.UV((t4[0] / t1 + 1) / 2, -(t4[1] / t1 + 1) / 2 + 1));
        ++i;
      }
      n = new T.Vector3(new Float32Array(H._checkLength(3)));
      n.setValues$3(0, 0, -1);
      t2 = this.faceVertexUvs;
      i = 1;
      while (true) {
        t3 = this.segments;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i <= t3))
          break;
        v2 = i + 1;
        t3 = this.faces;
        t4 = [i, v2, 0];
        t5 = new S.Face3(t4, null, null, null, null, null, null, null);
        t5.Face$4(t4, [n, n, n], null, null);
        t3.push(t5);
        t5 = t2[0];
        t3 = uvs.length;
        if (i >= t3)
          return H.ioore(uvs, i);
        t4 = uvs[i];
        if (v2 >= t3)
          return H.ioore(uvs, v2);
        t5.push([t4, uvs[v2], centerUV]);
        i = v2;
      }
      this.computeCentroids$0();
      this.computeFaceNormals$0();
      this.boundingSphere = new S.BoundingSphere(t1, null);
    },
    static: {CircleGeometry$: function(radius, segments, thetaStart, thetaLength) {
        var t1 = new S.CircleGeometry(radius, segments, thetaStart, thetaLength, "", H.setRuntimeTypeInfo([], [T.Vector3]), [], [], [], [], [[]], [[]], [], [], [], [], [], [], null, null, null, false, false, null, null, false, false, false, false, false, false, false, false, false, null, null, null, null, null, null, null, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.Geometry$0();
        t1.CircleGeometry$4(radius, segments, thetaStart, thetaLength);
        return t1;
      }}
  },
  CameraHelper: {
    "^": "Line;camera,matrixWorld:CameraHelper_matrixWorld@,matrixAutoUpdate:CameraHelper_matrixAutoUpdate<,pointMap,Line_material,type,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,geometry,material,__webglInit,__webglActive,immediateRenderCallback,_modelViewMatrix,_normalMatrix,count,hasPositions,hasNormals,hasUvs,hasColors,positionArray,normalArray,uvArray,colorArray,__webglVertexBuffer,__webglNormalBuffer,__webglUVBuffer,__webglColorBuffer,__webglMorphTargetInfluences",
    addPoint$2: function(id, hex) {
      var t1;
      this.geometry.vertices.push(new T.Vector3(new Float32Array(H._checkLength(3))));
      this.geometry.colors.push(S.Color$(hex));
      t1 = this.pointMap;
      if (!t1.containsKey$1(0, id))
        t1.$indexSet(0, id, []);
      t1.$index(0, id).push(this.geometry.vertices.length - 1);
    },
    setPoint$4: function(point, x, y, z) {
      var points, il, i, t1, t2;
      $.get$CameraHelper___v().setValues$3(x, y, z);
      $.get$CameraHelper___projector().unprojectVector$2($.get$CameraHelper___v(), $.get$CameraHelper___c());
      points = this.pointMap.$index(0, point);
      if (points != null) {
        il = points.length;
        for (i = 0; i < il; ++i) {
          t1 = this.geometry.vertices;
          if (i >= points.length)
            return H.ioore(points, i);
          t2 = points[i];
          if (t2 >>> 0 !== t2 || t2 >= t1.length)
            return H.ioore(t1, t2);
          t1[t2].setFrom$1($.get$CameraHelper___v());
        }
      }
    },
    update$0: function(_) {
      $.get$CameraHelper___c().projectionMatrix.setFrom$1(this.camera.projectionMatrix);
      this.setPoint$4("c", 0, 0, -1);
      this.setPoint$4("t", 0, 0, 1);
      this.setPoint$4("n1", -1, -1, -1);
      this.setPoint$4("n2", 1, -1, -1);
      this.setPoint$4("n3", -1, 1, -1);
      this.setPoint$4("n4", 1, 1, -1);
      this.setPoint$4("f1", -1, -1, 1);
      this.setPoint$4("f2", 1, -1, 1);
      this.setPoint$4("f3", -1, 1, 1);
      this.setPoint$4("f4", 1, 1, 1);
      this.setPoint$4("u1", 0.7, 1.1, -1);
      this.setPoint$4("u2", -0.7, 1.1, -1);
      this.setPoint$4("u3", 0, 2, -1);
      this.setPoint$4("cf1", -1, 0, 1);
      this.setPoint$4("cf2", 1, 0, 1);
      this.setPoint$4("cf3", 0, -1, 1);
      this.setPoint$4("cf4", 0, 1, 1);
      this.setPoint$4("cn1", -1, 0, -1);
      this.setPoint$4("cn2", 1, 0, -1);
      this.setPoint$4("cn3", 0, -1, -1);
      this.setPoint$4("cn4", 0, 1, -1);
      this.geometry.get$_data().$indexSet(0, "verticesNeedUpdate", true);
    },
    CameraHelper$1: function(camera) {
      this.CameraHelper_matrixWorld = this.camera.matrixWorld;
      this.addPoint$2("n1", 16755200);
      this.addPoint$2("n2", 16755200);
      this.addPoint$2("n2", 16755200);
      this.addPoint$2("n4", 16755200);
      this.addPoint$2("n4", 16755200);
      this.addPoint$2("n3", 16755200);
      this.addPoint$2("n3", 16755200);
      this.addPoint$2("n1", 16755200);
      this.addPoint$2("f1", 16755200);
      this.addPoint$2("f2", 16755200);
      this.addPoint$2("f2", 16755200);
      this.addPoint$2("f4", 16755200);
      this.addPoint$2("f4", 16755200);
      this.addPoint$2("f3", 16755200);
      this.addPoint$2("f3", 16755200);
      this.addPoint$2("f1", 16755200);
      this.addPoint$2("n1", 16755200);
      this.addPoint$2("f1", 16755200);
      this.addPoint$2("n2", 16755200);
      this.addPoint$2("f2", 16755200);
      this.addPoint$2("n3", 16755200);
      this.addPoint$2("f3", 16755200);
      this.addPoint$2("n4", 16755200);
      this.addPoint$2("f4", 16755200);
      this.addPoint$2("p", 16711680);
      this.addPoint$2("n1", 16711680);
      this.addPoint$2("p", 16711680);
      this.addPoint$2("n2", 16711680);
      this.addPoint$2("p", 16711680);
      this.addPoint$2("n3", 16711680);
      this.addPoint$2("p", 16711680);
      this.addPoint$2("n4", 16711680);
      this.addPoint$2("u1", 43775);
      this.addPoint$2("u2", 43775);
      this.addPoint$2("u2", 43775);
      this.addPoint$2("u3", 43775);
      this.addPoint$2("u3", 43775);
      this.addPoint$2("u1", 43775);
      this.addPoint$2("c", 16777215);
      this.addPoint$2("t", 16777215);
      this.addPoint$2("p", 3355443);
      this.addPoint$2("c", 3355443);
      this.addPoint$2("cn1", 3355443);
      this.addPoint$2("cn2", 3355443);
      this.addPoint$2("cn3", 3355443);
      this.addPoint$2("cn4", 3355443);
      this.addPoint$2("cf1", 3355443);
      this.addPoint$2("cf2", 3355443);
      this.addPoint$2("cf3", 3355443);
      this.addPoint$2("cf4", 3355443);
      this.update$0(0);
    }
  },
  ShadowMapPlugin: {
    "^": "Object;_frustum,_projScreenMatrix,_min,_max,_gl,_renderer,_depthMaterial,_depthMaterialMorph,_depthMaterialSkin,_depthMaterialMorphSkin",
    render$4: function(scene, camera, width, height) {
      var t1 = this._renderer;
      if (!(t1.shadowMapEnabled && t1.shadowMapAutoUpdate))
        return;
      this.update$2(0, scene, camera);
    },
    update$2: function(_, scene, camera) {
      var lights, t1, t2, il, i, n, virtualLight, light, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, gyro, line, virtualLight0, nearZ, farZ, pointsFrustum, j, jl, shadowMap, shadowMatrix, shadowCamera, buffer, material, webglObject, object, renderList, shadowFilter, t16, t17, t18, t19, t20, t21, objectMaterial, useMorphing, useSkinning, clearColor, clearAlpha;
      lights = [];
      J.clearColor$4$x(this._gl, 1, 1, 1, 1);
      J.disable$1$x(this._gl, 3042);
      J.enable$1$x(this._gl, 2884);
      J.frontFace$1$x(this._gl, 2305);
      t1 = this._renderer.shadowMapCullFrontFaces;
      t2 = this._gl;
      if (t1 === 2)
        J.cullFace$1$x(t2, 1028);
      else
        J.cullFace$1$x(t2, 1029);
      this._renderer.setDepthTest$1(true);
      il = scene.lights.length;
      for (i = 0, n = null, virtualLight = null; i < il; ++i) {
        t1 = scene.lights;
        if (i >= t1.length)
          return H.ioore(t1, i);
        light = t1[i];
        if (!light.get$castShadow())
          continue;
        if (!!light.$isDirectionalLight && light.shadowCascade)
          for (n = 0; n < light.get$shadowCascadeCount(); ++n) {
            if (n >= 0)
              return H.ioore(light.shadowCascadeArray, n);
            virtualLight = this.createVirtualLight$2(light, n);
            virtualLight.set$originalCamera(camera);
            t1 = new Float32Array(3);
            t2 = new Float32Array(3);
            t3 = new Float32Array(4);
            t3[3] = 1;
            t4 = new Float32Array(4);
            t4[3] = 1;
            t5 = new Float32Array(3);
            t6 = new Float32Array(3);
            t7 = $.Object3DCount;
            $.Object3DCount = t7 + 1;
            t8 = new Float32Array(3);
            t8[0] = 0;
            t8[1] = 1;
            t8[2] = 0;
            t9 = new Float32Array(3);
            t9[0] = 0;
            t9[1] = 0;
            t9[2] = 0;
            t10 = new Float32Array(3);
            t10[0] = 0;
            t10[1] = 0;
            t10[2] = 0;
            t11 = new Float32Array(3);
            t11[0] = 1;
            t11[1] = 1;
            t11[2] = 1;
            t12 = new T.Matrix4(new Float32Array(16));
            t12.setIdentity$0();
            t13 = new T.Matrix4(new Float32Array(16));
            t13.setIdentity$0();
            t14 = new T.Matrix4(new Float32Array(16));
            t14.setIdentity$0();
            t15 = new Float32Array(4);
            t15[3] = 1;
            gyro = new S.Gyroscope(new T.Vector3(t1), new T.Vector3(t2), new T.Quaternion(t3), new T.Quaternion(t4), new T.Vector3(t5), new T.Vector3(t6), t7, "", P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, [], new T.Vector3(t8), new T.Vector3(t9), new T.Vector3(t10), new T.Vector3(t11), "XYZ", null, null, null, true, null, t12, t13, t14, true, true, new T.Quaternion(t15), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(3)), null, null, null, false, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
            gyro.position = light.shadowCascadeOffset;
            gyro.add$1(0, virtualLight);
            gyro.add$1(0, virtualLight.target);
            camera.add$1(0, gyro);
            light.shadowCascadeArray[n] = virtualLight;
            line = "Created virtualLight " + ("Instance of '" + H.Primitives_objectTypeName(virtualLight) + "'");
            H.printString(line);
            virtualLight0 = light.shadowCascadeArray[n];
            virtualLight0.get$position(virtualLight0).copy$1(light.DirectionalLight_position);
            t1 = virtualLight0.get$target(virtualLight0);
            t1.get$position(t1).copy$1(light.target.position);
            virtualLight0.lookAt$1(virtualLight0.get$target(virtualLight0));
            virtualLight0.set$shadowCameraVisible(light.shadowCameraVisible);
            virtualLight0.set$shadowDarkness(light.shadowDarkness);
            virtualLight0.set$shadowBias(light.shadowCascadeBias[n]);
            nearZ = light.shadowCascadeNearZ[n];
            farZ = light.shadowCascadeFarZ[n];
            pointsFrustum = virtualLight0.get$pointsFrustum();
            pointsFrustum.$index(0, 0).set$z(0, nearZ);
            pointsFrustum.$index(0, 1).set$z(0, nearZ);
            pointsFrustum.$index(0, 2).set$z(0, nearZ);
            pointsFrustum.$index(0, 3).set$z(0, nearZ);
            pointsFrustum.$index(0, 4).set$z(0, farZ);
            pointsFrustum.$index(0, 5).set$z(0, farZ);
            pointsFrustum.$index(0, 6).set$z(0, farZ);
            pointsFrustum.$index(0, 7).set$z(0, farZ);
            lights.push(virtualLight);
          }
        else
          lights.push(light);
      }
      il = lights.length;
      for (t1 = this._frustum, i = 0, j = null, jl = null, shadowMap = null, shadowMatrix = null, shadowCamera = null, buffer = null, material = null, webglObject = null, object = null, renderList = null; i < il; ++i) {
        if (i >= lights.length)
          return H.ioore(lights, i);
        light = lights[i];
        if (light.get$shadowMap() == null) {
          shadowFilter = this._renderer.shadowMapType === 2 ? 3 : 6;
          t2 = new S.WebGLRenderTarget(light.shadowMapWidth, light.shadowMapHeight, null, null, true, true, true, null, null, null, null, null, null, 1, 1, shadowFilter, shadowFilter, 18, 10, 1, null, null, null, null, null, null, null, 4, [], null, null);
          t2.Texture$9(null, null, 1, 1, shadowFilter, shadowFilter, 18, 10, 1);
          if (t2.WebGLRenderTarget_offset == null)
            t2.WebGLRenderTarget_offset = new T.Vector2(new Float32Array(2));
          if (t2.WebGLRenderTarget_repeat == null) {
            t3 = new Float32Array(2);
            t3[0] = 1;
            t3[1] = 1;
            t2.WebGLRenderTarget_repeat = new T.Vector2(t3);
          }
          light.shadowMap = t2;
          t2 = light.shadowMapWidth;
          t3 = light.shadowMapHeight;
          t4 = new Float32Array(2);
          t4[0] = t2;
          t4[1] = t3;
          light.shadowMapSize = new T.Vector2(t4);
          t2 = new T.Matrix4(new Float32Array(16));
          t2.setIdentity$0();
          light.shadowMatrix = t2;
        }
        if (light.shadowCamera == null) {
          if (!!light.$isDirectionalLight) {
            t2 = light.shadowCameraLeft;
            t3 = light.shadowCameraRight;
            t4 = light.shadowCameraTop;
            t5 = light.shadowCameraBottom;
            t6 = light.shadowCameraNear;
            t7 = light.shadowCameraFar;
            t8 = new Float32Array(16);
            t9 = new Float32Array(16);
            t10 = new T.Matrix4(new Float32Array(16));
            t10.setIdentity$0();
            t11 = new T.Matrix4(new Float32Array(16));
            t11.setIdentity$0();
            t12 = new T.Matrix4(new Float32Array(16));
            t12.setIdentity$0();
            t13 = $.Object3DCount;
            $.Object3DCount = t13 + 1;
            t14 = new Float32Array(3);
            t14[0] = 0;
            t14[1] = 1;
            t14[2] = 0;
            t15 = new Float32Array(3);
            t15[0] = 0;
            t15[1] = 0;
            t15[2] = 0;
            t16 = new Float32Array(3);
            t16[0] = 0;
            t16[1] = 0;
            t16[2] = 0;
            t17 = new Float32Array(3);
            t17[0] = 1;
            t17[1] = 1;
            t17[2] = 1;
            t18 = new T.Matrix4(new Float32Array(16));
            t18.setIdentity$0();
            t19 = new T.Matrix4(new Float32Array(16));
            t19.setIdentity$0();
            t20 = new T.Matrix4(new Float32Array(16));
            t20.setIdentity$0();
            t21 = new Float32Array(4);
            t21[3] = 1;
            t8 = new S.OrthographicCamera(t2, t3, t4, t5, t10, t11, t12, t6, t7, t8, t9, t13, "", P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, [], new T.Vector3(t14), new T.Vector3(t15), new T.Vector3(t16), new T.Vector3(t17), "XYZ", null, null, null, true, null, t18, t19, t20, true, true, new T.Quaternion(t21), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(3)), null, null, null, false, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
            T.setOrthographicMatrix(t11, t2, t3, t5, t4, t6, t7);
            light.shadowCamera = t8;
          } else {
            H.printString("Unsupported light type for shadow");
            continue;
          }
          t2 = t8;
          scene.add$1(0, t2);
          if (this._renderer.autoUpdateScene)
            scene.updateMatrixWorld$0();
        }
        if (light.shadowCameraVisible && light.cameraHelper == null) {
          t2 = light.shadowCamera;
          t3 = S.Geometry$();
          t4 = $.MaterialCount;
          $.MaterialCount = t4 + 1;
          t5 = new S.Color(1, 1, 1);
          t5.setHex$1(16777215);
          t4 = new S.LineBasicMaterial(1, "round", "round", "", t4, 0, t5, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, true, 1, null, null, null, null, null, false);
          t5 = $.Object3DCount;
          $.Object3DCount = t5 + 1;
          t6 = new Float32Array(3);
          t6[0] = 0;
          t6[1] = 1;
          t6[2] = 0;
          t7 = new Float32Array(3);
          t7[0] = 0;
          t7[1] = 0;
          t7[2] = 0;
          t8 = new Float32Array(3);
          t8[0] = 0;
          t8[1] = 0;
          t8[2] = 0;
          t9 = new Float32Array(3);
          t9[0] = 1;
          t9[1] = 1;
          t9[2] = 1;
          t10 = new T.Matrix4(new Float32Array(16));
          t10.setIdentity$0();
          t11 = new T.Matrix4(new Float32Array(16));
          t11.setIdentity$0();
          t12 = new T.Matrix4(new Float32Array(16));
          t12.setIdentity$0();
          t13 = new Float32Array(4);
          t13[3] = 1;
          t5 = new S.CameraHelper(t2, null, false, P.LinkedHashMap_LinkedHashMap$_empty(null, null), t4, 1, t5, "", P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, [], new T.Vector3(t6), new T.Vector3(t7), new T.Vector3(t8), new T.Vector3(t9), "XYZ", null, null, null, true, null, t10, t11, t12, true, true, new T.Quaternion(t13), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(3)), null, null, null, false, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
          t5.Line$3(t3, t4, 1);
          t5.CameraHelper$1(t2);
          light.cameraHelper = t5;
          light.shadowCamera.add$1(0, t5);
        }
        if (!!light.$isVirtualLight)
          virtualLight.get$originalCamera();
        shadowMap = light.shadowMap;
        shadowMatrix = light.shadowMatrix;
        shadowCamera = light.shadowCamera;
        shadowCamera.position = light.matrixWorld.getTranslation$0();
        t2 = light.get$target(light).matrixWorld.getTranslation$0();
        t3 = shadowCamera.matrix;
        S.makeLookAt(t3, shadowCamera.position, t2, shadowCamera.up);
        if (shadowCamera.rotationAutoUpdate)
          shadowCamera.rotation = S.calcEulerFromRotationMatrix(t3, shadowCamera.eulerOrder);
        shadowCamera.updateMatrixWorld$0();
        t2 = shadowCamera.matrixWorldInverse;
        t2.copyInverse$1(shadowCamera.matrixWorld);
        t3 = light.cameraHelper;
        if (t3 != null)
          t3.visible = light.shadowCameraVisible;
        if (light.shadowCameraVisible)
          t3.update$0(0);
        shadowMatrix.setValues$16(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
        shadowMatrix.multiply$1(0, shadowCamera.projectionMatrix);
        shadowMatrix.multiply$1(0, t2);
        t3 = shadowCamera.projectionMatrix.$mul(0, t2);
        this._projScreenMatrix = t3;
        t1.setFromMatrix$1(t3);
        this._renderer.setRenderTarget$1(shadowMap);
        this._renderer.clear$0(0);
        renderList = scene.__webglObjects;
        jl = renderList.length;
        for (j = 0; j < jl; ++j) {
          if (j >= renderList.length)
            return H.ioore(renderList, j);
          webglObject = renderList[j];
          object = webglObject.object;
          webglObject.render = false;
          if (object.visible && object.get$castShadow()) {
            if (!!object.$isMesh)
              t3 = !object.frustumCulled || t1.contains$1(0, object);
            else
              t3 = true;
            if (t3) {
              object._modelViewMatrix = t2.$mul(0, object.get$matrixWorld());
              webglObject.render = true;
            }
          }
        }
        jl = renderList.length;
        for (j = 0, objectMaterial = null, useMorphing = null, useSkinning = null; j < jl; ++j) {
          if (j >= renderList.length)
            return H.ioore(renderList, j);
          webglObject = renderList[j];
          if (webglObject.render) {
            object = webglObject.object;
            buffer = webglObject.buffer;
            object.get$material();
            objectMaterial = object.get$material();
            object.geometry.morphTargets;
            material = this._depthMaterial;
            this._renderer.renderBuffer$6(shadowCamera, scene.lights, null, material, buffer, object);
            useMorphing = false;
            useSkinning = false;
          }
        }
        renderList = scene.__webglObjectsImmediate;
        jl = renderList.length;
        for (j = 0; j < jl; ++j) {
          if (j >= renderList.length)
            return H.ioore(renderList, j);
          webglObject = renderList[j];
          object = webglObject.object;
          if (object.visible && object.get$castShadow()) {
            object._modelViewMatrix.multiply$1(0, t2);
            this._renderer.renderImmediateObject$5(shadowCamera, scene.lights, null, this._depthMaterial, object);
          }
        }
      }
      t1 = this._renderer;
      clearColor = t1._clearColor;
      clearAlpha = t1._clearAlpha;
      J.clearColor$4$x(this._gl, clearColor._r, clearColor._g, clearColor._b, clearAlpha);
      J.enable$1$x(this._gl, 3042);
      if (this._renderer.shadowMapCullFrontFaces === 2)
        J.cullFace$1$x(this._gl, 1029);
    },
    createVirtualLight$2: function(light, cascade) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, virtualLight, i, nearZ, farZ;
      t1 = new S.Color(1, 1, 1);
      t1.setHex$1(0);
      t2 = $.Object3DCount;
      $.Object3DCount = t2 + 1;
      t3 = new Float32Array(3);
      t3[0] = 0;
      t3[1] = 1;
      t3[2] = 0;
      t4 = new Float32Array(3);
      t4[0] = 0;
      t4[1] = 0;
      t4[2] = 0;
      t5 = new Float32Array(3);
      t5[0] = 0;
      t5[1] = 0;
      t5[2] = 0;
      t6 = new Float32Array(3);
      t6[0] = 1;
      t6[1] = 1;
      t6[2] = 1;
      t7 = new T.Matrix4(new Float32Array(16));
      t7.setIdentity$0();
      t8 = new T.Matrix4(new Float32Array(16));
      t8.setIdentity$0();
      t9 = new T.Matrix4(new Float32Array(16));
      t9.setIdentity$0();
      t10 = new Float32Array(4);
      t10[3] = 1;
      virtualLight = new S.VirtualLight([], [], null, null, 1, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, false, false, 50, 5000, 50, false, 0, 0.5, 512, 512, null, null, null, null, null, t1, t2, "", P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, [], new T.Vector3(t3), new T.Vector3(t4), new T.Vector3(t5), new T.Vector3(t6), "XYZ", null, null, null, true, null, t7, t8, t9, true, true, new T.Quaternion(t10), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(3)), null, null, null, false, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
      virtualLight.DirectionalLight$3(0, 1, 0);
      virtualLight.onlyShadow = true;
      virtualLight.ShadowCaster_castShadow = true;
      virtualLight.shadowCameraNear = light.shadowCameraNear;
      virtualLight.shadowCameraFar = light.shadowCameraFar;
      virtualLight.shadowCameraLeft = light.shadowCameraLeft;
      virtualLight.shadowCameraRight = light.shadowCameraRight;
      virtualLight.shadowCameraBottom = light.shadowCameraBottom;
      virtualLight.shadowCameraTop = light.shadowCameraTop;
      virtualLight.shadowCameraVisible = light.shadowCameraVisible;
      virtualLight.shadowDarkness = light.shadowDarkness;
      t1 = light.shadowCascadeBias;
      if (cascade >= 3)
        return H.ioore(t1, cascade);
      virtualLight.shadowBias = t1[cascade];
      virtualLight.shadowMapWidth = light.shadowCascadeWidth[cascade];
      virtualLight.shadowMapHeight = light.shadowCascadeHeight[cascade];
      t1 = [];
      virtualLight.pointsWorld = t1;
      t2 = [];
      virtualLight.pointsFrustum = t2;
      for (i = 0; i < 8; ++i) {
        t3 = new Float32Array(3);
        if (i >= 0)
          return H.ioore(t1, i);
        t1[i] = new T.Vector3(t3);
        t2[i] = new T.Vector3(new Float32Array(3));
      }
      nearZ = light.shadowCascadeNearZ[cascade];
      farZ = light.shadowCascadeFarZ[cascade];
      if (0 >= 0)
        return H.ioore(t2, 0);
      t2[0].$set$3(-1, -1, nearZ);
      return H.ioore(t2, 1);
      t2[1].$set$3(1, -1, nearZ);
      return H.ioore(t2, 2);
      t2[2].$set$3(-1, 1, nearZ);
      return H.ioore(t2, 3);
      t2[3].$set$3(1, 1, nearZ);
      return H.ioore(t2, 4);
      t2[4].$set$3(-1, -1, farZ);
      return H.ioore(t2, 5);
      t2[5].$set$3(1, -1, farZ);
      return H.ioore(t2, 6);
      t2[6].$set$3(-1, 1, farZ);
      return H.ioore(t2, 7);
      t2[7].$set$3(1, 1, farZ);
      return virtualLight;
    }
  },
  VirtualLight: {
    "^": "DirectionalLight;pointsWorld,pointsFrustum,DirectionalLight_position,target,intensity,distance,shadowCameraLeft,shadowCameraRight,shadowCameraTop,shadowCameraBottom,shadowCascade,shadowCascadeOffset,shadowCascadeCount,shadowCascadeBias,shadowCascadeWidth,shadowCascadeHeight,shadowCascadeNearZ,shadowCascadeFarZ,shadowCascadeArray,ShadowCaster_castShadow,onlyShadow,shadowCameraNear,shadowCameraFar,shadowCameraFov,shadowCameraVisible,shadowBias,shadowDarkness,shadowMapWidth,shadowMapHeight,shadowMap,shadowMapSize,shadowCamera,shadowMatrix,cameraHelper,color,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,geometry,material,__webglInit,__webglActive,immediateRenderCallback,_modelViewMatrix,_normalMatrix,count,hasPositions,hasNormals,hasUvs,hasColors,positionArray,normalArray,uvArray,colorArray,__webglVertexBuffer,__webglNormalBuffer,__webglUVBuffer,__webglColorBuffer,__webglMorphTargetInfluences"
  },
  Camera: {
    "^": "Object3D;matrixWorldInverse,projectionMatrix,projectionMatrixInverse,near,far,_viewMatrixArray,_projectionMatrixArray,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,geometry,material,__webglInit,__webglActive,immediateRenderCallback,_modelViewMatrix,_normalMatrix,count,hasPositions,hasNormals,hasUvs,hasColors,positionArray,normalArray,uvArray,colorArray,__webglVertexBuffer,__webglNormalBuffer,__webglUVBuffer,__webglColorBuffer,__webglMorphTargetInfluences",
    lookAt$1: function(vector) {
      var t1 = this.matrix;
      S.makeLookAt(t1, this.position, vector, this.up);
      if (this.rotationAutoUpdate)
        this.rotation = S.calcEulerFromRotationMatrix(t1, this.eulerOrder);
    },
    static: {Camera$: function(near, far) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
        t1 = new Float32Array(H._checkLength(16));
        t2 = new Float32Array(H._checkLength(16));
        t3 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t3.setIdentity$0();
        t4 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t4.setIdentity$0();
        t5 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t5.setIdentity$0();
        t6 = $.Object3DCount;
        $.Object3DCount = t6 + 1;
        t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t7.setValues$3(0, 1, 0);
        t8 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t8.setValues$3(0, 0, 0);
        t9 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t9.setValues$3(0, 0, 0);
        t10 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t10.setValues$3(1, 1, 1);
        t11 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t11.setIdentity$0();
        t12 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t12.setIdentity$0();
        t13 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t13.setIdentity$0();
        return new S.Camera(t3, t4, t5, near, far, t1, t2, t6, "", P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, [], t7, t8, t9, t10, "XYZ", null, null, null, true, null, t11, t12, t13, true, true, T.Quaternion$identity(), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(H._checkLength(3))), null, null, null, false, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
      }}
  },
  OrthographicCamera: {
    "^": "Camera;left,right,top,bottom,matrixWorldInverse,projectionMatrix,projectionMatrixInverse,near,far,_viewMatrixArray,_projectionMatrixArray,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,geometry,material,__webglInit,__webglActive,immediateRenderCallback,_modelViewMatrix,_normalMatrix,count,hasPositions,hasNormals,hasUvs,hasColors,positionArray,normalArray,uvArray,colorArray,__webglVertexBuffer,__webglNormalBuffer,__webglUVBuffer,__webglColorBuffer,__webglMorphTargetInfluences"
  },
  PerspectiveCamera: {
    "^": "Camera;fov,aspect,_fullWidth,_fullHeight,_x,_y,_width,_height,matrixWorldInverse,projectionMatrix,projectionMatrixInverse,near,far,_viewMatrixArray,_projectionMatrixArray,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,geometry,material,__webglInit,__webglActive,immediateRenderCallback,_modelViewMatrix,_normalMatrix,count,hasPositions,hasNormals,hasUvs,hasColors,positionArray,normalArray,uvArray,colorArray,__webglVertexBuffer,__webglNormalBuffer,__webglUVBuffer,__webglColorBuffer,__webglMorphTargetInfluences",
    updateProjectionMatrix$0: function() {
      var t1, height, width, view;
      t1 = this.near;
      height = Math.tan(H.checkNum(this.fov * 0.017453292519943295 * 0.5)) * t1;
      width = height * this.aspect;
      view = new T.Matrix4(new Float32Array(H._checkLength(16)));
      T.setFrustumMatrix(view, -width, width, -height, height, t1, this.far);
      this.projectionMatrix = view;
    }
  },
  Color: {
    "^": "Object;_r,_g,_b",
    get$r: function(_) {
      return this._r;
    },
    get$g: function() {
      return this._g;
    },
    get$b: function(_) {
      return this._b;
    },
    copy$1: function(color) {
      this._r = color._r;
      this._g = color._g;
      this._b = color._b;
      return this;
    },
    copyGammaToLinear$1: function(color) {
      var t1 = color._r;
      this._r = t1 * t1;
      t1 = color._g;
      this._g = t1 * t1;
      t1 = color._b;
      this._b = t1 * t1;
      return this;
    },
    setHex$1: function(hex) {
      var h = C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(hex)));
      this._r = ((h & 16711680) >>> 16) / 255;
      this._g = ((h & 65280) >>> 8) / 255;
      this._b = (h & 255) / 255;
      return this;
    },
    clone$0: function(_) {
      var t1, t2, t3, t4;
      t1 = S.Color$(null);
      t2 = this._r;
      t3 = this._g;
      t4 = this._b;
      t1._r = t2;
      t1._g = t3;
      t1._b = t4;
      return t1;
    },
    Color$1: function(hex) {
      if (typeof hex === "number")
        this.setHex$1(hex);
    },
    static: {Color$: function(hex) {
        var t1 = new S.Color(1, 1, 1);
        t1.Color$1(hex);
        return t1;
      }}
  },
  Face: {
    "^": "Object;normal@,color>,centroid<",
    setFrom$1: function(other) {
      this.normal.setFrom$1(other.get$normal());
      this.color.copy$1(other.color);
      this.centroid.setFrom$1(other.centroid);
      this.materialIndex = other.materialIndex;
      this.vertexNormals = H.setRuntimeTypeInfo(new H.MappedListIterable(other.vertexNormals, new S.Face_setFrom_closure()), [null, null]).toList$0(0);
      this.vertexColors = H.setRuntimeTypeInfo(new H.MappedListIterable(other.vertexColors, new S.Face_setFrom_closure0()), [null, null]).toList$0(0);
      this.vertexTangents = H.setRuntimeTypeInfo(new H.MappedListIterable(other.vertexTangents, new S.Face_setFrom_closure1()), [null, null]).toList$0(0);
      return this;
    },
    Face$4: function(indices, normalOrVertexNormals, colorOrVertexColors, materialIndex) {
      this.normal = new T.Vector3(new Float32Array(H._checkLength(3)));
      this.vertexNormals = !!J.getInterceptor(normalOrVertexNormals).$isList ? normalOrVertexNormals : [];
      this.color = S.Color$(null);
      this.vertexColors = [];
      this.vertexTangents = [];
      this.centroid = new T.Vector3(new Float32Array(H._checkLength(3)));
    }
  },
  Face_setFrom_closure: {
    "^": "Closure:18;",
    call$1: function(v) {
      return J.clone$0$x(v);
    }
  },
  Face_setFrom_closure0: {
    "^": "Closure:18;",
    call$1: function(v) {
      return J.clone$0$x(v);
    }
  },
  Face_setFrom_closure1: {
    "^": "Closure:18;",
    call$1: function(v) {
      return J.clone$0$x(v);
    }
  },
  Face3: {
    "^": "Face;indices,normal,vertexNormals,vertexColors,vertexTangents,color,materialIndex,centroid",
    get$a: function(_) {
      return this.indices[0];
    },
    get$b: function(_) {
      return this.indices[1];
    },
    get$c: function(_) {
      return this.indices[2];
    },
    clone$0: function(_) {
      var t1, t2;
      t1 = this.indices;
      t1 = [t1[0], t1[1], t1[2]];
      t2 = new S.Face3(t1, null, null, null, null, null, null, null);
      t2.Face$4(t1, null, null, null);
      return t2.setFrom$1(this);
    }
  },
  Frustum: {
    "^": "Object;planes",
    setFromMatrix$1: function(m) {
      var me0, me1, me2, me3, me4, me5, me6, me7, me8, me9, me10, me11, me12, me13, me14, me15, t1, i, t2, t3, t4, t5, divisor;
      me0 = m.$index(0, 0);
      me1 = m.$index(0, 1);
      me2 = m.$index(0, 2);
      me3 = m.$index(0, 3);
      me4 = m.$index(0, 4);
      me5 = m.$index(0, 5);
      me6 = m.$index(0, 6);
      me7 = m.$index(0, 7);
      me8 = m.$index(0, 8);
      me9 = m.$index(0, 9);
      me10 = m.$index(0, 10);
      me11 = m.$index(0, 11);
      me12 = m.$index(0, 12);
      me13 = m.$index(0, 13);
      me14 = m.$index(0, 14);
      me15 = m.$index(0, 15);
      t1 = this.planes;
      t1[0].setValues$4(me3 - me0, me7 - me4, me11 - me8, me15 - me12);
      t1[1].setValues$4(me3 + me0, me7 + me4, me11 + me8, me15 + me12);
      t1[2].setValues$4(me3 + me1, me7 + me5, me11 + me9, me15 + me13);
      t1[3].setValues$4(me3 - me1, me7 - me5, me11 - me9, me15 - me13);
      t1[4].setValues$4(me3 - me2, me7 - me6, me11 - me10, me15 - me14);
      t1[5].setValues$4(me3 + me2, me7 + me6, me11 + me10, me15 + me14);
      for (i = 0; i < 6; ++i) {
        t2 = t1[i].storage;
        t3 = t2[0];
        t4 = t2[1];
        t5 = t2[2];
        divisor = Math.sqrt(t3 * t3 + t4 * t4 + t5 * t5);
        if (divisor > 0) {
          t3 = 1 / divisor;
          t2[0] = t2[0] * t3;
          t2[1] = t2[1] * t3;
          t2[2] = t2[2] * t3;
          t2[3] = t2[3] * t3;
        }
      }
    },
    contains$1: function(_, object) {
      var m, t1, radius, i;
      m = object.get$matrixWorld();
      t1 = object.geometry.boundingSphere.radius;
      if (typeof t1 !== "number")
        return t1.$negate();
      radius = -t1 * Math.sqrt(H.checkNum(P.max(m.$index(0, 0) * m.$index(0, 0) + m.$index(0, 1) * m.$index(0, 1) + m.$index(0, 2) * m.$index(0, 2), P.max(m.$index(0, 4) * m.$index(0, 4) + m.$index(0, 5) * m.$index(0, 5) + m.$index(0, 6) * m.$index(0, 6), m.$index(0, 8) * m.$index(0, 8) + m.$index(0, 9) * m.$index(0, 9) + m.$index(0, 10) * m.$index(0, 10)))));
      for (t1 = this.planes, i = 0; i < 6; ++i)
        if (t1[i].storage[0] * m.$index(0, 12) + t1[i].storage[1] * m.$index(0, 13) + t1[i].storage[2] * m.$index(0, 14) + t1[i].storage[3] <= radius)
          return false;
      return true;
    },
    static: {Frustum$: function() {
        var t1, t2, t3, t4, t5, t6;
        t1 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t1.setValues$4(0, 0, 0, 1);
        t2 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t2.setValues$4(0, 0, 0, 1);
        t3 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t3.setValues$4(0, 0, 0, 1);
        t4 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t4.setValues$4(0, 0, 0, 1);
        t5 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t5.setValues$4(0, 0, 0, 1);
        t6 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t6.setValues$4(0, 0, 0, 1);
        return new S.Frustum([t1, t2, t3, t4, t5, t6]);
      }}
  },
  Geometry: {
    "^": "Object_WebGLGeometry;name,vertices,colors,normals,materials,faces,faceUvs,faceVertexUvs,morphTargets,morphColors,morphNormals,skinWeights,skinIndices,lineDistances,__tmpVertices,boundingBox,boundingSphere,hasTangents,_dynamic,bones,animation,verticesNeedUpdate,colorsNeedUpdate,elementsNeedUpdate,uvsNeedUpdate,normalsNeedUpdate,tangentsNeedUpdate,buffersNeedUpdate,morphTargetsNeedUpdate,lineDistancesNeedUpdate,__data,WebGLGeometry_id,WebGLGeometry_verticesCount,WebGLGeometry_faces3,WebGLGeometry_faces4,WebGLGeometry_numMorphTargets,WebGLGeometry_numMorphNormals,WebGLGeometry_materialIndex,WebGLGeometry_geometryGroups,WebGLGeometry_geometryGroupsList,WebGLGeometry___webglVertexBuffer,WebGLGeometry___webglNormalBuffer,WebGLGeometry___webglTangentBuffer,WebGLGeometry___webglColorBuffer,WebGLGeometry___webglLineDistanceBuffer,WebGLGeometry___webglUVBuffer,WebGLGeometry___webglUV2Buffer,WebGLGeometry___webglSkinVertexABuffer,WebGLGeometry___webglSkinVertexBBuffer,WebGLGeometry___webglSkinIndicesBuffer,WebGLGeometry___webglSkinWeightsBuffer,WebGLGeometry___webglFaceBuffer,WebGLGeometry___webglLineBuffer,WebGLGeometry___webglMorphTargetsBuffers,WebGLGeometry___webglMorphNormalsBuffers,WebGLGeometry___webglInit,WebGLGeometry___inittedArrays,WebGLGeometry___vertexArray,WebGLGeometry___normalArray,WebGLGeometry___tangentArray,WebGLGeometry___colorArray,WebGLGeometry___lineDistanceArray,WebGLGeometry___uvArray,WebGLGeometry___uv2Array,WebGLGeometry___skinVertexAArray,WebGLGeometry___skinVertexBArray,WebGLGeometry___skinIndexArray,WebGLGeometry___skinWeightArray,WebGLGeometry___faceArray,WebGLGeometry___lineArray,WebGLGeometry___morphTargetsArrays,WebGLGeometry___morphNormalsArrays,WebGLGeometry___webglFaceCount,WebGLGeometry___webglLineCount,WebGLGeometry___webglParticleCount,WebGLGeometry___webglVertexCount,WebGLGeometry___sortArray,WebGLGeometry___webglCustomAttributesList",
    computeCentroids$0: function() {
      C.JSArray_methods.forEach$1(this.faces, new S.Geometry_computeCentroids_closure(this));
    },
    computeFaceNormals$0: function() {
      C.JSArray_methods.forEach$1(this.faces, new S.Geometry_computeFaceNormals_closure(this));
    },
    computeBoundingSphere$0: function() {
      var t1 = {};
      t1.radiusSq_0 = null;
      this.boundingSphere = new S.BoundingSphere(Math.sqrt(H.checkNum(C.JSArray_methods.fold$2(this.vertices, 0, new S.Geometry_computeBoundingSphere_closure(t1)))), null);
    },
    clone$0: function(_) {
    },
    get$_data: function() {
      var t1 = this.__data;
      if (t1 == null) {
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        this.__data = t1;
      }
      return t1;
    },
    $index: function(_, key) {
      return this.get$_data().$index(0, key);
    },
    $indexSet: function(_, key, value) {
      this.get$_data().$indexSet(0, key, value);
      return value;
    },
    Geometry$0: function() {
      var t1 = $.GeometryCount;
      $.GeometryCount = t1 + 1;
      this.set$id(0, t1);
    },
    static: {Geometry$: function() {
        var t1 = new S.Geometry("", H.setRuntimeTypeInfo([], [T.Vector3]), [], [], [], [], [[]], [[]], [], [], [], [], [], [], null, null, null, false, false, null, null, false, false, false, false, false, false, false, false, false, null, null, null, null, null, null, null, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.Geometry$0();
        return t1;
      }}
  },
  Object_WebGLGeometry: {
    "^": "Object+WebGLGeometry;id:WebGLGeometry_id*,faces3:WebGLGeometry_faces3<,geometryGroups:WebGLGeometry_geometryGroups@,geometryGroupsList:WebGLGeometry_geometryGroupsList@,__webglVertexBuffer:WebGLGeometry___webglVertexBuffer@,__webglNormalBuffer:WebGLGeometry___webglNormalBuffer?,__webglTangentBuffer:WebGLGeometry___webglTangentBuffer?,__webglColorBuffer:WebGLGeometry___webglColorBuffer@,__webglLineDistanceBuffer:WebGLGeometry___webglLineDistanceBuffer@,__webglFaceBuffer:WebGLGeometry___webglFaceBuffer<,__webglLineBuffer:WebGLGeometry___webglLineBuffer<,__webglMorphTargetsBuffers:WebGLGeometry___webglMorphTargetsBuffers<,__webglInit:WebGLGeometry___webglInit@,__inittedArrays:WebGLGeometry___inittedArrays<,__vertexArray:WebGLGeometry___vertexArray@,__colorArray:WebGLGeometry___colorArray@,__lineDistanceArray:WebGLGeometry___lineDistanceArray@,__webglFaceCount:WebGLGeometry___webglFaceCount<,__webglLineCount:WebGLGeometry___webglLineCount@,__webglCustomAttributesList:WebGLGeometry___webglCustomAttributesList<"
  },
  Geometry_computeCentroids_closure: {
    "^": "Closure:19;this_0",
    call$1: function(face) {
      var t1, t2, t3, t4;
      face.get$centroid().setValues$3(0, 0, 0);
      C.JSArray_methods.forEach$1(face.indices, new S.Geometry_computeCentroids__closure(this.this_0, face));
      t1 = face.centroid.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t4.setValues$3(t2 * 0.3333333333333333, t3 * 0.3333333333333333, t1 * 0.3333333333333333);
      face.centroid = t4;
    }
  },
  Geometry_computeCentroids__closure: {
    "^": "Closure:2;this_1,face_2",
    call$1: function(idx) {
      var t1, t2;
      t1 = this.face_2.centroid;
      t2 = this.this_1.vertices;
      if (idx >>> 0 !== idx || idx >= t2.length)
        return H.ioore(t2, idx);
      t1.add$1(0, t2[idx]);
    }
  },
  Geometry_computeFaceNormals_closure: {
    "^": "Closure:2;this_0",
    call$1: function(face) {
      var t1, t2, t3, t4, vA, vB, cb;
      t1 = this.this_0;
      t2 = t1.vertices;
      t3 = J.getInterceptor$x(face);
      t4 = t3.get$a(face);
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        return H.ioore(t2, t4);
      vA = t2[t4];
      t4 = t1.vertices;
      t2 = t3.get$b(face);
      if (t2 >>> 0 !== t2 || t2 >= t4.length)
        return H.ioore(t4, t2);
      vB = t4[t2];
      t1 = t1.vertices;
      t3 = t3.get$c(face);
      if (t3 >>> 0 !== t3 || t3 >= t1.length)
        return H.ioore(t1, t3);
      cb = J.$sub$n(t1[t3], vB).cross$1(J.$sub$n(vA, vB));
      J.normalize$0$x(cb);
      face.set$normal(cb);
    }
  },
  Geometry_computeBoundingSphere_closure: {
    "^": "Closure:20;box_0",
    call$2: function(curMaxRadiusSq, vertex) {
      var radiusSq, t1;
      radiusSq = vertex.get$length2();
      this.box_0.radiusSq_0 = radiusSq;
      if (typeof curMaxRadiusSq !== "number")
        return H.iae(curMaxRadiusSq);
      if (radiusSq > curMaxRadiusSq)
        t1 = radiusSq;
      else
        t1 = curMaxRadiusSq;
      return t1;
    }
  },
  BoundingSphere: {
    "^": "Object;radius,center"
  },
  Object3D: {
    "^": "Object;id*,name,properties,parent*,children,up,position>,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld@,matrixRotationWorld,matrixAutoUpdate<,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible>,castShadow<,receiveShadow,frustumCulled,_vector,customDepthMaterial,geometry,material<,__webglInit,__webglActive,immediateRenderCallback,_modelViewMatrix,_normalMatrix,count,hasPositions,hasNormals,hasUvs,hasColors,positionArray,normalArray,uvArray,colorArray,__webglVertexBuffer@,__webglNormalBuffer?,__webglUVBuffer,__webglColorBuffer,__webglMorphTargetInfluences",
    add$1: function(_, object) {
      var t1, scene, scene0;
      t1 = J.getInterceptor(object);
      if (t1.$eq(object, this)) {
        P.print("THREE.Object3D.add: An object can't be added as a child of itself.");
        return;
      }
      if (t1.get$parent(object) != null)
        J.remove$1$ax(t1.get$parent(object), object);
      t1.set$parent(object, this);
      this.children.push(object);
      for (scene = this; scene0 = scene.parent, scene0 != null; scene = scene0)
        ;
      if (!!scene.$isScene)
        scene.addObject$1(object);
    },
    remove$1: function(_, object) {
      var t1, index, obj, obj0;
      t1 = this.children;
      index = C.JSArray_methods.indexOf$1(t1, object);
      if (index !== -1) {
        J.set$parent$x(object, null);
        C.JSArray_methods.removeAt$1(t1, index);
        for (obj = this; obj0 = obj.parent, obj0 != null; obj = obj0)
          ;
        if (!!obj.$isScene)
          obj.removeObject$1(object);
      }
    },
    updateMatrix$0: function() {
      var t1, t2, x, y, z, a, b, c, d, e, f, t3, ce, t4, cf, de, df, t5, af, be, bf, ad, bc, bd, sx, sy, sz;
      t1 = this.matrix;
      if (this.useQuaternion)
        S.setRotationFromQuaternion(t1, this.quaternion);
      else {
        t2 = this.rotation.storage;
        x = t2[0];
        y = t2[1];
        z = t2[2];
        a = Math.cos(H.checkNum(x));
        b = Math.sin(H.checkNum(x));
        c = Math.cos(H.checkNum(y));
        d = Math.sin(H.checkNum(y));
        e = Math.cos(H.checkNum(z));
        f = Math.sin(H.checkNum(z));
        t2 = a * e;
        t3 = t1.storage;
        ce = c * e;
        t4 = a * c;
        switch (this.eulerOrder) {
          case "YXZ":
            cf = c * f;
            de = d * e;
            df = d * f;
            t3[0] = ce + df * b;
            t3[4] = de * b - cf;
            t3[8] = a * d;
            t3[1] = a * f;
            t3[5] = t2;
            t3[9] = -b;
            t3[2] = cf * b - de;
            t3[6] = df + ce * b;
            t3[10] = t4;
            break;
          case "ZXY":
            cf = c * f;
            de = d * e;
            df = d * f;
            t3[0] = ce - df * b;
            t5 = -a;
            t3[4] = t5 * f;
            t3[8] = de + cf * b;
            t3[1] = cf + de * b;
            t3[5] = t2;
            t3[9] = df - ce * b;
            t3[2] = t5 * d;
            t3[6] = b;
            t3[10] = t4;
            break;
          case "ZYX":
            af = a * f;
            be = b * e;
            bf = b * f;
            t3[0] = ce;
            t3[4] = be * d - af;
            t3[8] = t2 * d + bf;
            t3[1] = c * f;
            t3[5] = bf * d + t2;
            t3[9] = af * d - be;
            t3[2] = -d;
            t3[6] = b * c;
            t3[10] = t4;
            break;
          case "YZX":
            ad = a * d;
            bc = b * c;
            bd = b * d;
            t3[0] = ce;
            t3[4] = bd - t4 * f;
            t3[8] = bc * f + ad;
            t3[1] = f;
            t3[5] = t2;
            t3[9] = -b * e;
            t3[2] = -d * e;
            t3[6] = ad * f + bc;
            t3[10] = t4 - bd * f;
            break;
          case "XZY":
            ad = a * d;
            bc = b * c;
            bd = b * d;
            t3[0] = ce;
            t3[4] = -f;
            t3[8] = d * e;
            t3[1] = t4 * f + bd;
            t3[5] = t2;
            t3[9] = ad * f - bc;
            t3[2] = bc * f - ad;
            t3[6] = b * e;
            t3[10] = bd * f + t4;
            break;
          default:
            af = a * f;
            be = b * e;
            bf = b * f;
            t3[0] = ce;
            t3[4] = -c * f;
            t3[8] = d;
            t3[1] = af + be * d;
            t3[5] = t2 - bf * d;
            t3[9] = -b * c;
            t3[2] = bf - t2 * d;
            t3[6] = be + af * d;
            t3[10] = t4;
            break;
        }
      }
      t2 = this.get$position(this).storage;
      z = t2[2];
      y = t2[1];
      x = t2[0];
      t1 = t1.storage;
      t1[14] = z;
      t1[13] = y;
      t1[12] = x;
      t2 = this.scale.storage;
      sx = t2[0];
      if (sx !== 1 || t2[1] !== 1 || t2[2] !== 1) {
        sy = t2[1];
        sz = t2[2];
        t1[0] = t1[0] * sx;
        t1[1] = t1[1] * sx;
        t1[2] = t1[2] * sx;
        t1[3] = t1[3] * sx;
        t1[4] = t1[4] * sy;
        t1[5] = t1[5] * sy;
        t1[6] = t1[6] * sy;
        t1[7] = t1[7] * sy;
        t1[8] = t1[8] * sz;
        t1[9] = t1[9] * sz;
        t1[10] = t1[10] * sz;
        t1[11] = t1[11] * sz;
        t1[12] = t1[12];
        t1[13] = t1[13];
        t1[14] = t1[14];
        t1[15] = t1[15];
        this.boundRadiusScale = P.max(t2[0], P.max(t2[1], t2[2]));
      }
      this.matrixWorldNeedsUpdate = true;
    },
    updateMatrixWorld$1$force: function(force) {
      var t1, t2, t3;
      t1 = {};
      t1.force_0 = force;
      if (this.get$matrixAutoUpdate())
        this.updateMatrix$0();
      if (this.matrixWorldNeedsUpdate || t1.force_0) {
        t2 = this.parent;
        t3 = this.matrix;
        if (t2 != null)
          this.set$matrixWorld(t2.get$matrixWorld().$mul(0, t3));
        else {
          t2 = new T.Matrix4(new Float32Array(H._checkLength(16)));
          t2.setFrom$1(t3);
          this.set$matrixWorld(t2);
        }
        this.matrixWorldNeedsUpdate = false;
        t1.force_0 = true;
      }
      C.JSArray_methods.forEach$1(this.children, new S.Object3D_updateMatrixWorld_closure(t1));
    },
    updateMatrixWorld$0: function() {
      return this.updateMatrixWorld$1$force(false);
    },
    clone$0: function(_) {
    },
    static: {Object3D$: function() {
        var t1, t2, t3, t4, t5, t6, t7, t8;
        t1 = $.Object3DCount;
        $.Object3DCount = t1 + 1;
        t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t2.setValues$3(0, 1, 0);
        t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t3.setValues$3(0, 0, 0);
        t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t4.setValues$3(0, 0, 0);
        t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t5.setValues$3(1, 1, 1);
        t6 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t6.setIdentity$0();
        t7 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t7.setIdentity$0();
        t8 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t8.setIdentity$0();
        return new S.Object3D(t1, "", P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, [], t2, t3, t4, t5, "XYZ", null, null, null, true, null, t6, t7, t8, true, true, T.Quaternion$identity(), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(H._checkLength(3))), null, null, null, false, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
      }}
  },
  Object3D_updateMatrixWorld_closure: {
    "^": "Closure:2;box_0",
    call$1: function(c) {
      return c.updateMatrixWorld$1$force(this.box_0.force_0);
    }
  },
  Projector: {
    "^": "Object;_objectPool,_vertexPool,_face4Pool,_face3Pool,_linePool,_particlePool,_objectCount,_vertexCount,_face3Count,_face4Count,_lineCount,_particleCount,_object,_vertex,_line,_particle,_vector3,_vector4,_clippedVertex1PositionScreen,_clippedVertex2PositionScreen,_renderData,_viewProjectionMatrix,_modelViewProjectionMatrix,_frustum",
    unprojectVector$2: function(vector, camera) {
      var t1 = camera.projectionMatrixInverse;
      t1.copyInverse$1(camera.projectionMatrix);
      t1 = camera.matrixWorld.$mul(0, t1);
      this._viewProjectionMatrix = t1;
      return vector.applyProjection$1(t1);
    },
    static: {Projector$: function() {
        var t1, t2, t3, t4, t5, t6, t7;
        t1 = new Float32Array(H._checkLength(3));
        t2 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t2.setValues$4(0, 0, 0, 1);
        t3 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t3.setIdentity$0();
        t4 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t4.setIdentity$0();
        t5 = S.Frustum$();
        t6 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t6.setValues$4(0, 0, 0, 1);
        t7 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t7.setValues$4(0, 0, 0, 1);
        return new S.Projector([], [], [], [], [], [], null, null, null, null, null, null, null, null, null, null, new T.Vector3(t1), t2, t6, t7, new S.ProjectorRenderData([], [], [], []), t3, t4, t5);
      }}
  },
  ProjectorRenderData: {
    "^": "Object;objects,sprites,lights,elements"
  },
  UV: {
    "^": "Object;u<,v",
    clone$0: function(_) {
      return new S.UV(this.u, this.v);
    }
  },
  calcEulerFromRotationMatrix_closure: {
    "^": "Closure:2;",
    call$1: function(x) {
      return P.min(P.max(x, -1), 1);
    }
  },
  DirectionalLight: {
    "^": "ShadowCaster;position:DirectionalLight_position>,target>,intensity<,distance,shadowCameraLeft,shadowCameraRight,shadowCameraTop,shadowCameraBottom,shadowCascade,shadowCascadeOffset,shadowCascadeCount<,shadowCascadeBias,shadowCascadeWidth,shadowCascadeHeight,shadowCascadeNearZ,shadowCascadeFarZ,shadowCascadeArray,ShadowCaster_castShadow,onlyShadow,shadowCameraNear,shadowCameraFar,shadowCameraFov,shadowCameraVisible,shadowBias,shadowDarkness,shadowMapWidth,shadowMapHeight,shadowMap,shadowMapSize,shadowCamera,shadowMatrix,cameraHelper,color,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,geometry,material,__webglInit,__webglActive,immediateRenderCallback,_modelViewMatrix,_normalMatrix,count,hasPositions,hasNormals,hasUvs,hasColors,positionArray,normalArray,uvArray,colorArray,__webglVertexBuffer,__webglNormalBuffer,__webglUVBuffer,__webglColorBuffer,__webglMorphTargetInfluences",
    DirectionalLight$3: function(hex, intensity, distance) {
      var t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(0, 1, 0);
      this.DirectionalLight_position = t1;
      this.target = S.Object3D$();
      this.shadowCameraLeft = -500;
      this.shadowCameraRight = 500;
      this.shadowCameraTop = 500;
      this.shadowCameraBottom = -500;
      this.shadowCascade = false;
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(0, 0, -1000);
      this.shadowCascadeOffset = t1;
      this.shadowCascadeCount = 2;
      this.shadowCascadeBias = [0, 0, 0];
      this.shadowCascadeWidth = [512, 512, 512];
      this.shadowCascadeHeight = [512, 512, 512];
      this.shadowCascadeNearZ = [-1, 0.99, 0.998];
      this.shadowCascadeFarZ = [0.99, 0.998, 1];
      this.shadowCascadeArray = [];
    }
  },
  Light: {
    "^": "Object3D;color>"
  },
  ShadowCaster: {
    "^": "Light;castShadow:ShadowCaster_castShadow<,onlyShadow<,shadowMap<"
  },
  LineBasicMaterial: {
    "^": "Material;linewidth,linecap,linejoin,name,id,side,color,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,fog,vertexColors,_program,_fragmentShader,_vertexShader,_uniforms,_uniformsList,shadowPass"
  },
  UVMapping: {
    "^": "Object;"
  },
  Material: {
    "^": "Object;id*,color>,visible>,needsUpdate<"
  },
  MeshBasicMaterial: {
    "^": "Material;map,lightMap,specularMap,envMap,combine,reflectivity,refractionRatio,shading<,wireframe<,wireframeLinewidth<,wireframeLinecap,wireframeLinejoin,skinning<,morphTargets<,morphNormals<,numSupportedMorphTargets@,numSupportedMorphNormals@,name,id,side,color,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,fog,vertexColors,_program,_fragmentShader,_vertexShader,_uniforms,_uniformsList,shadowPass",
    map$1: function($receiver, arg0) {
      return this.map.call$1(arg0);
    },
    $isWireframe: 1,
    $isMorphing: 1,
    $isSkinning: 1,
    $isEnvironmentMapping: 1,
    $isTextureMapping: 1
  },
  ShaderMaterial: {
    "^": "Material;shading,wireframe<,wireframeLinewidth<,wireframeLinecap,wireframeLinejoin,lights,skinning<,morphTargets<,morphNormals<,numSupportedMorphTargets@,numSupportedMorphNormals@,attributes,defines,name,id,side,color,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,fog,vertexColors,_program,_fragmentShader,_vertexShader,_uniforms,_uniformsList,shadowPass",
    ShaderMaterial$29$alphaTest$attributes$blendDst$blendEquation$blendSrc$blending$depthTest$depthWrite$fog$fragmentShader$lights$morphNormals$morphTargets$name$opacity$overdraw$polygonOffset$polygonOffsetFactor$polygonOffsetUnits$shading$side$skinning$transparent$uniforms$vertexColors$vertexShader$visible$wireframe$wireframeLinewidth: function(alphaTest, attributes, blendDst, blendEquation, blendSrc, blending, depthTest, depthWrite, fog, fragmentShader, lights, morphNormals, morphTargets, $name, opacity, overdraw, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, shading, side, skinning, transparent, uniforms, vertexColors, vertexShader, visible, wireframe, wireframeLinewidth) {
      this._uniforms = uniforms;
      this._fragmentShader = fragmentShader;
      this._vertexShader = vertexShader;
    },
    $isWireframe: 1,
    $isSkinning: 1,
    $isMorphing: 1,
    static: {ShaderMaterial$: function(alphaTest, attributes, blendDst, blendEquation, blendSrc, blending, depthTest, depthWrite, fog, fragmentShader, lights, morphNormals, morphTargets, $name, opacity, overdraw, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, shading, side, skinning, transparent, uniforms, vertexColors, vertexShader, visible, wireframe, wireframeLinewidth) {
        var t1 = $.MaterialCount;
        $.MaterialCount = t1 + 1;
        t1 = new S.ShaderMaterial(shading, wireframe, wireframeLinewidth, null, null, lights, skinning, morphTargets, morphNormals, 0, 0, attributes, P.LinkedHashMap_LinkedHashMap$_empty(null, null), $name, t1, side, S.Color$(null), opacity, blending, blendSrc, blendDst, blendEquation, alphaTest, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, transparent, depthTest, depthWrite, overdraw, visible, true, fog, vertexColors, null, null, null, null, null, false);
        t1.ShaderMaterial$29$alphaTest$attributes$blendDst$blendEquation$blendSrc$blending$depthTest$depthWrite$fog$fragmentShader$lights$morphNormals$morphTargets$name$opacity$overdraw$polygonOffset$polygonOffsetFactor$polygonOffsetUnits$shading$side$skinning$transparent$uniforms$vertexColors$vertexShader$visible$wireframe$wireframeLinewidth(alphaTest, attributes, blendDst, blendEquation, blendSrc, blending, depthTest, depthWrite, fog, fragmentShader, lights, morphNormals, morphTargets, $name, opacity, overdraw, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, shading, side, skinning, transparent, uniforms, vertexColors, vertexShader, visible, wireframe, wireframeLinewidth);
        return t1;
      }}
  },
  Line: {
    "^": "Object3D;material:Line_material<,type>,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,geometry,material,__webglInit,__webglActive,immediateRenderCallback,_modelViewMatrix,_normalMatrix,count,hasPositions,hasNormals,hasUvs,hasColors,positionArray,normalArray,uvArray,colorArray,__webglVertexBuffer,__webglNormalBuffer,__webglUVBuffer,__webglColorBuffer,__webglMorphTargetInfluences",
    Line$3: function(geometry, material, type) {
      if (geometry.boundingSphere == null)
        geometry.computeBoundingSphere$0();
      this.geometry = geometry;
    },
    static: {Line$: function(geometry, material, type) {
        var t1, t2, t3, t4, t5, t6, t7, t8;
        t1 = $.Object3DCount;
        $.Object3DCount = t1 + 1;
        t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t2.setValues$3(0, 1, 0);
        t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t3.setValues$3(0, 0, 0);
        t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t4.setValues$3(0, 0, 0);
        t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t5.setValues$3(1, 1, 1);
        t6 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t6.setIdentity$0();
        t7 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t7.setIdentity$0();
        t8 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t8.setIdentity$0();
        t8 = new S.Line(material, type, t1, "", P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, [], t2, t3, t4, t5, "XYZ", null, null, null, true, null, t6, t7, t8, true, true, T.Quaternion$identity(), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(H._checkLength(3))), null, null, null, false, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t8.Line$3(geometry, material, type);
        return t8;
      }}
  },
  Mesh: {
    "^": "Object3D;material:Mesh_material<,morphTargetBase<,morphTargetForcedOrder,morphTargetInfluences,_morphTargetDictionary,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,geometry,material,__webglInit,__webglActive,immediateRenderCallback,_modelViewMatrix,_normalMatrix,count,hasPositions,hasNormals,hasUvs,hasColors,positionArray,normalArray,uvArray,colorArray,__webglVertexBuffer,__webglNormalBuffer,__webglUVBuffer,__webglColorBuffer,__webglMorphTargetInfluences",
    Mesh$2: function(geometry, material) {
      if (geometry.boundingSphere == null)
        geometry.computeBoundingSphere$0();
      this.boundRadius = geometry.boundingSphere.radius;
      this.geometry = geometry;
    },
    static: {Mesh$: function(geometry, material) {
        var t1, t2, t3, t4, t5, t6, t7, t8;
        t1 = $.Object3DCount;
        $.Object3DCount = t1 + 1;
        t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t2.setValues$3(0, 1, 0);
        t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t3.setValues$3(0, 0, 0);
        t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t4.setValues$3(0, 0, 0);
        t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t5.setValues$3(1, 1, 1);
        t6 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t6.setIdentity$0();
        t7 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t7.setIdentity$0();
        t8 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t8.setIdentity$0();
        t8 = new S.Mesh(material, 0, null, null, null, t1, "", P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, [], t2, t3, t4, t5, "XYZ", null, null, null, true, null, t6, t7, t8, true, true, T.Quaternion$identity(), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(H._checkLength(3))), null, null, null, false, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t8.Mesh$2(geometry, material);
        return t8;
      }}
  },
  WebGLRenderTarget: {
    "^": "Texture;width,height,offset:WebGLRenderTarget_offset*,repeat:WebGLRenderTarget_repeat*,depthBuffer,stencilBuffer,generateMipmaps:WebGLRenderTarget_generateMipmaps@,shareDepthFrom,__webglFramebuffer,__webglRenderbuffer,id,image,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,offset,repeat,generateMipmaps,premultiplyAlpha,needsUpdate,onUpdate,flipY,unpackAlignment,mipmaps,__webglTexture,__data",
    clone$0: function(_) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
      t1 = this.width;
      t2 = this.height;
      t3 = this.wrapS;
      t4 = this.wrapT;
      t5 = this.magFilter;
      t6 = this.anisotropy;
      t7 = this.minFilter;
      t8 = this.WebGLRenderTarget_offset;
      t8.toString;
      t9 = new T.Vector2(new Float32Array(H._checkLength(2)));
      t9.setFrom$1(t8);
      t8 = this.WebGLRenderTarget_repeat;
      t8.toString;
      t10 = new T.Vector2(new Float32Array(H._checkLength(2)));
      t10.setFrom$1(t8);
      t8 = this.format;
      t11 = this.type;
      t10 = new S.WebGLRenderTarget(t1, t2, t9, t10, this.depthBuffer, this.stencilBuffer, this.WebGLRenderTarget_generateMipmaps, this.shareDepthFrom, null, null, null, null, null, t3, t4, t5, t7, t8, t11, t6, null, null, null, null, null, null, null, 4, [], null, null);
      t10.Texture$9(null, null, t3, t4, t5, t7, t8, t11, t6);
      if (t10.WebGLRenderTarget_offset == null)
        t10.WebGLRenderTarget_offset = new T.Vector2(new Float32Array(H._checkLength(2)));
      if (t10.WebGLRenderTarget_repeat == null) {
        t1 = new Float32Array(H._checkLength(2));
        t1[0] = 1;
        t1[1] = 1;
        t10.WebGLRenderTarget_repeat = new T.Vector2(t1);
      }
      return t10;
    }
  },
  WebGLRenderer: {
    "^": "Object;canvas,_gl,precision,_clearColor,_clearAlpha,devicePixelRatio,alpha,premultipliedAlpha,antialias,stencil,preserveDrawingBuffer,autoClear,autoClearColor,autoClearDepth,autoClearStencil,sortObjects,autoUpdateObjects,autoUpdateScene,gammaInput,gammaOutput,physicallyBasedShading,shadowMapEnabled,shadowMapAutoUpdate,shadowMapDebug,shadowMapCascade,shadowMapType,shadowMapCullFrontFaces,maxMorphTargets,maxMorphNormals,autoScaleCubemaps,renderPluginsPre,renderPluginsPost,info,_programs,_programs_counter,_currentProgram,_currentFramebuffer,_currentMaterialId,_currentGeometryGroupHash,_currentCamera,_geometryGroupCounter,_usedTextureUnits,_enabledAttributes,_oldDoubleSided,_oldFlipSided,_oldBlending,_oldBlendEquation,_oldBlendSrc,_oldBlendDst,_oldDepthTest,_oldDepthWrite,_oldPolygonOffset,_oldPolygonOffsetFactor,_oldPolygonOffsetUnits,_oldLineWidth,_viewportX,_viewportY,_viewportWidth,_viewportHeight,_currentWidth,_currentHeight,_frustum,_projScreenMatrix,_projScreenMatrixPS,_vector3,_direction,_lights,_lightsNeedUpdate,_glExtensionTextureFloat,_glExtensionStandardDerivatives,_glExtensionTextureFilterAnisotropic,_glExtensionCompressedTextureS3TC,maxAnisotropy,supportsVertexTextures,supportsBoneTextures,shadowMapPlugin,maxTextures,maxVertexTextures,maxTextureSize,maxCubemapSize",
    clear$3: function(_, color, depth, stencil) {
      var bits = color ? 16384 : 0;
      if (depth)
        bits |= 256;
      if (stencil)
        bits |= 1024;
      J.clear$1$ax(this._gl, bits);
    },
    clear$0: function($receiver) {
      return this.clear$3($receiver, true, true, true);
    },
    createMeshBuffers$1: function(geometryGroup) {
      var t1, m;
      geometryGroup.set$__webglVertexBuffer(J.createBuffer$0$x(this._gl));
      geometryGroup.set$__webglNormalBuffer(J.createBuffer$0$x(this._gl));
      geometryGroup.set$__webglTangentBuffer(J.createBuffer$0$x(this._gl));
      geometryGroup.WebGLGeometry___webglColorBuffer = J.createBuffer$0$x(this._gl);
      geometryGroup.WebGLGeometry___webglUVBuffer = J.createBuffer$0$x(this._gl);
      geometryGroup.WebGLGeometry___webglUV2Buffer = J.createBuffer$0$x(this._gl);
      geometryGroup.WebGLGeometry___webglSkinIndicesBuffer = J.createBuffer$0$x(this._gl);
      geometryGroup.WebGLGeometry___webglSkinWeightsBuffer = J.createBuffer$0$x(this._gl);
      geometryGroup.WebGLGeometry___webglFaceBuffer = J.createBuffer$0$x(this._gl);
      geometryGroup.WebGLGeometry___webglLineBuffer = J.createBuffer$0$x(this._gl);
      t1 = geometryGroup.WebGLGeometry_numMorphTargets;
      if (t1 != null) {
        geometryGroup.WebGLGeometry___webglMorphTargetsBuffers = [];
        if (typeof t1 !== "number")
          return H.iae(t1);
        m = 0;
        for (; m < t1; ++m)
          geometryGroup.WebGLGeometry___webglMorphTargetsBuffers.push(J.createBuffer$0$x(this._gl));
      }
      t1 = geometryGroup.WebGLGeometry_numMorphNormals;
      if (t1 != null) {
        geometryGroup.WebGLGeometry___webglMorphNormalsBuffers = [];
        if (typeof t1 !== "number")
          return H.iae(t1);
        m = 0;
        for (; m < t1; ++m)
          geometryGroup.WebGLGeometry___webglMorphNormalsBuffers.push(J.createBuffer$0$x(this._gl));
      }
      ++this.info.memory.geometries;
    },
    deallocateMaterial$1: function(material) {
      var il, i;
      if (material._program == null)
        return;
      material._program = null;
      for (il = this._programs.length, i = 0; i < il; ++i)
        ;
    },
    initCustomAttributes$2: function(geometry, object) {
    },
    initMeshBuffers$2: function(geometryGroup, object) {
      var geometry, faces3, faces4, t1, t2, nvertices, material, uvType, normalType, t3, t4, m, t5;
      geometry = object.geometry;
      faces3 = geometryGroup.get$faces3();
      faces4 = geometryGroup.WebGLGeometry_faces4;
      t1 = faces3.length;
      t2 = faces4.length;
      nvertices = t1 * 3 + t2 * 4;
      material = object.Mesh_material;
      uvType = this.bufferGuessUVType$1(material);
      normalType = this.bufferGuessNormalType$1(material);
      t3 = nvertices * 3;
      geometryGroup.WebGLGeometry___vertexArray = new Float32Array(t3);
      if (normalType !== 0)
        geometryGroup.WebGLGeometry___normalArray = new Float32Array(t3);
      if (geometry.hasTangents)
        geometryGroup.WebGLGeometry___tangentArray = new Float32Array(nvertices * 4);
      if (material.vertexColors !== 0)
        geometryGroup.WebGLGeometry___colorArray = new Float32Array(t3);
      if (uvType) {
        geometry.faceUvs;
        geometryGroup.WebGLGeometry___uvArray = new Float32Array(nvertices * 2);
        geometry.faceVertexUvs;
      }
      object.geometry.skinWeights;
      t1 = (t1 + t2 * 2) * 3;
      geometryGroup.WebGLGeometry___faceArray = new Uint16Array(t1);
      t2 = nvertices * 2;
      geometryGroup.WebGLGeometry___lineArray = new Uint16Array(t2);
      t4 = geometryGroup.WebGLGeometry_numMorphTargets;
      if (t4 != null) {
        geometryGroup.WebGLGeometry___morphTargetsArrays = [];
        if (typeof t4 !== "number")
          return H.iae(t4);
        m = 0;
        for (; m < t4; ++m) {
          t5 = geometryGroup.WebGLGeometry___morphTargetsArrays;
          t5.push(new Float32Array(t3));
        }
      }
      t4 = geometryGroup.WebGLGeometry_numMorphNormals;
      if (t4 != null) {
        geometryGroup.WebGLGeometry___morphNormalsArrays = [];
        if (typeof t4 !== "number")
          return H.iae(t4);
        m = 0;
        for (; m < t4; ++m) {
          t5 = geometryGroup.WebGLGeometry___morphNormalsArrays;
          t5.push(new Float32Array(t3));
        }
      }
      geometryGroup.WebGLGeometry___webglFaceCount = t1;
      geometryGroup.WebGLGeometry___webglLineCount = t2;
      geometryGroup.WebGLGeometry___inittedArrays = true;
    },
    bufferGuessNormalType$1: function(material) {
      var t1;
      if (!!material.$isMeshBasicMaterial && true || false)
        return 0;
      material.get$shading();
      t1 = material.shading === 2;
      if (t1)
        return 2;
      else
        return 1;
    },
    bufferGuessUVType$1: function(material) {
      if (!!material.$isTextureMapping)
        ;
      if (!!material.$isEnvironmentMapping)
        ;
      return false;
    },
    setLineBuffers$2: function(geometry, hint) {
      var vertices, colors, lineDistances, vl, cl, vertexArray, colorArray, lineDistanceArray, dirtyVertices, dirtyColors, dirtyLineDistances, customAttributes, v, offset, vertex, t1, t2, t3, t4, c, color, d, il, i, ca, cal, value;
      vertices = geometry.vertices;
      colors = geometry.colors;
      lineDistances = geometry.lineDistances;
      vl = vertices.length;
      cl = colors.length;
      vertexArray = geometry.get$__vertexArray();
      colorArray = geometry.get$__colorArray();
      lineDistanceArray = geometry.get$__lineDistanceArray();
      dirtyVertices = geometry.verticesNeedUpdate;
      dirtyColors = geometry.colorsNeedUpdate;
      dirtyLineDistances = geometry.lineDistancesNeedUpdate;
      customAttributes = geometry.get$__webglCustomAttributesList();
      if (dirtyVertices) {
        for (v = 0, offset = null; v < vl; ++v) {
          if (v >= vertices.length)
            return H.ioore(vertices, v);
          vertex = vertices[v];
          offset = v * 3;
          t1 = J.getInterceptor$x(vertex);
          t2 = t1.get$x(vertex);
          t3 = vertexArray.length;
          if (offset >= t3)
            return H.ioore(vertexArray, offset);
          vertexArray[offset] = t2;
          t2 = offset + 1;
          t4 = t1.get$y(vertex);
          if (t2 >= t3)
            return H.ioore(vertexArray, t2);
          vertexArray[t2] = t4;
          t4 = offset + 2;
          t1 = t1.get$z(vertex);
          if (t4 >= t3)
            return H.ioore(vertexArray, t4);
          vertexArray[t4] = t1;
        }
        J.bindBuffer$2$x(this._gl, 34962, geometry.get$__webglVertexBuffer());
        J.bufferDataTyped$3$x(this._gl, 34962, vertexArray, hint);
      } else
        offset = null;
      if (dirtyColors) {
        for (t1 = colors.length, c = 0; c < cl; ++c) {
          if (c >= t1)
            return H.ioore(colors, c);
          color = colors[c];
          offset = c * 3;
          t2 = color._r;
          t3 = colorArray.length;
          if (offset >= t3)
            return H.ioore(colorArray, offset);
          colorArray[offset] = t2;
          t2 = offset + 1;
          t4 = color._g;
          if (t2 >= t3)
            return H.ioore(colorArray, t2);
          colorArray[t2] = t4;
          t4 = offset + 2;
          t2 = color._b;
          if (t4 >= t3)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t2;
        }
        J.bindBuffer$2$x(this._gl, 34962, geometry.get$__webglColorBuffer());
        J.bufferDataTyped$3$x(this._gl, 34962, colorArray, hint);
      }
      if (dirtyLineDistances) {
        for (d = 0; false; ++d) {
          if (d >= 0)
            return H.ioore(lineDistances, d);
          lineDistanceArray[d] = lineDistances[d];
        }
        J.bindBuffer$2$x(this._gl, 34962, geometry.get$__webglLineDistanceBuffer());
        J.bufferDataTyped$3$x(this._gl, 34962, lineDistanceArray, hint);
      }
      if (customAttributes != null) {
        il = customAttributes.length;
        for (i = 0, ca = null, cal = null, value = null; i < il; ++i) {
          if (i >= customAttributes.length)
            return H.ioore(customAttributes, i);
          customAttributes[i].get$needsUpdate();
        }
      }
    },
    setMeshBuffers$5: function(geometryGroup, object, hint, dispose, material) {
      var normalType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, t1, obj_uvs, morphTargets, morphNormals, fl, f, face, v1, v2, v3, offset, t2, t3, t4, v4, n1, n2, n3, n4, vk, vka, nka, chf, faceVertexNormals, offset_morphTarget, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, offset_color, vertexColors, faceColor, c1, c2, c3, c4, offset_tangent, vertexTangents, vn, offset_normal, vertexNormals, faceNormal, i, uvi, offset_uv, fi, uv, uv2i, offset_uv2, uv2, vertexIndex, offset_face, offset_line, il, offset_custom, offset_customSrc, value;
      if (geometryGroup.get$__inittedArrays() !== true)
        return;
      normalType = this.bufferGuessNormalType$1(material);
      uvType = this.bufferGuessUVType$1(material);
      needsSmoothNormals = normalType === 2;
      vertexArray = geometryGroup.WebGLGeometry___vertexArray;
      uvArray = geometryGroup.WebGLGeometry___uvArray;
      uv2Array = geometryGroup.WebGLGeometry___uv2Array;
      normalArray = geometryGroup.WebGLGeometry___normalArray;
      tangentArray = geometryGroup.WebGLGeometry___tangentArray;
      colorArray = geometryGroup.WebGLGeometry___colorArray;
      morphTargetsArrays = geometryGroup.WebGLGeometry___morphTargetsArrays;
      morphNormalsArrays = geometryGroup.WebGLGeometry___morphNormalsArrays;
      customAttributes = geometryGroup.WebGLGeometry___webglCustomAttributesList;
      faceArray = geometryGroup.WebGLGeometry___faceArray;
      lineArray = geometryGroup.WebGLGeometry___lineArray;
      geometry = object.geometry;
      dirtyVertices = geometry.verticesNeedUpdate;
      dirtyElements = geometry.elementsNeedUpdate;
      dirtyUvs = geometry.uvsNeedUpdate;
      dirtyNormals = geometry.normalsNeedUpdate;
      dirtyTangents = geometry.tangentsNeedUpdate;
      dirtyColors = geometry.colorsNeedUpdate;
      dirtyMorphTargets = geometry.morphTargetsNeedUpdate;
      vertices = geometry.vertices;
      chunk_faces3 = geometryGroup.WebGLGeometry_faces3;
      chunk_faces4 = geometryGroup.WebGLGeometry_faces4;
      obj_faces = geometry.faces;
      t1 = geometry.faceVertexUvs;
      obj_uvs = t1[0];
      morphTargets = geometry.morphTargets;
      morphNormals = geometry.morphNormals;
      if (dirtyVertices) {
        fl = chunk_faces3.length;
        for (f = 0, face = null, v1 = null, v2 = null, v3 = null, offset = 0; f < fl; ++f) {
          if (f >= chunk_faces3.length)
            return H.ioore(chunk_faces3, f);
          t1 = chunk_faces3[f];
          if (t1 >= obj_faces.length)
            return H.ioore(obj_faces, t1);
          face = obj_faces[t1];
          t1 = face.indices;
          t2 = t1[0];
          t3 = vertices.length;
          if (t2 >= t3)
            return H.ioore(vertices, t2);
          v1 = vertices[t2];
          t2 = t1[1];
          if (t2 >= t3)
            return H.ioore(vertices, t2);
          v2 = vertices[t2];
          t1 = t1[2];
          if (t1 >= t3)
            return H.ioore(vertices, t1);
          v3 = vertices[t1];
          t1 = J.getInterceptor$x(v1);
          t3 = t1.get$x(v1);
          t2 = vertexArray.length;
          if (offset >= t2)
            return H.ioore(vertexArray, offset);
          vertexArray[offset] = t3;
          t3 = offset + 1;
          t4 = t1.get$y(v1);
          if (t3 >= t2)
            return H.ioore(vertexArray, t3);
          vertexArray[t3] = t4;
          t4 = offset + 2;
          t1 = t1.get$z(v1);
          if (t4 >= t2)
            return H.ioore(vertexArray, t4);
          vertexArray[t4] = t1;
          t1 = offset + 3;
          t4 = J.getInterceptor$x(v2);
          t3 = t4.get$x(v2);
          if (t1 >= t2)
            return H.ioore(vertexArray, t1);
          vertexArray[t1] = t3;
          t3 = offset + 4;
          t1 = t4.get$y(v2);
          if (t3 >= t2)
            return H.ioore(vertexArray, t3);
          vertexArray[t3] = t1;
          t1 = offset + 5;
          t4 = t4.get$z(v2);
          if (t1 >= t2)
            return H.ioore(vertexArray, t1);
          vertexArray[t1] = t4;
          t4 = offset + 6;
          t1 = J.getInterceptor$x(v3);
          t3 = t1.get$x(v3);
          if (t4 >= t2)
            return H.ioore(vertexArray, t4);
          vertexArray[t4] = t3;
          t3 = offset + 7;
          t4 = t1.get$y(v3);
          if (t3 >= t2)
            return H.ioore(vertexArray, t3);
          vertexArray[t3] = t4;
          t4 = offset + 8;
          t1 = t1.get$z(v3);
          if (t4 >= t2)
            return H.ioore(vertexArray, t4);
          vertexArray[t4] = t1;
          offset += 9;
        }
        fl = chunk_faces4.length;
        for (f = 0, v4 = null; f < fl; ++f) {
          if (f >= chunk_faces4.length)
            return H.ioore(chunk_faces4, f);
          t1 = chunk_faces4[f];
          if (t1 >= obj_faces.length)
            return H.ioore(obj_faces, t1);
          face = obj_faces[t1];
          t1 = face.indices;
          t2 = t1[0];
          t3 = vertices.length;
          if (t2 >= t3)
            return H.ioore(vertices, t2);
          v1 = vertices[t2];
          t2 = t1[1];
          if (t2 >= t3)
            return H.ioore(vertices, t2);
          v2 = vertices[t2];
          t1 = t1[2];
          if (t1 >= t3)
            return H.ioore(vertices, t1);
          v3 = vertices[t1];
          t1 = face.get$d(face);
          if (t1 >>> 0 !== t1 || t1 >= vertices.length)
            return H.ioore(vertices, t1);
          v4 = vertices[t1];
          t1 = J.getInterceptor$x(v1);
          t3 = t1.get$x(v1);
          t2 = vertexArray.length;
          if (offset >= t2)
            return H.ioore(vertexArray, offset);
          vertexArray[offset] = t3;
          t3 = offset + 1;
          t4 = t1.get$y(v1);
          if (t3 >= t2)
            return H.ioore(vertexArray, t3);
          vertexArray[t3] = t4;
          t4 = offset + 2;
          t1 = t1.get$z(v1);
          if (t4 >= t2)
            return H.ioore(vertexArray, t4);
          vertexArray[t4] = t1;
          t1 = offset + 3;
          t4 = J.getInterceptor$x(v2);
          t3 = t4.get$x(v2);
          if (t1 >= t2)
            return H.ioore(vertexArray, t1);
          vertexArray[t1] = t3;
          t3 = offset + 4;
          t1 = t4.get$y(v2);
          if (t3 >= t2)
            return H.ioore(vertexArray, t3);
          vertexArray[t3] = t1;
          t1 = offset + 5;
          t4 = t4.get$z(v2);
          if (t1 >= t2)
            return H.ioore(vertexArray, t1);
          vertexArray[t1] = t4;
          t4 = offset + 6;
          t1 = J.getInterceptor$x(v3);
          t3 = t1.get$x(v3);
          if (t4 >= t2)
            return H.ioore(vertexArray, t4);
          vertexArray[t4] = t3;
          t3 = offset + 7;
          t4 = t1.get$y(v3);
          if (t3 >= t2)
            return H.ioore(vertexArray, t3);
          vertexArray[t3] = t4;
          t4 = offset + 8;
          t1 = t1.get$z(v3);
          if (t4 >= t2)
            return H.ioore(vertexArray, t4);
          vertexArray[t4] = t1;
          t1 = offset + 9;
          t4 = J.getInterceptor$x(v4);
          t3 = t4.get$x(v4);
          if (t1 >= t2)
            return H.ioore(vertexArray, t1);
          vertexArray[t1] = t3;
          t3 = offset + 10;
          t1 = t4.get$y(v4);
          if (t3 >= t2)
            return H.ioore(vertexArray, t3);
          vertexArray[t3] = t1;
          t1 = offset + 11;
          t4 = t4.get$z(v4);
          if (t1 >= t2)
            return H.ioore(vertexArray, t1);
          vertexArray[t1] = t4;
          offset += 12;
        }
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.WebGLGeometry___webglVertexBuffer);
        J.bufferDataTyped$3$x(this._gl, 34962, vertexArray, hint);
      } else {
        f = null;
        fl = null;
        face = null;
        v1 = null;
        v2 = null;
        v3 = null;
        v4 = null;
      }
      if (dirtyMorphTargets)
        for (t1 = !!material.$isMorphing, n1 = null, n2 = null, n3 = null, n4 = null, vk = 0, vka = null, nka = null, chf = null, faceVertexNormals = null; false; ++vk) {
          fl = chunk_faces3.length;
          for (f = 0, offset_morphTarget = 0; f < fl; ++f) {
            if (f >= chunk_faces3.length)
              return H.ioore(chunk_faces3, f);
            chf = chunk_faces3[f];
            if (chf >= obj_faces.length)
              return H.ioore(obj_faces, chf);
            face = obj_faces[chf];
            if (vk >= 0)
              return H.ioore(morphTargets, vk);
            t2 = face.indices;
            v1 = morphTargets[vk].get$vertices().$index(0, t2[0]);
            v2 = morphTargets[vk].get$vertices().$index(0, t2[1]);
            v3 = morphTargets[vk].get$vertices().$index(0, t2[2]);
            vka = morphTargetsArrays[vk];
            t2 = v1.get$x(v1);
            t3 = vka.length;
            if (offset_morphTarget >= t3)
              return H.ioore(vka, offset_morphTarget);
            vka[offset_morphTarget] = t2;
            t2 = offset_morphTarget + 1;
            t4 = v1.get$y(v1);
            if (t2 >= t3)
              return H.ioore(vka, t2);
            vka[t2] = t4;
            t4 = offset_morphTarget + 2;
            t5 = v1.get$z(v1);
            if (t4 >= t3)
              return H.ioore(vka, t4);
            vka[t4] = t5;
            t5 = offset_morphTarget + 3;
            t6 = v2.get$x(v2);
            if (t5 >= t3)
              return H.ioore(vka, t5);
            vka[t5] = t6;
            t6 = offset_morphTarget + 4;
            t7 = v2.get$y(v2);
            if (t6 >= t3)
              return H.ioore(vka, t6);
            vka[t6] = t7;
            t7 = offset_morphTarget + 5;
            t8 = v2.get$z(v2);
            if (t7 >= t3)
              return H.ioore(vka, t7);
            vka[t7] = t8;
            t8 = offset_morphTarget + 6;
            t9 = v3.get$x(v3);
            if (t8 >= t3)
              return H.ioore(vka, t8);
            vka[t8] = t9;
            t9 = offset_morphTarget + 7;
            t10 = v3.get$y(v3);
            if (t9 >= t3)
              return H.ioore(vka, t9);
            vka[t9] = t10;
            t10 = offset_morphTarget + 8;
            t11 = v3.get$z(v3);
            if (t10 >= t3)
              return H.ioore(vka, t10);
            vka[t10] = t11;
            if (t1 && material.morphNormals) {
              t3 = morphNormals[vk];
              if (needsSmoothNormals) {
                faceVertexNormals = t3.get$vertexNormals().$index(0, chf);
                n1 = faceVertexNormals.get$a(faceVertexNormals);
                n2 = faceVertexNormals.get$b(faceVertexNormals);
                n3 = faceVertexNormals.get$c(faceVertexNormals);
              } else {
                n1 = t3.get$faceNormals().$index(0, chf);
                n3 = n1;
                n2 = n3;
              }
              nka = morphNormalsArrays[vk];
              t3 = n1.get$x(n1);
              t11 = nka.length;
              if (offset_morphTarget >= t11)
                return H.ioore(nka, offset_morphTarget);
              nka[offset_morphTarget] = t3;
              t3 = n1.get$y(n1);
              if (t2 >= t11)
                return H.ioore(nka, t2);
              nka[t2] = t3;
              t3 = n1.get$z(n1);
              if (t4 >= t11)
                return H.ioore(nka, t4);
              nka[t4] = t3;
              t3 = n2.get$x(n2);
              if (t5 >= t11)
                return H.ioore(nka, t5);
              nka[t5] = t3;
              t3 = n2.get$y(n2);
              if (t6 >= t11)
                return H.ioore(nka, t6);
              nka[t6] = t3;
              t3 = n2.get$z(n2);
              if (t7 >= t11)
                return H.ioore(nka, t7);
              nka[t7] = t3;
              t3 = n3.get$x(n3);
              if (t8 >= t11)
                return H.ioore(nka, t8);
              nka[t8] = t3;
              t3 = n3.get$y(n3);
              if (t9 >= t11)
                return H.ioore(nka, t9);
              nka[t9] = t3;
              t3 = n3.get$z(n3);
              if (t10 >= t11)
                return H.ioore(nka, t10);
              nka[t10] = t3;
            }
            offset_morphTarget += 9;
          }
          fl = chunk_faces4.length;
          for (f = 0; f < fl; ++f) {
            if (f >= chunk_faces4.length)
              return H.ioore(chunk_faces4, f);
            chf = chunk_faces4[f];
            if (chf >= obj_faces.length)
              return H.ioore(obj_faces, chf);
            face = obj_faces[chf];
            if (vk >= 0)
              return H.ioore(morphTargets, vk);
            t2 = face.indices;
            v1 = morphTargets[vk].get$vertices().$index(0, t2[0]);
            v2 = morphTargets[vk].get$vertices().$index(0, t2[1]);
            v3 = morphTargets[vk].get$vertices().$index(0, t2[2]);
            v4 = morphTargets[vk].get$vertices().$index(0, face.get$d(face));
            vka = morphTargetsArrays[vk];
            t2 = v1.get$x(v1);
            t3 = vka.length;
            if (offset_morphTarget >= t3)
              return H.ioore(vka, offset_morphTarget);
            vka[offset_morphTarget] = t2;
            t2 = offset_morphTarget + 1;
            t4 = v1.get$y(v1);
            if (t2 >= t3)
              return H.ioore(vka, t2);
            vka[t2] = t4;
            t4 = offset_morphTarget + 2;
            t5 = v1.get$z(v1);
            if (t4 >= t3)
              return H.ioore(vka, t4);
            vka[t4] = t5;
            t5 = offset_morphTarget + 3;
            t6 = v2.get$x(v2);
            if (t5 >= t3)
              return H.ioore(vka, t5);
            vka[t5] = t6;
            t6 = offset_morphTarget + 4;
            t7 = v2.get$y(v2);
            if (t6 >= t3)
              return H.ioore(vka, t6);
            vka[t6] = t7;
            t7 = offset_morphTarget + 5;
            t8 = v2.get$z(v2);
            if (t7 >= t3)
              return H.ioore(vka, t7);
            vka[t7] = t8;
            t8 = offset_morphTarget + 6;
            t9 = v3.get$x(v3);
            if (t8 >= t3)
              return H.ioore(vka, t8);
            vka[t8] = t9;
            t9 = offset_morphTarget + 7;
            t10 = v3.get$y(v3);
            if (t9 >= t3)
              return H.ioore(vka, t9);
            vka[t9] = t10;
            t10 = offset_morphTarget + 8;
            t11 = v3.get$z(v3);
            if (t10 >= t3)
              return H.ioore(vka, t10);
            vka[t10] = t11;
            t11 = offset_morphTarget + 9;
            t12 = v4.get$x(v4);
            if (t11 >= t3)
              return H.ioore(vka, t11);
            vka[t11] = t12;
            t12 = offset_morphTarget + 10;
            t13 = v4.get$y(v4);
            if (t12 >= t3)
              return H.ioore(vka, t12);
            vka[t12] = t13;
            t13 = offset_morphTarget + 11;
            t14 = v4.get$z(v4);
            if (t13 >= t3)
              return H.ioore(vka, t13);
            vka[t13] = t14;
            if (t1 && material.morphNormals) {
              t3 = morphNormals[vk];
              if (needsSmoothNormals) {
                faceVertexNormals = t3.get$vertexNormals().$index(0, chf);
                n1 = faceVertexNormals.get$a(faceVertexNormals);
                n2 = faceVertexNormals.get$b(faceVertexNormals);
                n3 = faceVertexNormals.get$c(faceVertexNormals);
                n4 = faceVertexNormals.get$d(faceVertexNormals);
              } else {
                n1 = t3.get$faceNormals().$index(0, chf);
                n4 = n1;
                n3 = n4;
                n2 = n3;
              }
              nka = morphNormalsArrays[vk];
              t3 = n1.get$x(n1);
              t14 = nka.length;
              if (offset_morphTarget >= t14)
                return H.ioore(nka, offset_morphTarget);
              nka[offset_morphTarget] = t3;
              t3 = n1.get$y(n1);
              if (t2 >= t14)
                return H.ioore(nka, t2);
              nka[t2] = t3;
              t3 = n1.get$z(n1);
              if (t4 >= t14)
                return H.ioore(nka, t4);
              nka[t4] = t3;
              t3 = n2.get$x(n2);
              if (t5 >= t14)
                return H.ioore(nka, t5);
              nka[t5] = t3;
              t3 = n2.get$y(n2);
              if (t6 >= t14)
                return H.ioore(nka, t6);
              nka[t6] = t3;
              t3 = n2.get$z(n2);
              if (t7 >= t14)
                return H.ioore(nka, t7);
              nka[t7] = t3;
              t3 = n3.get$x(n3);
              if (t8 >= t14)
                return H.ioore(nka, t8);
              nka[t8] = t3;
              t3 = n3.get$y(n3);
              if (t9 >= t14)
                return H.ioore(nka, t9);
              nka[t9] = t3;
              t3 = n3.get$z(n3);
              if (t10 >= t14)
                return H.ioore(nka, t10);
              nka[t10] = t3;
              t3 = n4.get$x(n4);
              if (t11 >= t14)
                return H.ioore(nka, t11);
              nka[t11] = t3;
              t3 = n4.get$y(n4);
              if (t12 >= t14)
                return H.ioore(nka, t12);
              nka[t12] = t3;
              t3 = n4.get$z(n4);
              if (t13 >= t14)
                return H.ioore(nka, t13);
              nka[t13] = t3;
            }
            offset_morphTarget += 12;
          }
          t2 = this._gl;
          t3 = geometryGroup.WebGLGeometry___webglMorphTargetsBuffers;
          if (vk >= t3.length)
            return H.ioore(t3, vk);
          J.bindBuffer$2$x(t2, 34962, t3[vk]);
          t3 = this._gl;
          if (vk >= morphTargetsArrays.length)
            return H.ioore(morphTargetsArrays, vk);
          J.bufferDataTyped$3$x(t3, 34962, morphTargetsArrays[vk], hint);
          if (t1 && material.morphNormals) {
            t2 = this._gl;
            t3 = geometryGroup.WebGLGeometry___webglMorphNormalsBuffers;
            if (vk >= t3.length)
              return H.ioore(t3, vk);
            J.bindBuffer$2$x(t2, 34962, t3[vk]);
            t3 = this._gl;
            if (vk >= morphNormalsArrays.length)
              return H.ioore(morphNormalsArrays, vk);
            J.bufferDataTyped$3$x(t3, 34962, morphNormalsArrays[vk], hint);
          }
        }
      if (dirtyColors && material.vertexColors !== 0) {
        fl = chunk_faces3.length;
        for (f = 0, offset_color = 0; f < fl; ++f) {
          if (f >= chunk_faces3.length)
            return H.ioore(chunk_faces3, f);
          t1 = chunk_faces3[f];
          if (t1 >= obj_faces.length)
            return H.ioore(obj_faces, t1);
          face = obj_faces[t1];
          vertexColors = face.vertexColors;
          faceColor = face.color;
          t1 = vertexColors.length;
          if (t1 === 3 && material.vertexColors === 2) {
            if (0 >= t1)
              return H.ioore(vertexColors, 0);
            c1 = vertexColors[0];
            if (1 >= t1)
              return H.ioore(vertexColors, 1);
            c2 = vertexColors[1];
            if (2 >= t1)
              return H.ioore(vertexColors, 2);
            c3 = vertexColors[2];
          } else {
            c3 = faceColor;
            c2 = c3;
            c1 = c2;
          }
          t1 = J.getInterceptor$x(c1);
          t2 = t1.get$r(c1);
          t3 = colorArray.length;
          if (offset_color >= t3)
            return H.ioore(colorArray, offset_color);
          colorArray[offset_color] = t2;
          t2 = offset_color + 1;
          t4 = c1.get$g();
          if (t2 >= t3)
            return H.ioore(colorArray, t2);
          colorArray[t2] = t4;
          t4 = offset_color + 2;
          t1 = t1.get$b(c1);
          if (t4 >= t3)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t1;
          t1 = offset_color + 3;
          t4 = J.getInterceptor$x(c2);
          t2 = t4.get$r(c2);
          if (t1 >= t3)
            return H.ioore(colorArray, t1);
          colorArray[t1] = t2;
          t2 = offset_color + 4;
          t1 = c2.get$g();
          if (t2 >= t3)
            return H.ioore(colorArray, t2);
          colorArray[t2] = t1;
          t1 = offset_color + 5;
          t4 = t4.get$b(c2);
          if (t1 >= t3)
            return H.ioore(colorArray, t1);
          colorArray[t1] = t4;
          t4 = offset_color + 6;
          t1 = J.getInterceptor$x(c3);
          t2 = t1.get$r(c3);
          if (t4 >= t3)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t2;
          t2 = offset_color + 7;
          t4 = c3.get$g();
          if (t2 >= t3)
            return H.ioore(colorArray, t2);
          colorArray[t2] = t4;
          t4 = offset_color + 8;
          t1 = t1.get$b(c3);
          if (t4 >= t3)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t1;
          offset_color += 9;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f >= chunk_faces4.length)
            return H.ioore(chunk_faces4, f);
          t1 = chunk_faces4[f];
          if (t1 >= obj_faces.length)
            return H.ioore(obj_faces, t1);
          face = obj_faces[t1];
          vertexColors = face.vertexColors;
          faceColor = face.color;
          t1 = vertexColors.length;
          if (t1 === 4 && material.vertexColors === 2) {
            if (0 >= t1)
              return H.ioore(vertexColors, 0);
            c1 = vertexColors[0];
            if (1 >= t1)
              return H.ioore(vertexColors, 1);
            c2 = vertexColors[1];
            if (2 >= t1)
              return H.ioore(vertexColors, 2);
            c3 = vertexColors[2];
            if (3 >= t1)
              return H.ioore(vertexColors, 3);
            c4 = vertexColors[3];
          } else {
            c4 = faceColor;
            c3 = c4;
            c2 = c3;
            c1 = c2;
          }
          t1 = J.getInterceptor$x(c1);
          t2 = t1.get$r(c1);
          t3 = colorArray.length;
          if (offset_color >= t3)
            return H.ioore(colorArray, offset_color);
          colorArray[offset_color] = t2;
          t2 = offset_color + 1;
          t4 = c1.get$g();
          if (t2 >= t3)
            return H.ioore(colorArray, t2);
          colorArray[t2] = t4;
          t4 = offset_color + 2;
          t1 = t1.get$b(c1);
          if (t4 >= t3)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t1;
          t1 = offset_color + 3;
          t4 = J.getInterceptor$x(c2);
          t2 = t4.get$r(c2);
          if (t1 >= t3)
            return H.ioore(colorArray, t1);
          colorArray[t1] = t2;
          t2 = offset_color + 4;
          t1 = c2.get$g();
          if (t2 >= t3)
            return H.ioore(colorArray, t2);
          colorArray[t2] = t1;
          t1 = offset_color + 5;
          t4 = t4.get$b(c2);
          if (t1 >= t3)
            return H.ioore(colorArray, t1);
          colorArray[t1] = t4;
          t4 = offset_color + 6;
          t1 = J.getInterceptor$x(c3);
          t2 = t1.get$r(c3);
          if (t4 >= t3)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t2;
          t2 = offset_color + 7;
          t4 = c3.get$g();
          if (t2 >= t3)
            return H.ioore(colorArray, t2);
          colorArray[t2] = t4;
          t4 = offset_color + 8;
          t1 = t1.get$b(c3);
          if (t4 >= t3)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t1;
          t1 = offset_color + 9;
          t4 = J.getInterceptor$x(c4);
          t2 = t4.get$r(c4);
          if (t1 >= t3)
            return H.ioore(colorArray, t1);
          colorArray[t1] = t2;
          t2 = offset_color + 10;
          t1 = c4.get$g();
          if (t2 >= t3)
            return H.ioore(colorArray, t2);
          colorArray[t2] = t1;
          t1 = offset_color + 11;
          t4 = t4.get$b(c4);
          if (t1 >= t3)
            return H.ioore(colorArray, t1);
          colorArray[t1] = t4;
          offset_color += 12;
        }
        if (offset_color > 0) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.WebGLGeometry___webglColorBuffer);
          J.bufferDataTyped$3$x(this._gl, 34962, colorArray, hint);
        }
      }
      if (dirtyTangents && geometry.hasTangents) {
        fl = chunk_faces3.length;
        for (f = 0, offset_tangent = 0; f < fl; ++f) {
          if (f >= chunk_faces3.length)
            return H.ioore(chunk_faces3, f);
          t1 = chunk_faces3[f];
          if (t1 >= obj_faces.length)
            return H.ioore(obj_faces, t1);
          face = obj_faces[t1];
          vertexTangents = face.vertexTangents;
          t1 = vertexTangents.length;
          if (0 >= t1)
            return H.ioore(vertexTangents, 0);
          t10 = vertexTangents[0];
          if (1 >= t1)
            return H.ioore(vertexTangents, 1);
          t2 = vertexTangents[1];
          if (2 >= t1)
            return H.ioore(vertexTangents, 2);
          t3 = vertexTangents[2];
          t1 = J.getInterceptor$x(t10);
          t4 = t1.get$x(t10);
          t5 = tangentArray.length;
          if (offset_tangent >= t5)
            return H.ioore(tangentArray, offset_tangent);
          tangentArray[offset_tangent] = t4;
          t4 = offset_tangent + 1;
          t6 = t1.get$y(t10);
          if (t4 >= t5)
            return H.ioore(tangentArray, t4);
          tangentArray[t4] = t6;
          t6 = offset_tangent + 2;
          t4 = t1.get$z(t10);
          if (t6 >= t5)
            return H.ioore(tangentArray, t6);
          tangentArray[t6] = t4;
          t4 = offset_tangent + 3;
          t10 = t1.get$w(t10);
          if (t4 >= t5)
            return H.ioore(tangentArray, t4);
          tangentArray[t4] = t10;
          t10 = offset_tangent + 4;
          t4 = J.getInterceptor$x(t2);
          t1 = t4.get$x(t2);
          if (t10 >= t5)
            return H.ioore(tangentArray, t10);
          tangentArray[t10] = t1;
          t1 = offset_tangent + 5;
          t10 = t4.get$y(t2);
          if (t1 >= t5)
            return H.ioore(tangentArray, t1);
          tangentArray[t1] = t10;
          t10 = offset_tangent + 6;
          t1 = t4.get$z(t2);
          if (t10 >= t5)
            return H.ioore(tangentArray, t10);
          tangentArray[t10] = t1;
          t1 = offset_tangent + 7;
          t2 = t4.get$w(t2);
          if (t1 >= t5)
            return H.ioore(tangentArray, t1);
          tangentArray[t1] = t2;
          t2 = offset_tangent + 8;
          t1 = J.getInterceptor$x(t3);
          t4 = t1.get$x(t3);
          if (t2 >= t5)
            return H.ioore(tangentArray, t2);
          tangentArray[t2] = t4;
          t4 = offset_tangent + 9;
          t2 = t1.get$y(t3);
          if (t4 >= t5)
            return H.ioore(tangentArray, t4);
          tangentArray[t4] = t2;
          t2 = offset_tangent + 10;
          t4 = t1.get$z(t3);
          if (t2 >= t5)
            return H.ioore(tangentArray, t2);
          tangentArray[t2] = t4;
          t4 = offset_tangent + 11;
          t3 = t1.get$w(t3);
          if (t4 >= t5)
            return H.ioore(tangentArray, t4);
          tangentArray[t4] = t3;
          offset_tangent += 12;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f >= chunk_faces4.length)
            return H.ioore(chunk_faces4, f);
          t1 = chunk_faces4[f];
          if (t1 >= obj_faces.length)
            return H.ioore(obj_faces, t1);
          face = obj_faces[t1];
          vertexTangents = face.vertexTangents;
          t1 = vertexTangents.length;
          if (0 >= t1)
            return H.ioore(vertexTangents, 0);
          t10 = vertexTangents[0];
          if (1 >= t1)
            return H.ioore(vertexTangents, 1);
          t2 = vertexTangents[1];
          if (2 >= t1)
            return H.ioore(vertexTangents, 2);
          t3 = vertexTangents[2];
          if (3 >= t1)
            return H.ioore(vertexTangents, 3);
          t4 = vertexTangents[3];
          t1 = J.getInterceptor$x(t10);
          t5 = t1.get$x(t10);
          t6 = tangentArray.length;
          if (offset_tangent >= t6)
            return H.ioore(tangentArray, offset_tangent);
          tangentArray[offset_tangent] = t5;
          t5 = offset_tangent + 1;
          t7 = t1.get$y(t10);
          if (t5 >= t6)
            return H.ioore(tangentArray, t5);
          tangentArray[t5] = t7;
          t7 = offset_tangent + 2;
          t5 = t1.get$z(t10);
          if (t7 >= t6)
            return H.ioore(tangentArray, t7);
          tangentArray[t7] = t5;
          t5 = offset_tangent + 3;
          t10 = t1.get$w(t10);
          if (t5 >= t6)
            return H.ioore(tangentArray, t5);
          tangentArray[t5] = t10;
          t10 = offset_tangent + 4;
          t5 = J.getInterceptor$x(t2);
          t1 = t5.get$x(t2);
          if (t10 >= t6)
            return H.ioore(tangentArray, t10);
          tangentArray[t10] = t1;
          t1 = offset_tangent + 5;
          t10 = t5.get$y(t2);
          if (t1 >= t6)
            return H.ioore(tangentArray, t1);
          tangentArray[t1] = t10;
          t10 = offset_tangent + 6;
          t1 = t5.get$z(t2);
          if (t10 >= t6)
            return H.ioore(tangentArray, t10);
          tangentArray[t10] = t1;
          t1 = offset_tangent + 7;
          t2 = t5.get$w(t2);
          if (t1 >= t6)
            return H.ioore(tangentArray, t1);
          tangentArray[t1] = t2;
          t2 = offset_tangent + 8;
          t1 = J.getInterceptor$x(t3);
          t5 = t1.get$x(t3);
          if (t2 >= t6)
            return H.ioore(tangentArray, t2);
          tangentArray[t2] = t5;
          t5 = offset_tangent + 9;
          t2 = t1.get$y(t3);
          if (t5 >= t6)
            return H.ioore(tangentArray, t5);
          tangentArray[t5] = t2;
          t2 = offset_tangent + 10;
          t5 = t1.get$z(t3);
          if (t2 >= t6)
            return H.ioore(tangentArray, t2);
          tangentArray[t2] = t5;
          t5 = offset_tangent + 11;
          t3 = t1.get$w(t3);
          if (t5 >= t6)
            return H.ioore(tangentArray, t5);
          tangentArray[t5] = t3;
          t3 = offset_tangent + 12;
          t5 = J.getInterceptor$x(t4);
          t1 = t5.get$x(t4);
          if (t3 >= t6)
            return H.ioore(tangentArray, t3);
          tangentArray[t3] = t1;
          t1 = offset_tangent + 13;
          t3 = t5.get$y(t4);
          if (t1 >= t6)
            return H.ioore(tangentArray, t1);
          tangentArray[t1] = t3;
          t3 = offset_tangent + 14;
          t1 = t5.get$z(t4);
          if (t3 >= t6)
            return H.ioore(tangentArray, t3);
          tangentArray[t3] = t1;
          t1 = offset_tangent + 15;
          t4 = t5.get$w(t4);
          if (t1 >= t6)
            return H.ioore(tangentArray, t1);
          tangentArray[t1] = t4;
          offset_tangent += 16;
        }
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.WebGLGeometry___webglTangentBuffer);
        J.bufferDataTyped$3$x(this._gl, 34962, tangentArray, hint);
      }
      if (dirtyNormals && normalType !== 0) {
        fl = chunk_faces3.length;
        for (f = 0, vn = null, offset_normal = 0; f < fl; ++f) {
          if (f >= chunk_faces3.length)
            return H.ioore(chunk_faces3, f);
          t1 = chunk_faces3[f];
          if (t1 >= obj_faces.length)
            return H.ioore(obj_faces, t1);
          face = obj_faces[t1];
          vertexNormals = face.vertexNormals;
          faceNormal = face.normal;
          if (vertexNormals.length === 3 && needsSmoothNormals)
            for (i = 0; i < 3; ++i) {
              if (i >= vertexNormals.length)
                return H.ioore(vertexNormals, i);
              vn = vertexNormals[i];
              t1 = J.getInterceptor$x(vn);
              t2 = t1.get$x(vn);
              t3 = normalArray.length;
              if (offset_normal < 0 || offset_normal >= t3)
                return H.ioore(normalArray, offset_normal);
              normalArray[offset_normal] = t2;
              t2 = offset_normal + 1;
              t4 = t1.get$y(vn);
              if (t2 >= t3)
                return H.ioore(normalArray, t2);
              normalArray[t2] = t4;
              t4 = offset_normal + 2;
              t1 = t1.get$z(vn);
              if (t4 >= t3)
                return H.ioore(normalArray, t4);
              normalArray[t4] = t1;
              offset_normal += 3;
            }
          else
            for (t1 = J.getInterceptor$x(faceNormal), i = 0; i < 3; ++i) {
              t2 = t1.get$x(faceNormal);
              t3 = normalArray.length;
              if (offset_normal < 0 || offset_normal >= t3)
                return H.ioore(normalArray, offset_normal);
              normalArray[offset_normal] = t2;
              t2 = offset_normal + 1;
              t4 = t1.get$y(faceNormal);
              if (t2 >= t3)
                return H.ioore(normalArray, t2);
              normalArray[t2] = t4;
              t4 = offset_normal + 2;
              t2 = t1.get$z(faceNormal);
              if (t4 >= t3)
                return H.ioore(normalArray, t4);
              normalArray[t4] = t2;
              offset_normal += 3;
            }
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f >= chunk_faces4.length)
            return H.ioore(chunk_faces4, f);
          t1 = chunk_faces4[f];
          if (t1 >= obj_faces.length)
            return H.ioore(obj_faces, t1);
          face = obj_faces[t1];
          vertexNormals = face.vertexNormals;
          faceNormal = face.normal;
          if (vertexNormals.length === 4 && needsSmoothNormals)
            for (i = 0; i < 4; ++i) {
              if (i >= vertexNormals.length)
                return H.ioore(vertexNormals, i);
              vn = vertexNormals[i];
              t1 = J.getInterceptor$x(vn);
              t2 = t1.get$x(vn);
              t3 = normalArray.length;
              if (offset_normal < 0 || offset_normal >= t3)
                return H.ioore(normalArray, offset_normal);
              normalArray[offset_normal] = t2;
              t2 = offset_normal + 1;
              t4 = t1.get$y(vn);
              if (t2 >= t3)
                return H.ioore(normalArray, t2);
              normalArray[t2] = t4;
              t4 = offset_normal + 2;
              t1 = t1.get$z(vn);
              if (t4 >= t3)
                return H.ioore(normalArray, t4);
              normalArray[t4] = t1;
              offset_normal += 3;
            }
          else
            for (t1 = J.getInterceptor$x(faceNormal), i = 0; i < 4; ++i) {
              t2 = t1.get$x(faceNormal);
              t3 = normalArray.length;
              if (offset_normal < 0 || offset_normal >= t3)
                return H.ioore(normalArray, offset_normal);
              normalArray[offset_normal] = t2;
              t2 = offset_normal + 1;
              t4 = t1.get$y(faceNormal);
              if (t2 >= t3)
                return H.ioore(normalArray, t2);
              normalArray[t2] = t4;
              t4 = offset_normal + 2;
              t2 = t1.get$z(faceNormal);
              if (t4 >= t3)
                return H.ioore(normalArray, t4);
              normalArray[t4] = t2;
              offset_normal += 3;
            }
        }
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.WebGLGeometry___webglNormalBuffer);
        J.bufferDataTyped$3$x(this._gl, 34962, normalArray, hint);
      }
      if (dirtyUvs && obj_uvs.length !== 0 && uvType) {
        fl = chunk_faces3.length;
        for (f = 0, uvi = null, offset_uv = 0; f < fl; ++f) {
          if (f >= chunk_faces3.length)
            return H.ioore(chunk_faces3, f);
          fi = chunk_faces3[f];
          if (fi >= obj_uvs.length)
            return H.ioore(obj_uvs, fi);
          uv = obj_uvs[fi];
          for (i = 0; i < 3; ++i) {
            if (i >= uv.length)
              return H.ioore(uv, i);
            uvi = uv[i];
            t1 = uvi.get$u();
            t2 = uvArray.length;
            if (offset_uv < 0 || offset_uv >= t2)
              return H.ioore(uvArray, offset_uv);
            uvArray[offset_uv] = t1;
            t1 = offset_uv + 1;
            t3 = uvi.v;
            if (t1 >= t2)
              return H.ioore(uvArray, t1);
            uvArray[t1] = t3;
            offset_uv += 2;
          }
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f >= chunk_faces4.length)
            return H.ioore(chunk_faces4, f);
          fi = chunk_faces4[f];
          if (fi >= obj_uvs.length)
            return H.ioore(obj_uvs, fi);
          uv = obj_uvs[fi];
          for (i = 0; i < 4; ++i) {
            if (i >= uv.length)
              return H.ioore(uv, i);
            uvi = uv[i];
            t1 = uvi.get$u();
            t2 = uvArray.length;
            if (offset_uv < 0 || offset_uv >= t2)
              return H.ioore(uvArray, offset_uv);
            uvArray[offset_uv] = t1;
            t1 = offset_uv + 1;
            t3 = uvi.v;
            if (t1 >= t2)
              return H.ioore(uvArray, t1);
            uvArray[t1] = t3;
            offset_uv += 2;
          }
        }
        if (offset_uv > 0) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.WebGLGeometry___webglUVBuffer);
          J.bufferDataTyped$3$x(this._gl, 34962, uvArray, hint);
        }
      }
      if (dirtyUvs)
        t1 = false;
      else
        t1 = false;
      if (t1) {
        fl = chunk_faces3.length;
        for (f = 0, uv2i = null, offset_uv2 = 0; f < fl; ++f) {
          if (f >= chunk_faces3.length)
            return H.ioore(chunk_faces3, f);
          fi = chunk_faces3[f];
          if (fi >= null.length)
            return H.ioore(null, fi);
          uv2 = null[fi];
          for (i = 0; i < 3; ++i) {
            if (i >= uv2.length)
              return H.ioore(uv2, i);
            uv2i = uv2[i];
            t1 = uv2i.get$u();
            t2 = uv2Array.length;
            if (offset_uv2 < 0 || offset_uv2 >= t2)
              return H.ioore(uv2Array, offset_uv2);
            uv2Array[offset_uv2] = t1;
            t1 = offset_uv2 + 1;
            t3 = uv2i.v;
            if (t1 >= t2)
              return H.ioore(uv2Array, t1);
            uv2Array[t1] = t3;
            offset_uv2 += 2;
          }
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f >= chunk_faces4.length)
            return H.ioore(chunk_faces4, f);
          fi = chunk_faces4[f];
          if (fi >= null.length)
            return H.ioore(null, fi);
          uv2 = null[fi];
          for (i = 0; i < 4; ++i) {
            if (i >= uv2.length)
              return H.ioore(uv2, i);
            uv2i = uv2[i];
            t1 = uv2i.get$u();
            t2 = uv2Array.length;
            if (offset_uv2 < 0 || offset_uv2 >= t2)
              return H.ioore(uv2Array, offset_uv2);
            uv2Array[offset_uv2] = t1;
            t1 = offset_uv2 + 1;
            t3 = uv2i.v;
            if (t1 >= t2)
              return H.ioore(uv2Array, t1);
            uv2Array[t1] = t3;
            offset_uv2 += 2;
          }
        }
        if (offset_uv2 > 0) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.WebGLGeometry___webglUV2Buffer);
          J.bufferDataTyped$3$x(this._gl, 34962, uv2Array, hint);
        }
      }
      if (dirtyElements) {
        fl = chunk_faces3.length;
        for (f = 0, vertexIndex = 0, offset_face = 0, offset_line = 0; f < fl; ++f) {
          t1 = faceArray.length;
          if (offset_face >= t1)
            return H.ioore(faceArray, offset_face);
          faceArray[offset_face] = vertexIndex;
          t2 = offset_face + 1;
          t3 = vertexIndex + 1;
          if (t2 >= t1)
            return H.ioore(faceArray, t2);
          faceArray[t2] = t3;
          t2 = offset_face + 2;
          t4 = vertexIndex + 2;
          if (t2 >= t1)
            return H.ioore(faceArray, t2);
          faceArray[t2] = t4;
          offset_face += 3;
          t2 = lineArray.length;
          if (offset_line >= t2)
            return H.ioore(lineArray, offset_line);
          lineArray[offset_line] = vertexIndex;
          t1 = offset_line + 1;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = t3;
          t1 = offset_line + 2;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = vertexIndex;
          t1 = offset_line + 3;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = t4;
          t1 = offset_line + 4;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = t3;
          t3 = offset_line + 5;
          if (t3 >= t2)
            return H.ioore(lineArray, t3);
          lineArray[t3] = t4;
          offset_line += 6;
          vertexIndex += 3;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          t1 = faceArray.length;
          if (offset_face >= t1)
            return H.ioore(faceArray, offset_face);
          faceArray[offset_face] = vertexIndex;
          t2 = offset_face + 1;
          t3 = vertexIndex + 1;
          if (t2 >= t1)
            return H.ioore(faceArray, t2);
          faceArray[t2] = t3;
          t2 = offset_face + 2;
          t4 = vertexIndex + 3;
          if (t2 >= t1)
            return H.ioore(faceArray, t2);
          faceArray[t2] = t4;
          t2 = offset_face + 3;
          if (t2 >= t1)
            return H.ioore(faceArray, t2);
          faceArray[t2] = t3;
          t2 = offset_face + 4;
          t5 = vertexIndex + 2;
          if (t2 >= t1)
            return H.ioore(faceArray, t2);
          faceArray[t2] = t5;
          t2 = offset_face + 5;
          if (t2 >= t1)
            return H.ioore(faceArray, t2);
          faceArray[t2] = t4;
          offset_face += 6;
          t2 = lineArray.length;
          if (offset_line >= t2)
            return H.ioore(lineArray, offset_line);
          lineArray[offset_line] = vertexIndex;
          t1 = offset_line + 1;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = t3;
          t1 = offset_line + 2;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = vertexIndex;
          t1 = offset_line + 3;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = t4;
          t1 = offset_line + 4;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = t3;
          t3 = offset_line + 5;
          if (t3 >= t2)
            return H.ioore(lineArray, t3);
          lineArray[t3] = t5;
          t3 = offset_line + 6;
          if (t3 >= t2)
            return H.ioore(lineArray, t3);
          lineArray[t3] = t5;
          t5 = offset_line + 7;
          if (t5 >= t2)
            return H.ioore(lineArray, t5);
          lineArray[t5] = t4;
          offset_line += 8;
          vertexIndex += 4;
        }
        J.bindBuffer$2$x(this._gl, 34963, geometryGroup.WebGLGeometry___webglFaceBuffer);
        J.bufferDataTyped$3$x(this._gl, 34963, faceArray, hint);
        J.bindBuffer$2$x(this._gl, 34963, geometryGroup.WebGLGeometry___webglLineBuffer);
        J.bufferDataTyped$3$x(this._gl, 34963, lineArray, hint);
      }
      if (customAttributes != null) {
        il = customAttributes.length;
        for (i = 0, offset_custom = 0, offset_customSrc = 0, value = null; i < il; ++i) {
          if (i >= customAttributes.length)
            return H.ioore(customAttributes, i);
          customAttributes[i].get$__original().get$needsUpdate();
          continue;
        }
      }
      if (dispose) {
        geometryGroup.WebGLGeometry___inittedArrays = false;
        geometryGroup.WebGLGeometry___colorArray = null;
        geometryGroup.WebGLGeometry___normalArray = null;
        geometryGroup.WebGLGeometry___tangentArray = null;
        geometryGroup.WebGLGeometry___uvArray = null;
        geometryGroup.WebGLGeometry___uv2Array = null;
        geometryGroup.WebGLGeometry___faceArray = null;
        geometryGroup.WebGLGeometry___vertexArray = null;
        geometryGroup.WebGLGeometry___lineArray = null;
        geometryGroup.WebGLGeometry___skinIndexArray = null;
        geometryGroup.WebGLGeometry___skinWeightArray = null;
      }
    },
    renderBufferImmediate$3: function(object, program, material) {
      object.get$hasPositions();
      object.get$hasNormals();
      object.get$hasUvs();
      object.get$hasColors();
      object.get$hasPositions();
      object.get$hasNormals();
      object.get$hasUvs();
      object.get$hasColors();
      J.drawArrays$3$x(this._gl, 4, 0, object.get$count(object));
      object.set$count(0, 0);
    },
    renderBuffer$6: function(camera, lights, fog, material, geometryGroup, object) {
      var program, attributes, t1, t2, wireframeBit, geometryGroupHash, updateBuffers, t3, il, i, attribute, t4, primitives;
      if (!material.visible)
        return;
      program = this.setProgram$5(camera, lights, fog, material, object);
      attributes = program.attributes;
      t1 = J.getInterceptor(material);
      t2 = !!t1.$isWireframe;
      wireframeBit = t2 && material.get$wireframe() ? 1 : 0;
      geometryGroupHash = J.$add$ns(J.$add$ns(J.$mul$ns(J.get$id$x(geometryGroup), 16777215), program.id * 2), wireframeBit);
      if (geometryGroupHash !== this._currentGeometryGroupHash) {
        this._currentGeometryGroupHash = geometryGroupHash;
        updateBuffers = true;
      } else
        updateBuffers = false;
      if (updateBuffers)
        this.disableAttributes$0();
      if (!!t1.$isMorphing)
        t3 = !material.get$morphTargets();
      else
        t3 = true;
      if (t3) {
        t3 = attributes.$index(0, "position");
        if (typeof t3 !== "number")
          return t3.$ge();
        t3 = t3 >= 0;
      } else
        t3 = false;
      if (t3) {
        if (updateBuffers) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglVertexBuffer());
          this.enableAttribute$1(attributes.$index(0, "position"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "position"), 3, 5126, false, 0, 0);
        }
      } else if (!!object.$isMesh && object.morphTargetBase !== 0)
        this.setupMorphTargets$3(material, geometryGroup, object);
      if (updateBuffers) {
        if (geometryGroup.get$__webglCustomAttributesList() != null) {
          il = geometryGroup.WebGLGeometry___webglCustomAttributesList.length;
          for (i = 0; i < il; ++i) {
            t3 = geometryGroup.WebGLGeometry___webglCustomAttributesList;
            if (i >= t3.length)
              return H.ioore(t3, i);
            attribute = t3[i];
            t3 = attributes.$index(0, attribute.get$buffer(attribute).get$belongsToAttribute());
            if (typeof t3 !== "number")
              return t3.$ge();
            if (t3 >= 0) {
              attribute.get$buffer(attribute).bind$1(34962);
              this.enableAttribute$1(attributes.$index(0, attribute.get$buffer(attribute).get$belongsToAttribute()));
              J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, attribute.get$buffer(attribute).get$belongsToAttribute()), attribute.get$size(attribute), 5126, false, 0, 0);
            }
          }
        }
        t3 = attributes.$index(0, "color");
        if (typeof t3 !== "number")
          return t3.$ge();
        if (t3 >= 0) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.WebGLGeometry___webglColorBuffer);
          this.enableAttribute$1(attributes.$index(0, "color"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "color"), 3, 5126, false, 0, 0);
        }
        t3 = attributes.$index(0, "normal");
        if (typeof t3 !== "number")
          return t3.$ge();
        if (t3 >= 0) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.WebGLGeometry___webglNormalBuffer);
          this.enableAttribute$1(attributes.$index(0, "normal"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "normal"), 3, 5126, false, 0, 0);
        }
        t3 = attributes.$index(0, "tangent");
        if (typeof t3 !== "number")
          return t3.$ge();
        if (t3 >= 0) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.WebGLGeometry___webglTangentBuffer);
          this.enableAttribute$1(attributes.$index(0, "tangent"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "tangent"), 4, 5126, false, 0, 0);
        }
        t3 = attributes.$index(0, "uv");
        if (typeof t3 !== "number")
          return t3.$ge();
        if (t3 >= 0) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.WebGLGeometry___webglUVBuffer);
          this.enableAttribute$1(attributes.$index(0, "uv"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "uv"), 2, 5126, false, 0, 0);
        }
        t3 = attributes.$index(0, "uv2");
        if (typeof t3 !== "number")
          return t3.$ge();
        if (t3 >= 0) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.WebGLGeometry___webglUV2Buffer);
          this.enableAttribute$1(attributes.$index(0, "uv2"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "uv2"), 2, 5126, false, 0, 0);
        }
        if (!!t1.$isSkinning)
          if (material.get$skinning()) {
            t3 = attributes.$index(0, "skinIndex");
            if (typeof t3 !== "number")
              return t3.$ge();
            if (t3 >= 0) {
              t3 = attributes.$index(0, "skinWeight");
              if (typeof t3 !== "number")
                return t3.$ge();
              t3 = t3 >= 0;
            } else
              t3 = false;
          } else
            t3 = false;
        else
          t3 = false;
        if (t3) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.WebGLGeometry___webglSkinIndicesBuffer);
          this.enableAttribute$1(attributes.$index(0, "skinIndex"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "skinIndex"), 4, 5126, false, 0, 0);
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.WebGLGeometry___webglSkinWeightsBuffer);
          this.enableAttribute$1(attributes.$index(0, "skinWeight"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "skinWeight"), 4, 5126, false, 0, 0);
        }
        t3 = attributes.$index(0, "lineDistance");
        if (typeof t3 !== "number")
          return t3.$ge();
        if (t3 >= 0) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.WebGLGeometry___webglLineDistanceBuffer);
          this.enableAttribute$1(attributes.$index(0, "lineDistance"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "lineDistance"), 1, 5126, false, 0, 0);
        }
      }
      if (!!object.$isMesh) {
        if (t2 && material.get$wireframe()) {
          t1 = H.interceptedTypeCast(material, "$isWireframe").get$wireframeLinewidth();
          if (t1 !== this._oldLineWidth) {
            J.lineWidth$1$x(this._gl, t1);
            this._oldLineWidth = t1;
          }
          if (updateBuffers)
            J.bindBuffer$2$x(this._gl, 34963, geometryGroup.get$__webglLineBuffer());
          J.drawElements$4$x(this._gl, 1, geometryGroup.get$__webglLineCount(), 5123, 0);
        } else {
          if (updateBuffers)
            J.bindBuffer$2$x(this._gl, 34963, geometryGroup.get$__webglFaceBuffer());
          J.drawElements$4$x(this._gl, 4, geometryGroup.get$__webglFaceCount(), 5123, 0);
        }
        t1 = this.info;
        t2 = t1.render;
        ++t2.calls;
        t3 = t2.vertices;
        t4 = geometryGroup.get$__webglFaceCount();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2.vertices = t3 + t4;
        t1 = t1.render;
        t4 = t1.faces;
        t3 = geometryGroup.WebGLGeometry___webglFaceCount;
        if (typeof t3 !== "number")
          return t3.$tdiv();
        t1.faces = t4 + C.JSInt_methods._tdivFast$1(t3, 3);
      } else if (!!object.$isLine) {
        primitives = object.type === 0 ? 3 : 1;
        t1 = !!t1.$isLineBasicMaterial ? material.linewidth : 0;
        if (t1 !== this._oldLineWidth) {
          J.lineWidth$1$x(this._gl, t1);
          this._oldLineWidth = t1;
        }
        J.drawArrays$3$x(this._gl, primitives, 0, geometryGroup.get$__webglLineCount());
        ++this.info.render.calls;
      }
    },
    enableAttribute$1: function(attribute) {
      var k, t1;
      k = J.toString$0(attribute);
      t1 = this._enabledAttributes;
      if (t1.$index(0, k) == null || t1.$index(0, k) !== true) {
        J.enableVertexAttribArray$1$x(this._gl, attribute);
        t1.$indexSet(0, k, true);
      }
    },
    disableAttributes$0: function() {
      this._enabledAttributes.forEach$1(0, new S.WebGLRenderer_disableAttributes_closure(this));
    },
    setupMorphTargets$3: function(material, geometryGroup, object) {
      var attributes, t1, t2, t3, activeInfluenceIndices, influences, il, i, influence, influenceIndex, m;
      attributes = material._program.attributes;
      if (object.get$morphTargetBase() !== -1) {
        t1 = attributes.$index(0, "position");
        if (typeof t1 !== "number")
          return t1.$ge();
        t1 = t1 >= 0;
      } else
        t1 = false;
      if (t1) {
        t1 = this._gl;
        t2 = geometryGroup.get$__webglMorphTargetsBuffers();
        t3 = object.morphTargetBase;
        if (t3 < 0 || t3 >= t2.length)
          return H.ioore(t2, t3);
        J.bindBuffer$2$x(t1, 34962, t2[t3]);
        this.enableAttribute$1(attributes.$index(0, "position"));
        J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "position"), 3, 5126, false, 0, 0);
      } else {
        t1 = attributes.$index(0, "position");
        if (typeof t1 !== "number")
          return t1.$ge();
        if (t1 >= 0) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglVertexBuffer());
          this.enableAttribute$1(attributes.$index(0, "position"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "position"), 3, 5126, false, 0, 0);
        }
      }
      if (!!material.$isMorphing)
        object.morphTargetForcedOrder.length;
      activeInfluenceIndices = [];
      influences = object.morphTargetInfluences;
      il = influences.length;
      for (i = 0; i < il; ++i) {
        if (i >= influences.length)
          return H.ioore(influences, i);
        influence = influences[i];
        if (J.$gt$n(influence, 0))
          activeInfluenceIndices.push([i, influence]);
      }
      t1 = activeInfluenceIndices.length;
      H.interceptedTypeCast(material, "$isMorphing");
      if (t1 > material.get$numSupportedMorphTargets()) {
        C.JSArray_methods.sort$1(activeInfluenceIndices, this.get$numericalSort());
        C.JSArray_methods.set$length(activeInfluenceIndices, material.get$numSupportedMorphTargets());
      } else if (activeInfluenceIndices.length > material.get$numSupportedMorphNormals())
        C.JSArray_methods.sort$1(activeInfluenceIndices, this.get$numericalSort());
      else if (activeInfluenceIndices.length === 0)
        activeInfluenceIndices.push([0, 0]);
      for (influenceIndex = null, m = 0; m < material.get$numSupportedMorphTargets();) {
        t1 = activeInfluenceIndices.length;
        if (m < t1) {
          t2 = activeInfluenceIndices[m];
          t2 = t2 != null && t2.length !== 0;
        } else
          t2 = false;
        if (t2) {
          if (m >= t1)
            return H.ioore(activeInfluenceIndices, m);
          t1 = activeInfluenceIndices[m];
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          influenceIndex = t1[0];
          t1 = this._gl;
          t2 = geometryGroup.get$__webglMorphTargetsBuffers();
          if (influenceIndex >>> 0 !== influenceIndex || influenceIndex >= t2.length)
            return H.ioore(t2, influenceIndex);
          J.bindBuffer$2$x(t1, 34962, t2[influenceIndex]);
          this.enableAttribute$1(attributes.$index(0, "morphTarget" + m));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "morphTarget" + m), 3, 5126, false, 0, 0);
          if (material.get$morphNormals()) {
            t1 = this._gl;
            t2 = geometryGroup.WebGLGeometry___webglMorphNormalsBuffers;
            if (influenceIndex >= t2.length)
              return H.ioore(t2, influenceIndex);
            J.bindBuffer$2$x(t1, 34962, t2[influenceIndex]);
            this.enableAttribute$1(attributes.$index(0, "morphNormal" + m));
            J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "morphNormal" + m), 3, 5126, false, 0, 0);
          }
          t1 = object.__webglMorphTargetInfluences;
          if (influenceIndex >= influences.length)
            return H.ioore(influences, influenceIndex);
          t2 = J.toDouble$0$n(influences[influenceIndex]);
          if (m >= t1.length)
            return H.ioore(t1, m);
          t1[m] = t2;
        } else {
          t1 = object.__webglMorphTargetInfluences;
          if (m >= t1.length)
            return H.ioore(t1, m);
          t1[m] = 0;
        }
        ++m;
      }
      if (material._program.uniforms.$index(0, "morphTargetInfluences") != null)
        J.uniform1fv$2$x(this._gl, material._program.uniforms.$index(0, "morphTargetInfluences"), object.__webglMorphTargetInfluences);
    },
    painterSort$2: [function(a, b) {
      var t1, t2;
      t1 = J.getInterceptor$x(a);
      if (!J.get$isNaN$n(t1.get$z(a))) {
        t2 = J.getInterceptor$x(b);
        t2 = J.get$isNaN$n(t2.get$z(b)) || J.get$isInfinite$n(t1.get$z(a)) || J.get$isInfinite$n(t2.get$z(b));
      } else
        t2 = true;
      if (t2)
        t1 = 0;
      else {
        t2 = J.get$z$x(b);
        t1 = t1.get$z(a);
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = C.JSNumber_methods.toInt$0(t2 - t1);
      }
      return t1;
    }, "call$2", "get$painterSort", 4, 0, 6],
    numericalSort$2: [function(a, b) {
      return J.toInt$0$n(J.$sub$n(J.$index$asx(b, 0), J.$index$asx(a, 0)));
    }, "call$2", "get$numericalSort", 4, 0, 6],
    _render$4$forceClear$renderTarget: function(scene, camera, forceClear, renderTarget) {
      var lights, fog, t1, t2, t3, renderList, il, i, webglObject, object, t4, meshMaterial, material;
      lights = scene.lights;
      fog = scene.fog;
      this._currentMaterialId = -1;
      this._lightsNeedUpdate = true;
      if (this.autoUpdateScene)
        scene.updateMatrixWorld$0();
      if (camera.parent == null)
        camera.updateMatrixWorld$0();
      t1 = camera.matrixWorldInverse;
      t1.copyInverse$1(camera.matrixWorld);
      this._projScreenMatrix.setFrom$1(camera.projectionMatrix).multiply$1(0, t1);
      t2 = this._frustum;
      t2.setFromMatrix$1(this._projScreenMatrix);
      if (this.autoUpdateObjects)
        this.initWebGLObjects$1(scene);
      this.renderPlugins$3(this.renderPluginsPre, scene, camera);
      t3 = this.info.render;
      t3.calls = 0;
      t3.vertices = 0;
      t3.faces = 0;
      t3.points = 0;
      this.setRenderTarget$1(renderTarget);
      if (this.autoClear || forceClear)
        this.clear$3(0, this.autoClearColor, this.autoClearDepth, this.autoClearStencil);
      renderList = scene.__webglObjects;
      il = renderList.length;
      for (t3 = this.sortObjects, i = 0; i < il; ++i) {
        if (i >= renderList.length)
          return H.ioore(renderList, i);
        webglObject = renderList[i];
        object = webglObject.object;
        webglObject.render = false;
        if (object.visible)
          if (!(!!object.$isMesh || false) || !object.frustumCulled || t2.contains$1(0, object)) {
            t4 = t1.$mul(0, object.get$matrixWorld());
            object._modelViewMatrix = t4;
            t4 = S.calcInverse(t4);
            object._normalMatrix = t4;
            t4.transpose$0();
            meshMaterial = object.get$material();
            if (meshMaterial != null) {
              webglObject.transparent = meshMaterial;
              webglObject.opaque = null;
            }
            webglObject.render = true;
            if (t3) {
              t4 = object.get$matrixWorld().getTranslation$0();
              this._vector3 = t4;
              t4.applyProjection$1(this._projScreenMatrix);
              webglObject.z = this._vector3.storage[2];
            }
          }
      }
      if (t3)
        J.sort$1$ax(renderList, this.get$painterSort());
      renderList = scene.__webglObjectsImmediate;
      il = renderList.length;
      for (i = 0; i < il; ++i) {
        if (i >= renderList.length)
          return H.ioore(renderList, i);
        webglObject = renderList[i];
        object = webglObject.object;
        if (object.visible) {
          t2 = t1.$mul(0, object.get$matrixWorld());
          object._modelViewMatrix = t2;
          t2 = S.calcInverse(t2);
          object._normalMatrix = t2;
          t2.transpose$0();
          material = object.get$material();
          if (material.transparent) {
            webglObject.transparent = material;
            webglObject.opaque = null;
          } else {
            webglObject.opaque = material;
            webglObject.transparent = null;
          }
        }
      }
      this.setBlending$1(0);
      this.renderObjects$8(scene.__webglObjects, true, "opaque", camera, lights, fog, false, null);
      this.renderObjectsImmediate$7(scene.__webglObjectsImmediate, "opaque", camera, lights, fog, false, null);
      this.renderObjects$8(scene.__webglObjects, false, "transparent", camera, lights, fog, true, null);
      this.renderObjectsImmediate$7(scene.__webglObjectsImmediate, "transparent", camera, lights, fog, true, null);
      this.renderPlugins$3(this.renderPluginsPost, scene, camera);
      this.setDepthTest$1(true);
      this.setDepthWrite$1(true);
    },
    _render$2: function(scene, camera) {
      return this._render$4$forceClear$renderTarget(scene, camera, false, null);
    },
    renderPlugins$3: function(plugins, scene, camera) {
      C.JSArray_methods.forEach$1(plugins, new S.WebGLRenderer_renderPlugins_closure(this, scene, camera));
    },
    renderObjects$8: function(renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial) {
      var start, end, delta, t1, i, object, buffer, material, webglObject, t2;
      if (reverse) {
        start = renderList.length - 1;
        end = -1;
        delta = -1;
      } else {
        end = renderList.length;
        start = 0;
        delta = 1;
      }
      for (t1 = materialType === "opaque", i = start, object = null, buffer = null, material = null; i !== end; i += delta) {
        if (i < 0 || i >= renderList.length)
          return H.ioore(renderList, i);
        webglObject = renderList[i];
        if (webglObject.render) {
          object = webglObject.object;
          buffer = webglObject.buffer;
          material = t1 ? webglObject.opaque : webglObject.transparent;
          if (material == null)
            continue;
          if (useBlending)
            this.setBlending$4(material.blending, material.blendEquation, material.blendSrc, material.blendDst);
          this.setDepthTest$1(material.depthTest);
          t2 = material.depthWrite;
          if (this._oldDepthWrite !== t2) {
            J.depthMask$1$x(this._gl, t2);
            this._oldDepthWrite = t2;
          }
          this.setPolygonOffset$3(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
          this.setMaterialFaces$1(material);
          this.renderBuffer$6(camera, lights, fog, material, buffer, object);
        }
      }
    },
    renderObjectsImmediate$7: function(renderList, materialType, camera, lights, fog, useBlending, overrideMaterial) {
      var il, material, i, webglObject, material0;
      il = renderList.length;
      for (material = null, i = 0; i < il; ++i) {
        if (i >= renderList.length)
          return H.ioore(renderList, i);
        webglObject = renderList[i];
        if (webglObject.object.visible) {
          material0 = webglObject.$index(0, materialType);
          material = material0;
          continue;
        }
      }
    },
    renderImmediateObject$5: function(camera, lights, fog, material, object) {
      var program = this.setProgram$5(camera, lights, fog, material, object);
      this._currentGeometryGroupHash = -1;
      this.setMaterialFaces$1(material);
      object.render$1(new S.WebGLRenderer_renderImmediateObject_closure(this, material, program));
    },
    sortFacesByMaterial$2: function(geometry, material) {
      var hash_map, fl, f, t1, groupHash, t2;
      hash_map = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      geometry.set$geometryGroups(P.LinkedHashMap_LinkedHashMap$_empty(null, null));
      fl = geometry.faces.length;
      for (f = 0; f < fl; ++f) {
        t1 = geometry.faces;
        if (f >= t1.length)
          return H.ioore(t1, f);
        if (hash_map.$index(0, "0") == null)
          hash_map.$indexSet(0, "0", P.LinkedHashMap_LinkedHashMap$_literal(["hash", "0", "counter", 0], null, null));
        groupHash = H.S(J.$index$asx(hash_map.$index(0, "0"), "hash")) + "_" + H.S(J.$index$asx(hash_map.$index(0, "0"), "counter"));
        if (geometry.get$geometryGroups().$index(0, groupHash) == null) {
          t1 = geometry.get$geometryGroups();
          t2 = new S.WebGLGeometry(null, null, null, null, null, null, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
          t2.WebGLGeometry_faces3 = [];
          t2.WebGLGeometry_faces4 = [];
          t2.WebGLGeometry_materialIndex = H.Primitives_parseInt("0", null, null);
          t2.WebGLGeometry_verticesCount = 0;
          t2.WebGLGeometry_numMorphTargets = 0;
          t2.WebGLGeometry_numMorphNormals = 0;
          t1.$indexSet(0, groupHash, t2);
        }
        t1 = geometry.get$geometryGroups().$index(0, groupHash).WebGLGeometry_verticesCount;
        if (typeof t1 !== "number")
          return t1.$add();
        if (t1 + 3 > 65535) {
          t1 = hash_map.$index(0, "0");
          t2 = J.getInterceptor$asx(t1);
          t2.$indexSet(t1, "counter", J.$add$ns(t2.$index(t1, "counter"), 1));
          groupHash = H.S(J.$index$asx(hash_map.$index(0, "0"), "hash")) + "_" + H.S(J.$index$asx(hash_map.$index(0, "0"), "counter"));
          if (geometry.get$geometryGroups().$index(0, groupHash) == null) {
            t1 = geometry.get$geometryGroups();
            t2 = new S.WebGLGeometry(null, null, null, null, null, null, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
            t2.WebGLGeometry_faces3 = [];
            t2.WebGLGeometry_faces4 = [];
            t2.WebGLGeometry_materialIndex = H.Primitives_parseInt("0", null, null);
            t2.WebGLGeometry_verticesCount = 0;
            t2.WebGLGeometry_numMorphTargets = 0;
            t2.WebGLGeometry_numMorphNormals = 0;
            t1.$indexSet(0, groupHash, t2);
          }
        }
        geometry.get$geometryGroups().$index(0, groupHash).WebGLGeometry_faces3.push(f);
        t1 = geometry.get$geometryGroups().$index(0, groupHash);
        t2 = t1.WebGLGeometry_verticesCount;
        if (typeof t2 !== "number")
          return t2.$add();
        t1.WebGLGeometry_verticesCount = t2 + 3;
      }
      geometry.set$geometryGroupsList([]);
      geometry.get$geometryGroups().forEach$1(0, new S.WebGLRenderer_sortFacesByMaterial_closure(this, geometry));
      return;
    },
    initWebGLObjects$1: function(scene) {
      var t1, t2, ol, o;
      if (scene.__webglObjects == null) {
        scene.__webglObjects = [];
        scene.__webglObjectsImmediate = [];
        scene.__webglSprites = [];
        scene.__webglFlares = [];
      }
      for (; t1 = scene.__objectsAdded, t1.length > 0;) {
        this.addObject$2(t1[0], scene);
        C.JSArray_methods.removeAt$1(scene.__objectsAdded, 0);
      }
      for (; t1 = scene.__objectsRemoved, t1.length > 0;) {
        t1 = t1[0];
        if (!t1.$isMesh)
          t2 = !!t1.$isLine;
        else
          t2 = true;
        if (t2)
          this.removeInstances$2(scene.__webglObjects, t1);
        t1.__webglActive = false;
        C.JSArray_methods.removeAt$1(scene.__objectsRemoved, 0);
      }
      for (ol = scene.__webglObjects.length, o = 0; o < ol; ++o) {
        t1 = scene.__webglObjects;
        if (o >= t1.length)
          return H.ioore(t1, o);
        this.updateObject$1(t1[o].object);
      }
    },
    addObject$2: function(object, scene) {
      var geometry, t1, material, nvertices;
      geometry = object.geometry;
      if (!object.__webglInit) {
        object.__webglInit = true;
        t1 = new T.Matrix4(new Float32Array(16));
        t1.setIdentity$0();
        object._modelViewMatrix = t1;
        object._normalMatrix = new T.Matrix3(new Float32Array(9));
        if (geometry != null && !geometry.get$__webglInit())
          geometry.set$__webglInit(true);
        if (!!object.$isMesh) {
          material = object.Mesh_material;
          if (object.geometry instanceof S.Geometry && true) {
            if (geometry.get$geometryGroups() == null)
              this.sortFacesByMaterial$2(geometry, material);
            geometry.get$geometryGroups().forEach$1(0, new S.WebGLRenderer_addObject_closure(this, object, geometry));
          }
        } else if (!!object.$isLine)
          if (geometry.get$__webglVertexBuffer() == null) {
            geometry.set$__webglVertexBuffer(J.createBuffer$0$x(this._gl));
            geometry.set$__webglColorBuffer(J.createBuffer$0$x(this._gl));
            geometry.set$__webglLineDistanceBuffer(J.createBuffer$0$x(this._gl));
            ++this.info.memory.geometries;
            nvertices = geometry.vertices.length;
            t1 = nvertices * 3;
            geometry.set$__vertexArray(new Float32Array(t1));
            geometry.set$__colorArray(new Float32Array(t1));
            geometry.set$__lineDistanceArray(new Float32Array(nvertices));
            geometry.set$__webglLineCount(nvertices);
            this.initCustomAttributes$2(geometry, object);
            geometry.verticesNeedUpdate = true;
            geometry.colorsNeedUpdate = true;
            geometry.lineDistancesNeedUpdate = true;
          }
      }
      if (!object.__webglActive) {
        if (!!object.$isMesh)
          geometry.get$geometryGroups().forEach$1(0, new S.WebGLRenderer_addObject_closure0(this, object, scene));
        else {
          t1 = !!object.$isLine || false;
          if (t1)
            scene.__webglObjects.push(new S.WebGLObject(geometry, object, null, null, true, 0));
        }
        object.__webglActive = true;
      }
    },
    updateObject$1: function(object) {
      var geometry, il, t1, i, t2, geometryGroup, material;
      geometry = object.geometry;
      if (!!object.$isMesh) {
        for (il = geometry.get$geometryGroupsList().length, t1 = !geometry._dynamic, i = 0; i < il; ++i) {
          t2 = geometry.get$geometryGroupsList();
          if (i >= t2.length)
            return H.ioore(t2, i);
          geometryGroup = t2[i];
          material = object.Mesh_material;
          if (geometry.buffersNeedUpdate)
            this.initMeshBuffers$2(geometryGroup, object);
          if (geometry.verticesNeedUpdate || geometry.morphTargetsNeedUpdate || geometry.elementsNeedUpdate || geometry.uvsNeedUpdate || geometry.normalsNeedUpdate || geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate || false)
            this.setMeshBuffers$5(geometryGroup, object, 35048, t1, material);
        }
        geometry.verticesNeedUpdate = false;
        geometry.morphTargetsNeedUpdate = false;
        geometry.elementsNeedUpdate = false;
        geometry.uvsNeedUpdate = false;
        geometry.normalsNeedUpdate = false;
        geometry.colorsNeedUpdate = false;
        geometry.tangentsNeedUpdate = false;
        geometry.buffersNeedUpdate = false;
      } else if (!!object.$isLine) {
        if (geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.lineDistancesNeedUpdate || false)
          this.setLineBuffers$2(geometry, 35048);
        geometry.verticesNeedUpdate = false;
        geometry.colorsNeedUpdate = false;
        geometry.lineDistancesNeedUpdate = false;
      }
    },
    removeInstances$2: function(objlist, object) {
      var o;
      for (o = objlist.length - 1; o >= 0; --o) {
        if (o >= objlist.length)
          return H.ioore(objlist, o);
        if (objlist[o].object === object)
          C.JSArray_methods.removeAt$1(objlist, o);
      }
    },
    initMaterial$4: function(material, lights, fog, object) {
      var shaderID, t1, maxLightCount, maxShadows, maxBones, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, attributes, i;
      if (!!material.$isMeshBasicMaterial)
        shaderID = "basic";
      else if (!!material.$isLineBasicMaterial)
        shaderID = "basic";
      else
        shaderID = null;
      if (shaderID != null) {
        t1 = S.ShaderLib().$index(0, shaderID);
        material._uniforms = S.UniformsUtils_clone(t1.$index(0, "uniforms"));
        material._vertexShader = t1.$index(0, "vertexShader");
        material._fragmentShader = t1.$index(0, "fragmentShader");
      }
      maxLightCount = this.allocateLights$1(lights);
      maxShadows = this.allocateShadows$1(lights);
      maxBones = this.allocateBones$1(object);
      t1 = material._fragmentShader;
      t2 = material._vertexShader;
      t3 = material._uniforms;
      t4 = !!material.$isShaderMaterial;
      t5 = t4 ? material.attributes : P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t4 = t4 ? material.defines : P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t6 = !!material.$isTextureMapping ? material.map : null;
      t7 = !!material.$isEnvironmentMapping;
      t8 = t7 ? material.envMap : null;
      t9 = t7 ? material.lightMap : null;
      t7 = t7 ? material.specularMap : null;
      t10 = material.vertexColors;
      t11 = material.fog;
      t12 = !!material.$isSkinning && material.get$skinning();
      if (this.supportsBoneTextures === true)
        t13 = false;
      else
        t13 = false;
      t14 = !!material.$isMorphing;
      t15 = t14 && material.get$morphTargets();
      t16 = t14 && material.get$morphNormals();
      t17 = this.maxMorphTargets;
      t18 = this.maxMorphNormals;
      t19 = maxLightCount.$index(0, "directional");
      t20 = maxLightCount.$index(0, "point");
      t21 = maxLightCount.$index(0, "spot");
      t22 = maxLightCount.$index(0, "hemi");
      t23 = this.shadowMapEnabled && object.receiveShadow;
      t24 = material.side;
      t10 = this.buildProgram$41$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$flipSided$fog$fogExp$lightMap$map$maxBones$maxDirLights$maxHemiLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$normalMap$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapType$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround(shaderID, t1, t2, t3, t5, t4, material.alphaTest, 0, 0, null, t24 === 2, t8, t24 === 1, fog, false, t9, t6, maxBones, t19, t22, t18, t17, t20, maxShadows, t21, false, t16, t15, null, false, this.shadowMapCascade, this.shadowMapDebug, t23, this.shadowMapType, false, t12, t7, t11, t13, t10, false);
      material._program = t10;
      attributes = t10.attributes;
      if (t14 && material.get$morphTargets()) {
        H.interceptedTypeCast(material, "$isMorphing");
        material.set$numSupportedMorphTargets(0);
        for (i = 0; i < t17; ++i) {
          t1 = attributes.$index(0, "morphTarget" + i);
          if (typeof t1 !== "number")
            return t1.$ge();
          if (t1 >= 0)
            material.set$numSupportedMorphTargets(material.get$numSupportedMorphTargets() + 1);
        }
      }
      if (t14 && material.get$morphNormals()) {
        H.interceptedTypeCast(material, "$isMorphing");
        material.set$numSupportedMorphNormals(0);
        for (i = 0; i < t18; ++i) {
          t1 = attributes.$index(0, "morphNormal" + i);
          if (typeof t1 !== "number")
            return t1.$ge();
          if (t1 >= 0)
            material.set$numSupportedMorphNormals(material.get$numSupportedMorphNormals() + 1);
        }
      }
      material._uniformsList = [];
      material._uniforms.forEach$1(0, new S.WebGLRenderer_initMaterial_closure(material));
    },
    setProgram$5: function(camera, lights, fog, material, object) {
      var t1, program, p_uniforms, m_uniforms, t2, refreshMaterial, t3, t4, t5;
      this._usedTextureUnits = 0;
      if (material.needsUpdate) {
        if (material._program != null)
          this.deallocateMaterial$1(material);
        this.initMaterial$4(material, lights, fog, object);
        material.needsUpdate = false;
      }
      t1 = J.getInterceptor(material);
      if (!!t1.$isMorphing && material.get$morphTargets()) {
        H.interceptedTypeCast(object, "$isMesh");
        if (object.__webglMorphTargetInfluences == null)
          object.__webglMorphTargetInfluences = new Float32Array(H._checkLength(this.maxMorphTargets));
      }
      program = material._program;
      p_uniforms = program.uniforms;
      m_uniforms = material._uniforms;
      t2 = this._currentProgram;
      if (program == null ? t2 != null : program !== t2) {
        J.useProgram$1$x(this._gl, program.glProgram);
        this._currentProgram = program;
        refreshMaterial = true;
      } else
        refreshMaterial = false;
      t2 = material.id;
      if (t2 !== this._currentMaterialId) {
        this._currentMaterialId = t2;
        refreshMaterial = true;
      }
      if (refreshMaterial || camera !== this._currentCamera) {
        J.uniformMatrix4fv$3$x(this._gl, p_uniforms.$index(0, "projectionMatrix"), false, camera.projectionMatrix.storage);
        if (camera !== this._currentCamera)
          this._currentCamera = camera;
      }
      if (refreshMaterial) {
        t2 = !!t1.$isShaderMaterial && material.lights;
        if (t2) {
          if (this._lightsNeedUpdate) {
            this.setupLights$2(program, lights);
            this._lightsNeedUpdate = false;
          }
          t2 = this._lights;
          J.set$value$x(m_uniforms.$index(0, "ambientLightColor"), t2.$index(0, "ambient"));
          J.set$value$x(m_uniforms.$index(0, "directionalLightColor"), J.$index$asx(t2.$index(0, "directional"), "colors"));
          J.set$value$x(m_uniforms.$index(0, "directionalLightDirection"), J.$index$asx(t2.$index(0, "directional"), "positions"));
          J.set$value$x(m_uniforms.$index(0, "pointLightColor"), J.$index$asx(t2.$index(0, "point"), "colors"));
          J.set$value$x(m_uniforms.$index(0, "pointLightPosition"), J.$index$asx(t2.$index(0, "point"), "positions"));
          J.set$value$x(m_uniforms.$index(0, "pointLightDistance"), J.$index$asx(t2.$index(0, "point"), "distances"));
          J.set$value$x(m_uniforms.$index(0, "spotLightColor"), J.$index$asx(t2.$index(0, "spot"), "colors"));
          J.set$value$x(m_uniforms.$index(0, "spotLightPosition"), J.$index$asx(t2.$index(0, "spot"), "positions"));
          J.set$value$x(m_uniforms.$index(0, "spotLightDistance"), J.$index$asx(t2.$index(0, "spot"), "distances"));
          J.set$value$x(m_uniforms.$index(0, "spotLightDirection"), J.$index$asx(t2.$index(0, "spot"), "directions"));
          J.set$value$x(m_uniforms.$index(0, "spotLightAngleCos"), J.$index$asx(t2.$index(0, "spot"), "anglesCos"));
          J.set$value$x(m_uniforms.$index(0, "spotLightExponent"), J.$index$asx(t2.$index(0, "spot"), "exponents"));
          J.set$value$x(m_uniforms.$index(0, "hemisphereLightSkyColor"), J.$index$asx(t2.$index(0, "hemi"), "skyColors"));
          J.set$value$x(m_uniforms.$index(0, "hemisphereLightGroundColor"), J.$index$asx(t2.$index(0, "hemi"), "groundColors"));
          J.set$value$x(m_uniforms.$index(0, "hemisphereLightDirection"), J.$index$asx(t2.$index(0, "hemi"), "positions"));
        }
        if (!t1.$isMeshBasicMaterial)
          t2 = false;
        else
          t2 = true;
        if (t2) {
          J.set$value$x(m_uniforms.$index(0, "opacity"), material.opacity);
          t2 = this.gammaInput;
          if (t2)
            J.get$value$x(m_uniforms.$index(0, "diffuse")).copyGammaToLinear$1(material.color);
          else
            J.set$value$x(m_uniforms.$index(0, "diffuse"), material.color);
          t3 = !!t1.$isTextureMapping;
          if (t3)
            J.set$value$x(m_uniforms.$index(0, "map"), material.map);
          t4 = !!t1.$isEnvironmentMapping;
          if (t4) {
            J.set$value$x(m_uniforms.$index(0, "lightMap"), material.lightMap);
            J.set$value$x(m_uniforms.$index(0, "specularMap"), material.specularMap);
          }
          if (t3)
            ;
          if (t4)
            ;
          if (t4) {
            J.set$value$x(m_uniforms.$index(0, "envMap"), material.envMap);
            t3 = m_uniforms.$index(0, "flipEnvMap");
            J.set$value$x(t3, -1);
            t3 = material.reflectivity;
            if (t2)
              J.set$value$x(m_uniforms.$index(0, "reflectivity"), t3);
            else
              J.set$value$x(m_uniforms.$index(0, "reflectivity"), t3);
            J.set$value$x(m_uniforms.$index(0, "refractionRatio"), material.refractionRatio);
            J.set$value$x(m_uniforms.$index(0, "combine"), material.combine);
            t2 = m_uniforms.$index(0, "useRefract");
            J.set$value$x(t2, 0);
          }
        }
        if (!!t1.$isLineBasicMaterial) {
          J.set$value$x(m_uniforms.$index(0, "diffuse"), material.color);
          J.set$value$x(m_uniforms.$index(0, "opacity"), material.opacity);
        }
        if (object.receiveShadow && !material.shadowPass)
          this.refreshUniformsShadow$2(m_uniforms, lights);
        this.loadUniformsGeneric$2(program, material._uniformsList);
        t2 = !t1.$isShaderMaterial;
        if (t2) {
          if (!!t1.$isEnvironmentMapping)
            ;
          t3 = false;
        } else
          t3 = true;
        if (t3)
          if (p_uniforms.$index(0, "cameraPosition") != null) {
            this._vector3 = camera.matrixWorld.getTranslation$0();
            t3 = this._gl;
            t4 = p_uniforms.$index(0, "cameraPosition");
            t5 = this._vector3.storage;
            J.uniform3f$4$x(t3, t4, t5[0], t5[1], t5[2]);
          }
        if (t2)
          t1 = !!t1.$isSkinning && material.get$skinning();
        else
          t1 = true;
        if (t1)
          if (p_uniforms.$index(0, "viewMatrix") != null)
            J.uniformMatrix4fv$3$x(this._gl, p_uniforms.$index(0, "viewMatrix"), false, camera.matrixWorldInverse.storage);
      }
      t1 = this._gl;
      t2 = p_uniforms.$index(0, "modelViewMatrix");
      t3 = object._modelViewMatrix;
      J.uniformMatrix4fv$3$x(t1, t2, false, t3.get$storage(t3));
      if (p_uniforms.$index(0, "normalMatrix") != null)
        J.uniformMatrix3fv$3$x(this._gl, p_uniforms.$index(0, "normalMatrix"), false, object._normalMatrix.storage);
      if (p_uniforms.$index(0, "modelMatrix") != null) {
        t1 = this._gl;
        t2 = p_uniforms.$index(0, "modelMatrix");
        t3 = object.get$matrixWorld();
        J.uniformMatrix4fv$3$x(t1, t2, false, t3.get$storage(t3));
      }
      return program;
    },
    refreshUniformsShadow$2: function(uniforms, lights) {
      var il, j, i, light, t1, j0;
      if (uniforms.containsKey$1(0, "shadowMatrix"))
        for (il = lights.length, j = 0, i = 0; i < il; ++i) {
          if (i >= lights.length)
            return H.ioore(lights, i);
          light = lights[i];
          if (!light.get$castShadow())
            continue;
          t1 = !!light.$isDirectionalLight && !light.shadowCascade;
          if (t1) {
            j0 = j + 1;
            if (J.$lt$n(J.get$length$asx(J.get$value$x(uniforms.$index(0, "shadowMap"))), j0)) {
              J.set$length$asx(J.get$value$x(uniforms.$index(0, "shadowMap")), j0);
              J.set$length$asx(J.get$value$x(uniforms.$index(0, "shadowMapSize")), j0);
              J.set$length$asx(J.get$value$x(uniforms.$index(0, "shadowMatrix")), j0);
              J.set$length$asx(J.get$value$x(uniforms.$index(0, "shadowDarkness")), j0);
              J.set$length$asx(J.get$value$x(uniforms.$index(0, "shadowBias")), j0);
            }
            J.$indexSet$ax(J.get$value$x(uniforms.$index(0, "shadowMap")), j, light.get$shadowMap());
            J.$indexSet$ax(J.get$value$x(uniforms.$index(0, "shadowMapSize")), j, light.shadowMapSize);
            J.$indexSet$ax(J.get$value$x(uniforms.$index(0, "shadowMatrix")), j, light.shadowMatrix);
            J.$indexSet$ax(J.get$value$x(uniforms.$index(0, "shadowDarkness")), j, light.shadowDarkness);
            J.$indexSet$ax(J.get$value$x(uniforms.$index(0, "shadowBias")), j, light.shadowBias);
            j = j0;
          }
        }
    },
    getTextureUnit$0: function() {
      var unit, t1, line;
      unit = this._usedTextureUnits;
      t1 = this.maxTextures;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (unit >= t1) {
        line = "WebGLRenderer: trying to use " + unit + " texture units while this GPU supports only " + H.S(this.maxTextures);
        H.printString(line);
      }
      ++this._usedTextureUnits;
      return unit;
    },
    loadUniformsGeneric$2: function(program, uniforms) {
      var jl, t1, uniform, value, type, texture, textureUnit, i, il, j, $location, t2, textures, t3;
      jl = uniforms.length;
      for (t1 = program.uniforms, uniform = null, value = null, type = null, texture = null, textureUnit = null, i = null, il = null, j = 0; j < jl; ++j) {
        if (j >= uniforms.length)
          return H.ioore(uniforms, j);
        $location = t1.$index(0, uniforms[j][1]);
        if ($location == null)
          continue;
        if (j >= uniforms.length)
          return H.ioore(uniforms, j);
        uniform = uniforms[j][0];
        type = J.get$type$x(uniform);
        value = uniform.get$typedValue();
        if (type === "i")
          J.uniform1i$2$x(this._gl, $location, value);
        else if (type === "f")
          J.uniform1f$2$x(this._gl, $location, value);
        else if (type === "v2") {
          t2 = J.getInterceptor$x(value);
          J.uniform2f$3$x(this._gl, $location, t2.get$x(value), t2.get$y(value));
        } else if (type === "v3") {
          t2 = J.getInterceptor$x(value);
          J.uniform3f$4$x(this._gl, $location, t2.get$x(value), t2.get$y(value), t2.get$z(value));
        } else if (type === "v4") {
          t2 = J.getInterceptor$x(value);
          J.uniform4f$5$x(this._gl, $location, t2.get$x(value), t2.get$y(value), t2.get$z(value), t2.get$w(value));
        } else if (type === "c") {
          t2 = J.getInterceptor$x(value);
          J.uniform3f$4$x(this._gl, $location, t2.get$r(value), value.get$g(), t2.get$b(value));
        } else if (type === "iv1")
          J.uniform1iv$2$x(this._gl, $location, value);
        else if (type === "iv")
          J.uniform3iv$2$x(this._gl, $location, value);
        else if (type === "fv1")
          J.uniform1fv$2$x(this._gl, $location, value);
        else if (type === "fv")
          J.uniform3fv$2$x(this._gl, $location, value);
        else if (type === "v2v")
          J.uniform2fv$2$x(this._gl, $location, value);
        else if (type === "v3v")
          J.uniform3fv$2$x(this._gl, $location, value);
        else if (type === "v4v")
          J.uniform4fv$2$x(this._gl, $location, value);
        else if (type === "m2")
          J.uniformMatrix2fv$3$x(this._gl, $location, false, value);
        else if (type === "m3")
          J.uniformMatrix3fv$3$x(this._gl, $location, false, value);
        else if (type === "m4")
          J.uniformMatrix4fv$3$x(this._gl, $location, false, value);
        else if (type === "m4v")
          J.uniformMatrix4fv$3$x(this._gl, $location, false, value);
        else if (type === "t") {
          texture = uniform._value;
          textureUnit = this.getTextureUnit$0();
          J.uniform1i$2$x(this._gl, $location, textureUnit);
          if (texture == null)
            continue;
          texture.get$image();
          this.setTexture$2(texture, textureUnit);
        } else if (type === "tv") {
          textures = uniform._value;
          t2 = J.getInterceptor$ax(textures);
          t3 = new Int32Array(H._ensureNativeList(J.toList$0$ax(t2.map$1(textures, new S.WebGLRenderer_loadUniformsGeneric_closure(this)))));
          uniform._three$_array = t3;
          J.uniform1iv$2$x(this._gl, $location, t3);
          il = t2.get$length(textures);
          if (typeof il !== "number")
            return H.iae(il);
          i = 0;
          for (; i < il; ++i) {
            texture = J.$index$asx(uniform._value, i);
            t2 = uniform._three$_array;
            if (i >= t2.length)
              return H.ioore(t2, i);
            textureUnit = t2[i];
            if (texture == null)
              continue;
            this.setTexture$2(texture, textureUnit);
          }
        }
      }
    },
    setColorGamma$4: function(array, offset, color, intensitySq) {
      var t1, t2;
      t1 = J.getInterceptor$x(color);
      t2 = J.getInterceptor$ax(array);
      t2.$indexSet(array, offset, t1.get$r(color) * t1.get$r(color) * intensitySq);
      t2.$indexSet(array, offset + 1, color.get$g() * color._g * intensitySq);
      t1 = color._b;
      t2.$indexSet(array, offset + 2, t1 * t1 * intensitySq);
    },
    setColorLinear$4: function(array, offset, color, intensity) {
      var t1, t2;
      t1 = J.get$r$x(color);
      if (typeof intensity !== "number")
        return H.iae(intensity);
      t2 = J.getInterceptor$ax(array);
      t2.$indexSet(array, offset, t1 * intensity);
      t2.$indexSet(array, offset + 1, color.get$g() * intensity);
      t2.$indexSet(array, offset + 2, color._b * intensity);
    },
    setupLights$2: function(program, lights) {
      var zlights, dirColors, dirPositions, pointColors, pointDistances, spotColors, hemiSkyColors, hemiGroundColors, ll, t1, t2, t3, l, r, g, b, color, skyColor, groundColor, intensity, intensitySq, position, distance, dirLength, pointLength, spotLength, hemiLength, dirCount, pointCount, spotCount, hemiCount, dirOffset, pointOffset, spotOffset, hemiOffset, light, t4, t5, t6, l0;
      zlights = this._lights;
      dirColors = J.$index$asx(zlights.$index(0, "directional"), "colors");
      dirPositions = J.$index$asx(zlights.$index(0, "directional"), "positions");
      pointColors = J.$index$asx(zlights.$index(0, "point"), "colors");
      J.$index$asx(zlights.$index(0, "point"), "positions");
      pointDistances = J.$index$asx(zlights.$index(0, "point"), "distances");
      spotColors = J.$index$asx(zlights.$index(0, "spot"), "colors");
      J.$index$asx(zlights.$index(0, "spot"), "positions");
      J.$index$asx(zlights.$index(0, "spot"), "distances");
      J.$index$asx(zlights.$index(0, "spot"), "directions");
      J.$index$asx(zlights.$index(0, "spot"), "anglesCos");
      J.$index$asx(zlights.$index(0, "spot"), "exponents");
      hemiSkyColors = J.$index$asx(zlights.$index(0, "hemi"), "skyColors");
      hemiGroundColors = J.$index$asx(zlights.$index(0, "hemi"), "groundColors");
      J.$index$asx(zlights.$index(0, "hemi"), "positions");
      ll = lights.length;
      for (t1 = this.gammaInput, t2 = J.getInterceptor$asx(dirColors), t3 = J.getInterceptor$asx(dirPositions), l = 0, r = 0, g = 0, b = 0, color = null, skyColor = null, groundColor = null, intensity = null, intensitySq = null, position = null, distance = null, dirLength = 0, pointLength = 0, spotLength = 0, hemiLength = 0, dirCount = 0, pointCount = 0, spotCount = 0, hemiCount = 0, dirOffset = 0, pointOffset = 0, spotOffset = 0, hemiOffset = 0; l < ll; ++l) {
        if (l >= lights.length)
          return H.ioore(lights, l);
        light = lights[l];
        t4 = J.getInterceptor(light);
        t5 = !!t4.$isDirectionalLight;
        t6 = !t5;
        if ((!t6 || false) && light.get$onlyShadow() || t4.get$visible(light) !== true)
          continue;
        color = t4.get$color(light);
        if (t6)
          t4 = false;
        else
          t4 = true;
        if (t4) {
          intensity = light.get$intensity();
          distance = light.distance;
        }
        if (t5) {
          ++dirCount;
          if (!light.visible)
            continue;
          this._direction = light.matrixWorld.getTranslation$0();
          t4 = light.target.matrixWorld.getTranslation$0();
          this._vector3 = t4;
          this._direction.sub$1(t4);
          this._direction.normalize$0(0);
          t4 = this._direction.storage;
          if (t4[0] === 0 && t4[1] === 0 && t4[2] === 0)
            continue;
          dirOffset = dirLength * 3;
          t4 = dirOffset + 3;
          t2.set$length(dirColors, t4);
          t3.set$length(dirPositions, t4);
          t3.$indexSet(dirPositions, dirOffset, this._direction.storage[0]);
          t3.$indexSet(dirPositions, dirOffset + 1, this._direction.storage[1]);
          t3.$indexSet(dirPositions, dirOffset + 2, this._direction.storage[2]);
          if (t1) {
            if (typeof intensity !== "number")
              return intensity.$mul();
            this.setColorGamma$4(dirColors, dirOffset, color, intensity * intensity);
          } else
            this.setColorLinear$4(dirColors, dirOffset, color, intensity);
          ++dirLength;
        }
      }
      ll = P.max(t2.get$length(dirColors), dirCount * 3);
      for (l = dirLength * 3; l < ll; ++l)
        t2.$indexSet(dirColors, l, 0);
      t1 = J.getInterceptor$asx(pointColors);
      ll = P.max(t1.get$length(pointColors), pointCount * 3);
      for (l = pointLength * 3; l < ll; ++l)
        t1.$indexSet(pointColors, l, 0);
      t1 = J.getInterceptor$asx(spotColors);
      ll = P.max(t1.get$length(spotColors), spotCount * 3);
      for (l = spotLength * 3; l < ll; ++l)
        t1.$indexSet(spotColors, l, 0);
      t1 = J.getInterceptor$asx(hemiSkyColors);
      t2 = hemiCount * 3;
      ll = P.max(t1.get$length(hemiSkyColors), t2);
      for (l = hemiLength * 3, l0 = l; l0 < ll; ++l0)
        t1.$indexSet(hemiSkyColors, l0, 0);
      t1 = J.getInterceptor$asx(hemiGroundColors);
      ll = P.max(t1.get$length(hemiGroundColors), t2);
      for (; l < ll; ++l)
        t1.$indexSet(hemiGroundColors, l, 0);
      J.$indexSet$ax(zlights.$index(0, "directional"), "length", dirLength);
      J.$indexSet$ax(zlights.$index(0, "point"), "length", pointLength);
      J.$indexSet$ax(zlights.$index(0, "spot"), "length", spotLength);
      J.$indexSet$ax(zlights.$index(0, "hemi"), "length", hemiLength);
      J.$indexSet$ax(zlights.$index(0, "ambient"), 0, r);
      J.$indexSet$ax(zlights.$index(0, "ambient"), 1, g);
      J.$indexSet$ax(zlights.$index(0, "ambient"), 2, b);
    },
    setMaterialFaces$1: function(material) {
      var t1, doubleSided, flipSided;
      t1 = material.side;
      doubleSided = t1 === 2;
      flipSided = t1 === 1;
      if (this._oldDoubleSided !== doubleSided) {
        t1 = this._gl;
        if (doubleSided)
          J.disable$1$x(t1, 2884);
        else
          J.enable$1$x(t1, 2884);
        this._oldDoubleSided = doubleSided;
      }
      if (this._oldFlipSided !== flipSided) {
        t1 = this._gl;
        if (flipSided)
          J.frontFace$1$x(t1, 2304);
        else
          J.frontFace$1$x(t1, 2305);
        this._oldFlipSided = flipSided;
      }
    },
    setDepthTest$1: function(depthTest) {
      var t1;
      if (this._oldDepthTest !== depthTest) {
        t1 = this._gl;
        if (depthTest)
          J.enable$1$x(t1, 2929);
        else
          J.disable$1$x(t1, 2929);
        this._oldDepthTest = depthTest;
      }
    },
    setDepthWrite$1: function(depthWrite) {
      if (this._oldDepthWrite !== depthWrite) {
        J.depthMask$1$x(this._gl, depthWrite);
        this._oldDepthWrite = depthWrite;
      }
    },
    setPolygonOffset$3: function(polygonoffset, factor, units) {
      var t1;
      if (this._oldPolygonOffset !== polygonoffset) {
        t1 = this._gl;
        if (polygonoffset)
          J.enable$1$x(t1, 32823);
        else
          J.disable$1$x(t1, 32823);
        this._oldPolygonOffset = polygonoffset;
      }
      if (polygonoffset)
        t1 = this._oldPolygonOffsetFactor !== factor || this._oldPolygonOffsetUnits !== units;
      else
        t1 = false;
      if (t1) {
        J.polygonOffset$2$x(this._gl, factor, units);
        this._oldPolygonOffsetFactor = factor;
        this._oldPolygonOffsetUnits = units;
      }
    },
    setBlending$4: function(blending, blendEquation, blendSrc, blendDst) {
      var t1;
      if (blending !== this._oldBlending) {
        if (blending === 0)
          J.disable$1$x(this._gl, 3042);
        else if (blending === 2) {
          J.enable$1$x(this._gl, 3042);
          J.blendEquation$1$x(this._gl, 32774);
          J.blendFunc$2$x(this._gl, 770, 1);
        } else if (blending === 3) {
          J.enable$1$x(this._gl, 3042);
          J.blendEquation$1$x(this._gl, 32774);
          J.blendFunc$2$x(this._gl, 0, 769);
        } else if (blending === 4) {
          J.enable$1$x(this._gl, 3042);
          J.blendEquation$1$x(this._gl, 32774);
          J.blendFunc$2$x(this._gl, 0, 768);
        } else {
          t1 = this._gl;
          if (blending === 5)
            J.enable$1$x(t1, 3042);
          else {
            J.enable$1$x(t1, 3042);
            J.blendEquationSeparate$2$x(this._gl, 32774, 32774);
            J.blendFuncSeparate$4$x(this._gl, 770, 771, 1, 771);
          }
        }
        this._oldBlending = blending;
      }
      if (blending === 5) {
        t1 = this._oldBlendEquation;
        if (blendEquation == null ? t1 != null : blendEquation !== t1) {
          J.blendEquation$1$x(this._gl, this.paramThreeToGL$1(blendEquation));
          this._oldBlendEquation = blendEquation;
        }
        t1 = this._oldBlendSrc;
        if (blendSrc == null ? t1 == null : blendSrc === t1) {
          t1 = this._oldBlendDst;
          t1 = blendDst == null ? t1 != null : blendDst !== t1;
        } else
          t1 = true;
        if (t1) {
          J.blendFunc$2$x(this._gl, this.paramThreeToGL$1(blendSrc), this.paramThreeToGL$1(blendDst));
          this._oldBlendSrc = blendSrc;
          this._oldBlendDst = blendDst;
        }
      } else {
        this._oldBlendEquation = null;
        this._oldBlendSrc = null;
        this._oldBlendDst = null;
      }
    },
    setBlending$1: function(blending) {
      return this.setBlending$4(blending, null, null, null);
    },
    generateDefines$1: function(defines) {
      var t1, chunks;
      t1 = {};
      t1.chunk_0 = null;
      chunks = [];
      defines.forEach$1(0, new S.WebGLRenderer_generateDefines_closure(t1, chunks));
      return C.JSArray_methods.join$1(chunks, "\n");
    },
    buildProgram$41$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$flipSided$fog$fogExp$lightMap$map$maxBones$maxDirLights$maxHemiLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$normalMap$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapType$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround: function(shaderID, fragmentShader, vertexShader, uniforms, attributes, defines, alphaTest, boneTextureHeight, boneTextureWidth, bumpMap, doubleSided, envMap, flipSided, fog, fogExp, lightMap, map, maxBones, maxDirLights, maxHemiLights, maxMorphNormals, maxMorphTargets, maxPointLights, maxShadows, maxSpotLights, metal, morphNormals, morphTargets, normalMap, perPixel, shadowMapCascade, shadowMapDebug, shadowMapEnabled, shadowMapType, sizeAttenuation, skinning, specularMap, useFog, useVertexTexture, vertexColors, wrapAround) {
      var t1, chunks, code, t2, pl, p, program, shadowMapTypeDefine, customDefines, glprogram, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, prefix_vertex, glFragmentShader, glVertexShader, $status, error, identifiers, i;
      t1 = {};
      chunks = [];
      if (shaderID != null)
        chunks.push(shaderID);
      else {
        chunks.push(fragmentShader);
        chunks.push(vertexShader);
      }
      defines.forEach$1(0, new S.WebGLRenderer_buildProgram_closure(chunks));
      code = C.JSArray_methods.join$0(chunks) + "maxDirLights" + maxDirLights + "maxPointLights" + maxPointLights + "maxSpotLights" + maxSpotLights + "maxHemiLights" + maxHemiLights + "maxShadows" + maxShadows + "maxBones" + H.S(maxBones) + "map" + H.S(map) + "envMap" + H.S(envMap) + "lightMap" + H.S(lightMap) + "bumpMap" + H.S(bumpMap) + "normalMap" + H.S(normalMap) + "specularMap" + H.S(specularMap) + "vertexColors" + vertexColors + "fog" + H.S(fog) + "useFog" + useFog + "fogExp" + fogExp + "skinning" + skinning + "useVertexTexture" + useVertexTexture + "boneTextureWidth" + boneTextureWidth + "boneTextureHeight" + boneTextureHeight + "morphTargets" + morphTargets + "morphNormals" + morphNormals + "perPixel" + perPixel + "wrapAround" + wrapAround + "doubleSided" + doubleSided + "flipSided" + flipSided + "shadowMapEnabled" + shadowMapEnabled + "shadowMapType" + shadowMapType + "shadowMapDebug" + shadowMapDebug + "shadowMapCascade" + shadowMapCascade + "sizeAttenuation" + sizeAttenuation;
      t2 = this._programs;
      pl = t2.length;
      for (p = 0; p < pl; ++p) {
        program = t2[p];
        if (program.code === code) {
          ++program.usedTimes;
          return program;
        }
      }
      if (shadowMapType === 1)
        shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
      else
        shadowMapTypeDefine = shadowMapType === 2 ? "SHADOWMAP_TYPE_PCF_SOFT" : "SHADOWMAP_TYPE_BASIC";
      customDefines = this.generateDefines$1(defines);
      glprogram = J.createProgram$0$x(this._gl);
      t2 = "precision " + this.precision + " float;";
      t3 = this.supportsVertexTextures === true ? "#define VERTEX_TEXTURES" : "";
      t4 = this.gammaInput;
      t5 = t4 ? "#define GAMMA_INPUT" : "";
      t6 = this.gammaOutput;
      t7 = t6 ? "#define GAMMA_OUTPUT" : "";
      t8 = this.physicallyBasedShading;
      t9 = t8 ? "#define PHYSICALLY_BASED_SHADING" : "";
      t10 = "#define MAX_DIR_LIGHTS " + maxDirLights;
      t11 = "#define MAX_POINT_LIGHTS " + maxPointLights;
      t12 = "#define MAX_SPOT_LIGHTS " + maxSpotLights;
      t13 = "#define MAX_HEMI_LIGHTS " + maxHemiLights;
      t14 = "#define MAX_SHADOWS " + maxShadows;
      t15 = "#define MAX_BONES " + H.S(maxBones);
      t16 = vertexColors !== 0 ? "#define USE_COLOR" : "";
      t17 = skinning ? "#define USE_SKINNING" : "";
      t18 = useVertexTexture ? "#define BONE_TEXTURE" : "";
      t19 = "#define N_BONE_PIXEL_X " + C.JSInt_methods.toStringAsFixed$1(boneTextureWidth, 1);
      t20 = "#define N_BONE_PIXEL_Y " + C.JSInt_methods.toStringAsFixed$1(boneTextureHeight, 1);
      t21 = morphTargets ? "#define USE_MORPHTARGETS" : "";
      t22 = morphNormals ? "#define USE_MORPHNORMALS" : "";
      t23 = perPixel ? "#define PHONG_PER_PIXEL" : "";
      t24 = wrapAround ? "#define WRAP_AROUND" : "";
      t25 = doubleSided ? "#define DOUBLE_SIDED" : "";
      t26 = flipSided ? "#define FLIP_SIDED" : "";
      t27 = shadowMapEnabled ? "#define USE_SHADOWMAP" : "";
      t28 = shadowMapEnabled ? "#define " + shadowMapTypeDefine : "";
      t29 = shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "";
      t30 = shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "";
      prefix_vertex = C.JSArray_methods.join$1([t2, customDefines, t3, t5, t7, t9, t10, t11, t12, t13, t14, t15, "", "", "", "", "", "", t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "attribute vec2 uv2;", "#ifdef USE_COLOR", "attribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "attribute vec3 morphTarget0;", "attribute vec3 morphTarget1;", "attribute vec3 morphTarget2;", "attribute vec3 morphTarget3;", "#ifdef USE_MORPHNORMALS", "attribute vec3 morphNormal0;", "attribute vec3 morphNormal1;", "attribute vec3 morphNormal2;", "attribute vec3 morphNormal3;", "#else", "attribute vec3 morphTarget4;", "attribute vec3 morphTarget5;", "attribute vec3 morphTarget6;", "attribute vec3 morphTarget7;", "#endif", "#endif", "#ifdef USE_SKINNING", "attribute vec4 skinIndex;", "attribute vec4 skinWeight;", "#endif", ""], "\n");
      t2 = "precision " + this.precision + " float;";
      t3 = "#define MAX_DIR_LIGHTS " + maxDirLights;
      t5 = "#define MAX_POINT_LIGHTS " + maxPointLights;
      t7 = "#define MAX_SPOT_LIGHTS " + maxSpotLights;
      t9 = "#define MAX_HEMI_LIGHTS " + maxHemiLights;
      t10 = "#define MAX_SHADOWS " + maxShadows;
      t11 = alphaTest !== 0 ? "#define ALPHATEST " + alphaTest : "";
      t4 = t4 ? "#define GAMMA_INPUT" : "";
      t6 = t6 ? "#define GAMMA_OUTPUT" : "";
      t8 = t8 ? "#define PHYSICALLY_BASED_SHADING" : "";
      t12 = useFog && false ? "#define USE_FOG" : "";
      if (useFog)
        ;
      t13 = vertexColors !== 0 ? "#define USE_COLOR" : "";
      t14 = metal ? "#define METAL" : "";
      t15 = perPixel ? "#define PHONG_PER_PIXEL" : "";
      t16 = wrapAround ? "#define WRAP_AROUND" : "";
      t17 = doubleSided ? "#define DOUBLE_SIDED" : "";
      t18 = flipSided ? "#define FLIP_SIDED" : "";
      t19 = shadowMapEnabled ? "#define USE_SHADOWMAP" : "";
      t20 = shadowMapEnabled ? "#define " + shadowMapTypeDefine : "";
      t21 = shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "";
      glFragmentShader = this.getShader$2("fragment", C.JSArray_methods.join$1([t2, "", customDefines, "", t3, t5, t7, t9, t10, t11, t4, t6, t8, t12, "", "", "", "", "", "", "", t13, t14, t15, t16, t17, t18, t19, t20, t21, shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", ""], "\n") + H.S(fragmentShader));
      glVertexShader = this.getShader$2("vertex", prefix_vertex + H.S(vertexShader));
      J.attachShader$2$x(this._gl, glprogram, glVertexShader);
      J.attachShader$2$x(this._gl, glprogram, glFragmentShader);
      J.linkProgram$1$x(this._gl, glprogram);
      if (J.getProgramParameter$2$x(this._gl, glprogram, 35714) !== true) {
        $status = J.getProgramParameter$2$x(this._gl, glprogram, 35715);
        error = J.getError$0$x(this._gl);
        P.print("Could not initialise shader\nVALIDATE_STATUS: " + H.S($status) + ", gl error [" + H.S(error) + "]");
      }
      J.deleteShader$1$x(this._gl, glFragmentShader);
      J.deleteShader$1$x(this._gl, glVertexShader);
      program = new S.Program(this._programs_counter++, glprogram, code, 1, P.LinkedHashMap_LinkedHashMap$_empty(null, null), P.LinkedHashMap_LinkedHashMap$_empty(null, null));
      t1.identifiers_0 = null;
      identifiers = ["viewMatrix", "modelViewMatrix", "projectionMatrix", "normalMatrix", "modelMatrix", "cameraPosition", "morphTargetInfluences"];
      t1.identifiers_0 = identifiers;
      if (useVertexTexture)
        identifiers.push("boneTexture");
      else
        identifiers.push("boneGlobalMatrices");
      uniforms.forEach$1(0, new S.WebGLRenderer_buildProgram_closure0(t1));
      this.cacheUniformLocations$2(program, t1.identifiers_0);
      t1.identifiers_0 = ["position", "normal", "uv", "uv2", "tangent", "color", "skinIndex", "skinWeight", "lineDistance"];
      for (i = 0; i < maxMorphTargets; ++i)
        t1.identifiers_0.push("morphTarget" + i);
      for (i = 0; i < maxMorphNormals; ++i)
        t1.identifiers_0.push("morphNormal" + i);
      if (attributes != null)
        attributes.forEach$1(0, new S.WebGLRenderer_buildProgram_closure1(t1));
      this.cacheAttributeLocations$2(program, t1.identifiers_0);
      this._programs.push(program);
      this.info.memory.programs = this._programs.length;
      return program;
    },
    cacheUniformLocations$2: function(program, identifiers) {
      var l, t1, t2, i, id;
      l = identifiers.length;
      for (t1 = program.uniforms, t2 = program.glProgram, i = 0; i < l; ++i) {
        if (i >= identifiers.length)
          return H.ioore(identifiers, i);
        id = identifiers[i];
        t1.$indexSet(0, id, J.getUniformLocation$2$x(this._gl, t2, id));
      }
    },
    cacheAttributeLocations$2: function(program, identifiers) {
      var l, t1, t2, i, id;
      l = identifiers.length;
      for (t1 = program.attributes, t2 = program.glProgram, i = 0; i < l; ++i) {
        if (i >= identifiers.length)
          return H.ioore(identifiers, i);
        id = identifiers[i];
        t1.$indexSet(0, id, J.getAttribLocation$2$x(this._gl, t2, id));
      }
    },
    addLineNumbers$1: function(string) {
      var chunks, il, i, i0, t1;
      chunks = string.split("\n");
      il = chunks.length;
      for (i = 0; i < il; i = i0) {
        i0 = i + 1;
        t1 = "" + i0 + ":";
        if (i >= chunks.length)
          return H.ioore(chunks, i);
        t1 += H.S(chunks[i]);
        if (i >= chunks.length)
          return H.ioore(chunks, i);
        chunks[i] = t1;
      }
      return C.JSArray_methods.join$1(chunks, "\n");
    },
    getShader$2: function(type, string) {
      var shader;
      if (type === "fragment")
        shader = J.createShader$1$x(this._gl, 35632);
      else
        shader = type === "vertex" ? J.createShader$1$x(this._gl, 35633) : null;
      J.shaderSource$2$x(this._gl, shader, string);
      J.compileShader$1$x(this._gl, shader);
      if (J.getShaderParameter$2$x(this._gl, shader, 35713) !== true) {
        P.print(J.getShaderInfoLog$1$x(this._gl, shader));
        P.print(this.addLineNumbers$1(string));
        return;
      }
      return shader;
    },
    setTextureParameters$3: function(textureType, texture, isImagePowerOfTwo) {
      var t1, t2, t3;
      t1 = this._gl;
      t2 = texture.magFilter;
      t3 = texture.minFilter;
      if (isImagePowerOfTwo) {
        J.texParameteri$3$x(t1, textureType, 10242, this.paramThreeToGL$1(texture.wrapS));
        J.texParameteri$3$x(this._gl, textureType, 10243, this.paramThreeToGL$1(texture.wrapT));
        J.texParameteri$3$x(this._gl, textureType, 10240, this.paramThreeToGL$1(t2));
        J.texParameteri$3$x(this._gl, textureType, 10241, this.paramThreeToGL$1(t3));
      } else {
        J.texParameteri$3$x(t1, textureType, 10242, 33071);
        J.texParameteri$3$x(this._gl, textureType, 10243, 33071);
        J.texParameteri$3$x(this._gl, textureType, 10240, this.filterFallback$1(t2));
        J.texParameteri$3$x(this._gl, textureType, 10241, this.filterFallback$1(t3));
      }
      if (this._glExtensionTextureFilterAnisotropic != null && texture.type !== 15) {
        t1 = texture.anisotropy;
        if (t1 > 1 || texture.get$_data().$index(0, "__oldAnisotropy") != null) {
          J.texParameterf$3$x(this._gl, textureType, 34046, P.min(t1, this.maxAnisotropy));
          texture.get$_data().$indexSet(0, "__oldAnisotropy", t1);
        }
      }
    },
    setTexture$2: function(texture, slot) {
      var t1, glFormat, glType, mipmaps, i, mipmap;
      if (texture.get$needsUpdate()) {
        if (texture.$index(0, "__webglInit") == null) {
          texture.$indexSet(0, "__webglInit", true);
          texture.$indexSet(0, "__webglTexture", J.createTexture$0$x(this._gl));
          ++this.info.memory.textures;
        }
        J.activeTexture$1$x(this._gl, 33984 + slot);
        J.bindTexture$2$x(this._gl, 3553, texture.$index(0, "__webglTexture"));
        t1 = this._gl;
        J.pixelStorei$2$x(t1, 37440, texture.flipY ? 1 : 0);
        t1 = this._gl;
        J.pixelStorei$2$x(t1, 37441, texture.premultiplyAlpha ? 1 : 0);
        J.pixelStorei$2$x(this._gl, 3317, texture.unpackAlignment);
        t1 = C.JSNull_methods.get$width(texture.image);
        t1.$and(0, t1.$sub(0, 1));
        glFormat = this.paramThreeToGL$1(texture.format);
        glType = this.paramThreeToGL$1(texture.type);
        this.setTextureParameters$3(3553, texture, false);
        mipmaps = texture.mipmaps;
        t1 = mipmaps.length;
        if (t1 > 0 && false) {
          for (i = 0; i < t1; ++i) {
            if (i >= mipmaps.length)
              return H.ioore(mipmaps, i);
            mipmap = mipmaps[i];
            J.texImage2D$6$x(this._gl, 3553, i, glFormat, glFormat, glType, mipmap);
          }
          texture.set$generateMipmaps(false);
        }
        if (texture.get$generateMipmaps() && false)
          J.generateMipmap$1$x(this._gl, 3553);
        texture.needsUpdate = false;
      } else {
        J.activeTexture$1$x(this._gl, 33984 + slot);
        J.bindTexture$2$x(this._gl, 3553, texture.$index(0, "__webglTexture"));
      }
    },
    setupFrameBuffer$3: function(framebuffer, renderTarget, textureTarget) {
      var t1, t2;
      J.bindFramebuffer$2$x(this._gl, 36160, framebuffer);
      t1 = this._gl;
      t2 = renderTarget.__data;
      if (t2 == null) {
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        renderTarget.__data = t2;
      }
      J.framebufferTexture2D$5$x(t1, 36160, 36064, textureTarget, t2.$index(0, "__webglTexture"), 0);
    },
    setupRenderBuffer$2: function(renderbuffer, renderTarget) {
      var t1, t2, t3, t4;
      J.bindRenderbuffer$2$x(this._gl, 36161, renderbuffer);
      t1 = renderTarget.depthBuffer;
      if (t1 && !renderTarget.stencilBuffer) {
        J.renderbufferStorage$4$x(this._gl, 36161, 33189, renderTarget.width, renderTarget.height);
        J.framebufferRenderbuffer$4$x(this._gl, 36160, 36096, 36161, renderbuffer);
      } else {
        t1 = t1 && renderTarget.stencilBuffer;
        t2 = renderTarget.width;
        t3 = this._gl;
        t4 = renderTarget.height;
        if (t1) {
          J.renderbufferStorage$4$x(t3, 36161, 34041, t2, t4);
          J.framebufferRenderbuffer$4$x(this._gl, 36160, 33306, 36161, renderbuffer);
        } else
          J.renderbufferStorage$4$x(t3, 36161, 32854, t2, t4);
      }
    },
    setRenderTarget$1: function(renderTarget) {
      var t1, t2, isTargetPowerOfTwo, glFormat, glType, framebuffer, width, height, vx, vy;
      t1 = renderTarget != null;
      if (t1 && renderTarget.__webglFramebuffer == null) {
        t2 = J.createTexture$0$x(this._gl);
        renderTarget.get$_data().$indexSet(0, "__webglTexture", t2);
        ++this.info.memory.textures;
        t2 = renderTarget.width;
        if ((t2 & t2 - 1) === 0) {
          t2 = renderTarget.height;
          isTargetPowerOfTwo = (t2 & t2 - 1) === 0;
        } else
          isTargetPowerOfTwo = false;
        glFormat = this.paramThreeToGL$1(renderTarget.format);
        glType = this.paramThreeToGL$1(renderTarget.type);
        renderTarget.__webglFramebuffer = J.createFramebuffer$0$x(this._gl);
        renderTarget.__webglRenderbuffer = J.createRenderbuffer$0$x(this._gl);
        J.bindTexture$2$x(this._gl, 3553, renderTarget.get$_data().$index(0, "__webglTexture"));
        this.setTextureParameters$3(3553, renderTarget, isTargetPowerOfTwo);
        J.texImage2DTyped$9$x(this._gl, 3553, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
        this.setupFrameBuffer$3(renderTarget.__webglFramebuffer, renderTarget, 3553);
        this.setupRenderBuffer$2(renderTarget.__webglRenderbuffer, renderTarget);
        if (isTargetPowerOfTwo)
          J.generateMipmap$1$x(this._gl, 3553);
        J.bindTexture$2$x(this._gl, 3553, null);
        J.bindRenderbuffer$2$x(this._gl, 36161, null);
        J.bindFramebuffer$2$x(this._gl, 36160, null);
      }
      if (t1) {
        framebuffer = renderTarget.__webglFramebuffer;
        width = renderTarget.width;
        height = renderTarget.height;
        vx = 0;
        vy = 0;
      } else {
        width = this._viewportWidth;
        height = this._viewportHeight;
        vx = this._viewportX;
        vy = this._viewportY;
        framebuffer = null;
      }
      t1 = this._currentFramebuffer;
      if (framebuffer == null ? t1 != null : framebuffer !== t1) {
        J.bindFramebuffer$2$x(this._gl, 36160, framebuffer);
        J.viewport$4$x(this._gl, vx, vy, width, height);
        this._currentFramebuffer = framebuffer;
      }
      this._currentWidth = width;
      this._currentHeight = height;
    },
    filterFallback$1: function(f) {
      if (f === 3 || f === 4 || f === 5)
        return 9728;
      return 9729;
    },
    paramThreeToGL$1: function(p) {
      if (p === 0)
        return 10497;
      if (p === 1)
        return 33071;
      if (p === 2)
        return 33648;
      if (p === 3)
        return 9728;
      if (p === 4)
        return 9984;
      if (p === 5)
        return 9986;
      if (p === 6)
        return 9729;
      if (p === 7)
        return 9985;
      if (p === 8)
        return 9987;
      if (p === 10)
        return 5121;
      if (p === 1016)
        return 32819;
      if (p === 1017)
        return 32820;
      if (p === 1018)
        return 33635;
      if (p === 9)
        return 5120;
      if (p === 11)
        return 5122;
      if (p === 12)
        return 5123;
      if (p === 13)
        return 5124;
      if (p === 14)
        return 5125;
      if (p === 15)
        return 5126;
      if (p === 16)
        return 6406;
      if (p === 17)
        return 6407;
      if (p === 18)
        return 6408;
      if (p === 19)
        return 6409;
      if (p === 20)
        return 6410;
      if (p === 100)
        return 32774;
      if (p === 101)
        return 32778;
      if (p === 102)
        return 32779;
      if (p === 200)
        return 0;
      if (p === 201)
        return 1;
      if (p === 202)
        return 768;
      if (p === 203)
        return 769;
      if (p === 204)
        return 770;
      if (p === 205)
        return 771;
      if (p === 206)
        return 772;
      if (p === 207)
        return 773;
      if (p === 208)
        return 774;
      if (p === 209)
        return 775;
      if (p === 210)
        return 776;
      if (this._glExtensionCompressedTextureS3TC != null) {
        if (p === 2001)
          return 33776;
        if (p === 2002)
          return 33777;
        if (p === 2003)
          return 33778;
        if (p === 2004)
          return 33779;
      }
      return 0;
    },
    allocateBones$1: function(object) {
      var t1, nVertexUniforms, nVertexMatrices;
      if (this.supportsBoneTextures === true)
        t1 = false;
      else
        t1 = false;
      if (t1)
        return 1024;
      else {
        nVertexUniforms = J.getParameter$1$x(this._gl, 36347);
        if (typeof nVertexUniforms !== "number")
          return nVertexUniforms.$sub();
        nVertexMatrices = C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor((nVertexUniforms - 20) / 4)));
        return nVertexMatrices;
      }
    },
    allocateLights$1: function(lights) {
      var ll, l, dirLights, pointLights, spotLights, hemiLights, light, t1;
      ll = lights.length;
      for (l = 0, dirLights = 0, pointLights = 0, spotLights = 0, hemiLights = 0; l < ll; ++l) {
        if (l >= lights.length)
          return H.ioore(lights, l);
        light = lights[l];
        t1 = light instanceof S.DirectionalLight;
        if ((t1 || false) && light.get$onlyShadow())
          continue;
        if (t1)
          ++dirLights;
      }
      return P.LinkedHashMap_LinkedHashMap$_literal(["directional", dirLights, "point", pointLights, "spot", spotLights, "hemi", hemiLights], null, null);
    },
    allocateShadows$1: function(lights) {
      var ll, l, maxShadows, light;
      ll = lights.length;
      for (l = 0, maxShadows = 0; l < ll; ++l) {
        if (l >= lights.length)
          return H.ioore(lights, l);
        light = lights[l];
        if (!light.get$castShadow())
          continue;
        if (!!light.$isDirectionalLight && !light.shadowCascade)
          ++maxShadows;
      }
      return maxShadows;
    },
    initGL$0: function() {
      var error, t1, exception;
      try {
        t1 = J.getContext3d$5$alpha$antialias$premultipliedAlpha$preserveDrawingBuffer$stencil$x(this.canvas, this.alpha, this.antialias, this.premultipliedAlpha, this.preserveDrawingBuffer, this.stencil);
        this._gl = t1;
        if (t1 == null)
          throw H.wrapException("Error creating WebGL context.");
      } catch (exception) {
        t1 = H.unwrapException(exception);
        error = t1;
        P.print(error);
      }
      this._glExtensionTextureFloat = J.getExtension$1$x(this._gl, "OES_texture_float");
      this._glExtensionStandardDerivatives = J.getExtension$1$x(this._gl, "OES_standard_derivatives");
      t1 = J.getExtension$1$x(this._gl, "EXT_texture_filter_anisotropic");
      this._glExtensionTextureFilterAnisotropic = t1;
      if (t1 == null) {
        t1 = J.getExtension$1$x(this._gl, "MOZ_EXT_texture_filter_anisotropic");
        this._glExtensionTextureFilterAnisotropic = t1;
      }
      if (t1 == null)
        this._glExtensionTextureFilterAnisotropic = J.getExtension$1$x(this._gl, "WEBKIT_EXT_texture_filter_anisotropic");
      t1 = this._glExtensionCompressedTextureS3TC;
      if (t1 == null) {
        t1 = J.getExtension$1$x(this._gl, "WEBGL_compressed_texture_s3tc");
        this._glExtensionCompressedTextureS3TC = t1;
      }
      if (t1 == null) {
        t1 = J.getExtension$1$x(this._gl, "MOZ_WEBGL_compressed_texture_s3tc");
        this._glExtensionCompressedTextureS3TC = t1;
      }
      if (t1 == null)
        this._glExtensionCompressedTextureS3TC = J.getExtension$1$x(this._gl, "WEBKIT_WEBGL_compressed_texture_s3tc");
      if (this._glExtensionTextureFloat == null)
        P.print("THREE.WebGLRenderer: Float textures not supported.");
      if (this._glExtensionStandardDerivatives == null)
        P.print("THREE.WebGLRenderer: Standard derivatives not supported.");
      if (this._glExtensionTextureFilterAnisotropic == null)
        P.print("THREE.WebGLRenderer: Anisotropic texture filtering not supported.");
      if (this._glExtensionCompressedTextureS3TC == null)
        P.print("THREE.WebGLRenderer: S3TC compressed textures not supported.");
    },
    WebGLRenderer$10$alpha$antialias$canvas$clearAlpha$clearColorHex$devicePixelRatio$precision$premultipliedAlpha$preserveDrawingBuffer$stencil: function(alpha, antialias, canvas, clearAlpha, clearColorHex, devicePixelRatio, precision, premultipliedAlpha, preserveDrawingBuffer, stencil) {
      var t1, _vertexShaderPrecisionHighpFloat, _vertexShaderPrecisionMediumpFloat, _fragmentShaderPrecisionHighpFloat, _fragmentShaderPrecisionMediumpFloat, highpAvailable, mediumpAvailable, t2, depthShader, depthUniforms;
      t1 = window.devicePixelRatio != null ? window.devicePixelRatio : 1;
      this.devicePixelRatio = t1;
      this._lights = P.LinkedHashMap_LinkedHashMap$_literal(["ambient", [0, 0, 0], "directional", P.LinkedHashMap_LinkedHashMap$_literal(["length", 0, "colors", [], "positions", []], null, null), "point", P.LinkedHashMap_LinkedHashMap$_literal(["length", 0, "colors", [], "positions", [], "distances", []], null, null), "spot", P.LinkedHashMap_LinkedHashMap$_literal(["length", 0, "colors", [], "positions", [], "distances", [], "directions", [], "anglesCos", [], "exponents", []], null, null), "hemi", P.LinkedHashMap_LinkedHashMap$_literal(["length", 0, "skyColors", [], "groundColors", [], "positions", []], null, null)], null, null);
      if (this.canvas == null)
        this.canvas = W.CanvasElement_CanvasElement(null, null);
      this.initGL$0();
      J.clearColor$4$x(this._gl, 0, 0, 0, 1);
      J.clearDepth$1$x(this._gl, 1);
      J.clearStencil$1$x(this._gl, 0);
      J.enable$1$x(this._gl, 2929);
      J.depthFunc$1$x(this._gl, 515);
      J.frontFace$1$x(this._gl, 2305);
      J.cullFace$1$x(this._gl, 1029);
      J.enable$1$x(this._gl, 2884);
      J.enable$1$x(this._gl, 3042);
      J.blendEquation$1$x(this._gl, 32774);
      J.blendFunc$2$x(this._gl, 770, 771);
      t1 = this._clearColor;
      J.clearColor$4$x(this._gl, t1._r, t1._g, t1._b, this._clearAlpha);
      this.maxTextures = J.getParameter$1$x(this._gl, 34930);
      this.maxVertexTextures = J.getParameter$1$x(this._gl, 35660);
      this.maxTextureSize = J.getParameter$1$x(this._gl, 3379);
      this.maxCubemapSize = J.getParameter$1$x(this._gl, 34076);
      this.maxAnisotropy = this._glExtensionTextureFilterAnisotropic != null ? J.getParameter$1$x(this._gl, 34047) : 0;
      t1 = this.maxVertexTextures;
      if (typeof t1 !== "number")
        return t1.$gt();
      t1 = t1 > 0;
      this.supportsVertexTextures = t1;
      this.supportsBoneTextures = t1 && this._glExtensionTextureFloat != null;
      if (this._glExtensionCompressedTextureS3TC != null)
        J.getParameter$1$x(this._gl, 34467);
      _vertexShaderPrecisionHighpFloat = J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36338);
      _vertexShaderPrecisionMediumpFloat = J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36337);
      J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36336);
      _fragmentShaderPrecisionHighpFloat = J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36338);
      _fragmentShaderPrecisionMediumpFloat = J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36337);
      J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36336);
      J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36341);
      J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36340);
      J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36339);
      J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36341);
      J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36340);
      J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36339);
      t1 = _vertexShaderPrecisionHighpFloat.precision;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        t1 = _fragmentShaderPrecisionHighpFloat.precision;
        if (typeof t1 !== "number")
          return t1.$gt();
        highpAvailable = t1 > 0;
      } else
        highpAvailable = false;
      t1 = _vertexShaderPrecisionMediumpFloat.precision;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        t1 = _fragmentShaderPrecisionMediumpFloat.precision;
        if (typeof t1 !== "number")
          return t1.$gt();
        mediumpAvailable = t1 > 0;
      } else
        mediumpAvailable = false;
      if (this.precision === "highp" && !highpAvailable)
        if (mediumpAvailable) {
          this.precision = "mediump";
          P.print("WebGLRenderer: highp not supported, using mediump");
        } else {
          this.precision = "lowp";
          P.print("WebGLRenderer: highp and mediump not supported, using lowp");
        }
      if (this.precision === "mediump" && !mediumpAvailable) {
        this.precision = "lowp";
        P.print("WebGLRenderer: mediump not supported, using lowp");
      }
      t1 = S.Frustum$();
      t2 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t2.setIdentity$0();
      t2 = new S.ShadowMapPlugin(t1, t2, new T.Vector3(new Float32Array(H._checkLength(3))), new T.Vector3(new Float32Array(H._checkLength(3))), null, null, null, null, null, null);
      this.shadowMapPlugin = t2;
      t2._gl = this._gl;
      t2._renderer = this;
      depthShader = S.ShaderLib().$index(0, "depthRGBA");
      depthUniforms = S.UniformsUtils_clone(depthShader.$index(0, "uniforms"));
      t2._depthMaterial = S.ShaderMaterial$(0, null, 205, 100, 204, 1, true, true, true, depthShader.$index(0, "fragmentShader"), false, false, false, "", 1, false, false, 0, 0, 2, 0, false, false, depthUniforms, 0, depthShader.$index(0, "vertexShader"), true, false, 1);
      t2._depthMaterialMorph = S.ShaderMaterial$(0, null, 205, 100, 204, 1, true, true, true, depthShader.$index(0, "fragmentShader"), false, false, true, "", 1, false, false, 0, 0, 2, 0, false, false, depthUniforms, 0, depthShader.$index(0, "vertexShader"), true, false, 1);
      t2._depthMaterialSkin = S.ShaderMaterial$(0, null, 205, 100, 204, 1, true, true, true, depthShader.$index(0, "fragmentShader"), false, false, false, "", 1, false, false, 0, 0, 2, 0, true, false, depthUniforms, 0, depthShader.$index(0, "vertexShader"), true, false, 1);
      t1 = S.ShaderMaterial$(0, null, 205, 100, 204, 1, true, true, true, depthShader.$index(0, "fragmentShader"), false, false, true, "", 1, false, false, 0, 0, 2, 0, true, false, depthUniforms, 0, depthShader.$index(0, "vertexShader"), true, false, 1);
      t2._depthMaterialMorphSkin = t1;
      t2._depthMaterial.shadowPass = true;
      t2._depthMaterialMorph.shadowPass = true;
      t2._depthMaterialSkin.shadowPass = true;
      t1.shadowPass = true;
      this.renderPluginsPre.push(t2);
    }
  },
  WebGLRenderer_initCustomAttributes_closure: {
    "^": "Closure:6;this_0,geometry_1,nvertices_2",
    call$2: function(key, attribute) {
      var t1, t2;
      attribute.get$__webglInitialized();
      attribute.set$__webglInitialized(true);
      attribute.set$array(new Float32Array(H._checkLength(C.JSInt_methods.$mul(this.nvertices_2, attribute.get$size(attribute)))));
      t1 = this.this_0._gl;
      t2 = new S.Buffer(t1, null, null);
      t2._glbuffer = J.createBuffer$0$x(t1);
      attribute.set$buffer(0, t2);
      attribute.get$buffer(attribute).set$belongsToAttribute(key);
      attribute.set$needsUpdate(true);
      this.geometry_1.get$__webglCustomAttributesList().push(attribute);
    }
  },
  WebGLRenderer_initMeshBuffers_closure: {
    "^": "Closure:6;this_0,geometryGroup_1,nvertices_2",
    call$2: function(key, attribute) {
      var t1, buffer, originalAttribute;
      attribute.get$__webglInitialized();
      attribute.set$__webglInitialized(true);
      attribute.set$array(new Float32Array(H._checkLength(C.JSInt_methods.$mul(this.nvertices_2, attribute.get$size(attribute)))));
      t1 = this.this_0._gl;
      buffer = new S.Buffer(t1, null, null);
      buffer._glbuffer = J.createBuffer$0$x(t1);
      buffer.belongsToAttribute = key;
      attribute.set$buffer(0, buffer);
      originalAttribute = attribute.clone$0(0);
      originalAttribute.set$needsUpdate(true);
      attribute.set$__original(originalAttribute);
      this.geometryGroup_1.WebGLGeometry___webglCustomAttributesList.push(attribute);
    }
  },
  WebGLRenderer_disableAttributes_closure: {
    "^": "Closure:6;this_0",
    call$2: function(attribute, enabled) {
      var t1;
      if (enabled === true) {
        t1 = this.this_0;
        J.disableVertexAttribArray$1$x(t1._gl, H.Primitives_parseInt(attribute, null, null));
        t1._enabledAttributes.$indexSet(0, attribute, false);
      }
    }
  },
  WebGLRenderer_renderPlugins_closure: {
    "^": "Closure:2;this_0,scene_1,camera_2",
    call$1: function(plugin) {
      var t1 = this.this_0;
      t1._currentProgram = null;
      t1._currentCamera = null;
      t1._oldBlending = -1;
      t1._oldDepthTest = -1;
      t1._oldDepthWrite = -1;
      t1._oldDoubleSided = -1;
      t1._oldFlipSided = -1;
      t1._currentGeometryGroupHash = -1;
      t1._currentMaterialId = -1;
      t1._lightsNeedUpdate = true;
      plugin.render$4(this.scene_1, this.camera_2, t1._currentWidth, t1._currentHeight);
      t1._currentProgram = null;
      t1._currentCamera = null;
      t1._oldBlending = -1;
      t1._oldDepthTest = -1;
      t1._oldDepthWrite = -1;
      t1._oldDoubleSided = -1;
      t1._oldFlipSided = -1;
      t1._currentGeometryGroupHash = -1;
      t1._currentMaterialId = -1;
      t1._lightsNeedUpdate = true;
    }
  },
  WebGLRenderer_renderImmediateObject_closure: {
    "^": "Closure:2;this_0,material_1,program_2",
    call$1: function(object) {
      this.this_0.renderBufferImmediate$3(object, this.program_2, this.material_1);
    }
  },
  WebGLRenderer_sortFacesByMaterial_closure: {
    "^": "Closure:6;this_0,geometry_1",
    call$2: function(k, g) {
      J.set$id$x(g, this.this_0._geometryGroupCounter++);
      this.geometry_1.get$geometryGroupsList().push(g);
    }
  },
  WebGLRenderer_addObject_closure: {
    "^": "Closure:6;this_0,object_1,geometry_2",
    call$2: function(k, geometryGroup) {
      var t1;
      if (geometryGroup.get$__webglVertexBuffer() == null) {
        t1 = this.this_0;
        t1.createMeshBuffers$1(geometryGroup);
        t1.initMeshBuffers$2(geometryGroup, this.object_1);
        t1 = this.geometry_2;
        t1.verticesNeedUpdate = true;
        t1.morphTargetsNeedUpdate = true;
        t1.elementsNeedUpdate = true;
        t1.uvsNeedUpdate = true;
        t1.normalsNeedUpdate = true;
        t1.tangentsNeedUpdate = true;
        t1.colorsNeedUpdate = true;
      }
    }
  },
  WebGLRenderer_addObject_closure0: {
    "^": "Closure:6;this_3,object_4,scene_5",
    call$2: function(k, geometryGroup) {
      this.scene_5.__webglObjects.push(new S.WebGLObject(geometryGroup, this.object_4, null, null, true, 0));
    }
  },
  WebGLRenderer_initMaterial_closure: {
    "^": "Closure:6;material_0",
    call$2: function(k, u) {
      return this.material_0._uniformsList.push([u, k]);
    }
  },
  WebGLRenderer_loadUniformsGeneric_closure: {
    "^": "Closure:2;this_0",
    call$1: function(_) {
      return this.this_0.getTextureUnit$0();
    }
  },
  WebGLRenderer_generateDefines_closure: {
    "^": "Closure:6;box_0,chunks_1",
    call$2: function(d, value) {
      var chunk;
      if (!J.$eq(value, false)) {
        chunk = "#define " + H.S(d) + " " + H.S(value);
        this.box_0.chunk_0 = chunk;
        this.chunks_1.push(chunk);
      }
    }
  },
  WebGLRenderer_buildProgram_closure: {
    "^": "Closure:6;chunks_1",
    call$2: function(d, define) {
      var t1 = this.chunks_1;
      t1.push(d);
      t1.push(define);
    }
  },
  WebGLRenderer_buildProgram_closure0: {
    "^": "Closure:6;box_0",
    call$2: function(u, _) {
      return this.box_0.identifiers_0.push(u);
    }
  },
  WebGLRenderer_buildProgram_closure1: {
    "^": "Closure:6;box_0",
    call$2: function(a, _) {
      return this.box_0.identifiers_0.push(a);
    }
  },
  WebGLRendererInfo: {
    "^": "Object;memory,render",
    WebGLRendererInfo$0: function() {
      this.memory = new S.WebGLRendererMemoryInfo(0, 0, 0);
      this.render = new S.WebGLRendererRenderInfo(0, 0, 0, 0);
    },
    render$4: function(arg0, arg1, arg2, arg3) {
      return this.render.call$4(arg0, arg1, arg2, arg3);
    }
  },
  WebGLRendererMemoryInfo: {
    "^": "Object;programs,geometries,textures"
  },
  WebGLRendererRenderInfo: {
    "^": "Object;calls,vertices,faces,points"
  },
  Program: {
    "^": "Object;id*,glProgram,code,usedTimes,attributes,uniforms"
  },
  Buffer: {
    "^": "Object;context,_glbuffer,belongsToAttribute"
  },
  WebGLGeometry: {
    "^": "Object;id:WebGLGeometry_id*,WebGLGeometry_verticesCount,faces3:WebGLGeometry_faces3<,WebGLGeometry_faces4,WebGLGeometry_numMorphTargets,WebGLGeometry_numMorphNormals,WebGLGeometry_materialIndex,geometryGroups:WebGLGeometry_geometryGroups@,geometryGroupsList:WebGLGeometry_geometryGroupsList@,__webglVertexBuffer:WebGLGeometry___webglVertexBuffer@,__webglNormalBuffer:WebGLGeometry___webglNormalBuffer?,__webglTangentBuffer:WebGLGeometry___webglTangentBuffer?,__webglColorBuffer:WebGLGeometry___webglColorBuffer@,__webglLineDistanceBuffer:WebGLGeometry___webglLineDistanceBuffer@,WebGLGeometry___webglUVBuffer,WebGLGeometry___webglUV2Buffer,WebGLGeometry___webglSkinVertexABuffer,WebGLGeometry___webglSkinVertexBBuffer,WebGLGeometry___webglSkinIndicesBuffer,WebGLGeometry___webglSkinWeightsBuffer,__webglFaceBuffer:WebGLGeometry___webglFaceBuffer<,__webglLineBuffer:WebGLGeometry___webglLineBuffer<,__webglMorphTargetsBuffers:WebGLGeometry___webglMorphTargetsBuffers<,WebGLGeometry___webglMorphNormalsBuffers,__webglInit:WebGLGeometry___webglInit@,__inittedArrays:WebGLGeometry___inittedArrays<,__vertexArray:WebGLGeometry___vertexArray@,WebGLGeometry___normalArray,WebGLGeometry___tangentArray,__colorArray:WebGLGeometry___colorArray@,__lineDistanceArray:WebGLGeometry___lineDistanceArray@,WebGLGeometry___uvArray,WebGLGeometry___uv2Array,WebGLGeometry___skinVertexAArray,WebGLGeometry___skinVertexBArray,WebGLGeometry___skinIndexArray,WebGLGeometry___skinWeightArray,WebGLGeometry___faceArray,WebGLGeometry___lineArray,WebGLGeometry___morphTargetsArrays,WebGLGeometry___morphNormalsArrays,__webglFaceCount:WebGLGeometry___webglFaceCount<,__webglLineCount:WebGLGeometry___webglLineCount@,WebGLGeometry___webglParticleCount,WebGLGeometry___webglVertexCount,WebGLGeometry___sortArray,__webglCustomAttributesList:WebGLGeometry___webglCustomAttributesList<"
  },
  WebGLObject: {
    "^": "Object;buffer,object,opaque,transparent,render,z>",
    render$4: function(arg0, arg1, arg2, arg3) {
      return this.render.call$4(arg0, arg1, arg2, arg3);
    }
  },
  UniformsUtils_merge_closure: {
    "^": "Closure:21;merged_0",
    call$1: function(uniforms) {
      J.forEach$1$ax(uniforms, new S.UniformsUtils_merge__closure(this.merged_0));
    }
  },
  UniformsUtils_merge__closure: {
    "^": "Closure:6;merged_1",
    call$2: function(k, uniform) {
      this.merged_1.$indexSet(0, k, J.clone$0$x(uniform));
    }
  },
  UniformsUtils_clone_closure: {
    "^": "Closure:6;result_0",
    call$2: function(k, uniform) {
      this.result_0.$indexSet(0, k, J.clone$0$x(uniform));
    }
  },
  Uniform: {
    "^": "Object;type>,_value,_dirty,_three$_array",
    get$value: function(_) {
      return this._value;
    },
    set$value: function(_, v) {
      if (this.type === "f")
        v = J.toDouble$0$n(v);
      this._dirty = true;
      this._value = v;
    },
    get$typedValue: function() {
      var t1, values, t2, i, offset, t3, t4, t5, lst;
      if (!this._dirty && this._three$_array != null)
        return this._three$_array;
      t1 = this.type;
      if ((t1 === "fv" || t1 === "fv1") && !J.getInterceptor(this._value).$isFloat32List)
        this._three$_array = new Float32Array(H._ensureNativeList(J.map$1$ax(H.listTypeCast(this._value), new S.Uniform_typedValue_closure()).toList$0(0)));
      else if ((t1 === "iv" || t1 === "iv1") && !J.getInterceptor(this._value).$isInt32List)
        this._three$_array = new Int32Array(H._ensureNativeList(J.map$1$ax(H.listTypeCast(this._value), new S.Uniform_typedValue_closure0()).toList$0(0)));
      else if (t1 === "v2v") {
        values = H.subtypeCast(this._value, "$isList", [T.Vector2], "$asList");
        t1 = this._three$_array;
        if (t1 == null) {
          t1 = new Float32Array(H._checkLength(2 * J.get$length$asx(values)));
          this._three$_array = t1;
        }
        H.interceptedTypeCast(t1, "$isFloat32List");
        for (t2 = J.getInterceptor$asx(values), i = 0; i < t2.get$length(values); ++i) {
          offset = i * 2;
          t3 = J.get$x$x(t2.$index(values, i));
          t4 = t1.length;
          if (offset >= t4)
            return H.ioore(t1, offset);
          t1[offset] = t3;
          t3 = offset + 1;
          t5 = J.get$y$x(t2.$index(values, i));
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = t5;
        }
      } else if (t1 === "v3v") {
        values = H.subtypeCast(this._value, "$isList", [T.Vector3], "$asList");
        t1 = this._three$_array;
        if (t1 == null) {
          t1 = new Float32Array(H._checkLength(3 * J.get$length$asx(values)));
          this._three$_array = t1;
        }
        H.interceptedTypeCast(t1, "$isFloat32List");
        for (t2 = J.getInterceptor$asx(values), i = 0; i < t2.get$length(values); ++i) {
          offset = i * 3;
          t3 = J.get$x$x(t2.$index(values, i));
          t4 = t1.length;
          if (offset >= t4)
            return H.ioore(t1, offset);
          t1[offset] = t3;
          t3 = offset + 1;
          t5 = J.get$y$x(t2.$index(values, i));
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = t5;
          t5 = offset + 2;
          t3 = J.get$z$x(t2.$index(values, i));
          if (t5 >= t4)
            return H.ioore(t1, t5);
          t1[t5] = t3;
        }
      } else if (t1 === "v4v") {
        values = H.subtypeCast(this._value, "$isList", [T.Vector4], "$asList");
        t1 = this._three$_array;
        if (t1 == null) {
          t1 = new Float32Array(H._checkLength(4 * J.get$length$asx(values)));
          this._three$_array = t1;
        }
        H.interceptedTypeCast(t1, "$isFloat32List");
        for (t2 = J.getInterceptor$asx(values), i = 0; i < t2.get$length(values); ++i) {
          offset = i * 4;
          t3 = J.get$x$x(t2.$index(values, i));
          t4 = t1.length;
          if (offset >= t4)
            return H.ioore(t1, offset);
          t1[offset] = t3;
          t3 = offset + 1;
          t5 = J.get$y$x(t2.$index(values, i));
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = t5;
          t5 = offset + 2;
          t3 = J.get$z$x(t2.$index(values, i));
          if (t5 >= t4)
            return H.ioore(t1, t5);
          t1[t5] = t3;
          t3 = offset + 3;
          t5 = J.get$w$x(t2.$index(values, i));
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = t5;
        }
      } else if (t1 === "m2")
        this._three$_array = C.JSNull_methods.get$storage(H.interceptedTypeCast(this._value, "$isMatrix2"));
      else if (t1 === "m3")
        this._three$_array = H.interceptedTypeCast(this._value, "$isMatrix3").storage;
      else if (t1 === "m4")
        this._three$_array = H.interceptedTypeCast(this._value, "$isMatrix4").storage;
      else {
        t2 = this._value;
        if (t1 === "m4v") {
          lst = [];
          J.forEach$1$ax(H.subtypeCast(t2, "$isList", [T.Matrix4], "$asList"), new S.Uniform_typedValue_closure1(lst));
          this._three$_array = new Float32Array(H._ensureNativeList(lst));
        } else
          return t2;
      }
      return this._three$_array;
    },
    clone$0: function(_) {
      var dst, t1;
      dst = this._value;
      t1 = J.getInterceptor(dst);
      if (!!t1.$isColor || !!t1.$isVector2 || !!t1.$isVector3 || !!t1.$isVector4 || !!t1.$isMatrix4 || !!t1.$isTexture)
        dst = t1.clone$0(dst);
      else if (!!t1.$isList)
        dst = P.List_List$from(H.listTypeCast(dst), true, null);
      t1 = new S.Uniform(this.type, null, true, null);
      t1.set$value(0, dst);
      return t1;
    }
  },
  Uniform_typedValue_closure: {
    "^": "Closure:2;",
    call$1: function(_) {
      return J.toDouble$0$n(_);
    }
  },
  Uniform_typedValue_closure0: {
    "^": "Closure:2;",
    call$1: function(_) {
      return J.toInt$0$n(_);
    }
  },
  Uniform_typedValue_closure1: {
    "^": "Closure:2;lst_0",
    call$1: function(m) {
      C.JSArray_methods.addAll$1(this.lst_0, J.get$storage$x(m));
    }
  },
  Scene: {
    "^": "Object3D;fog,overrideMaterial,objects,lights,__objectsAdded,__objectsRemoved,__webglObjects,__webglObjectsImmediate,__webglSprites,__webglFlares,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,geometry,material,__webglInit,__webglActive,immediateRenderCallback,_modelViewMatrix,_normalMatrix,count,hasPositions,hasNormals,hasUvs,hasColors,positionArray,normalArray,uvArray,colorArray,__webglVertexBuffer,__webglNormalBuffer,__webglUVBuffer,__webglColorBuffer,__webglMorphTargetInfluences",
    addObject$1: function(object) {
      var i, t1, c;
      if (!!object.$isLight) {
        if (C.JSArray_methods.indexOf$1(this.lights, object) === -1)
          this.lights.push(object);
      } else if (!(!!object.$isCamera || false))
        if (C.JSArray_methods.indexOf$1(this.objects, object) === -1) {
          this.objects.push(object);
          this.__objectsAdded.push(object);
          i = C.JSArray_methods.indexOf$1(this.__objectsRemoved, object);
          if (i !== -1)
            C.JSArray_methods.removeAt$1(this.__objectsRemoved, i);
        }
      for (t1 = object.children, c = 0; c < t1.length; ++c)
        this.addObject$1(t1[c]);
    },
    removeObject$1: function(object) {
      var i, ai, t1, c;
      if (!!object.$isLight) {
        i = C.JSArray_methods.indexOf$1(this.lights, object);
        if (i !== -1)
          C.JSArray_methods.removeAt$1(this.lights, i);
      } else if (!object.$isCamera) {
        i = C.JSArray_methods.indexOf$1(this.objects, object);
        if (i !== -1) {
          C.JSArray_methods.removeAt$1(this.objects, i);
          this.__objectsRemoved.push(object);
          ai = C.JSArray_methods.indexOf$1(this.__objectsAdded, object);
          if (ai !== -1)
            C.JSArray_methods.removeAt$1(this.__objectsAdded, ai);
        }
      }
      for (t1 = object.children, c = 0; c < t1.length; ++c)
        this.removeObject$1(t1[c]);
    },
    Scene$0: function() {
      this.fog = null;
      this.overrideMaterial = null;
      this.matrixAutoUpdate = false;
      this.objects = [];
      this.lights = [];
      this.__objectsAdded = [];
      this.__objectsRemoved = [];
    }
  },
  Texture: {
    "^": "Object;id*,image<,mapping,wrapS,wrapT,magFilter,minFilter,format,type>,anisotropy,offset*,repeat*,generateMipmaps@,premultiplyAlpha,needsUpdate<,onUpdate,flipY,unpackAlignment,mipmaps,__webglTexture,__data",
    clone$0: function(_) {
      var clonedTexture = S.Texture$(this.image, this.mapping, this.wrapS, this.wrapT, this.magFilter, this.minFilter, this.format, this.type, this.anisotropy);
      clonedTexture.mipmaps = P.List_List$from(this.mipmaps, true, null);
      clonedTexture.offset.setFrom$1(this.get$offset(this));
      clonedTexture.repeat.setFrom$1(this.get$repeat(this));
      return clonedTexture;
    },
    get$_data: function() {
      var t1 = this.__data;
      if (t1 == null) {
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        this.__data = t1;
      }
      return t1;
    },
    $index: function(_, key) {
      return this.get$_data().$index(0, key);
    },
    $indexSet: function(_, key, value) {
      this.get$_data().$indexSet(0, key, value);
      return value;
    },
    Texture$9: function(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
      var t1 = $.TextureCount;
      $.TextureCount = t1 + 1;
      this.id = t1;
      t1 = this.mapping;
      this.mapping = t1 != null ? t1 : new S.UVMapping();
      this.set$offset(0, new T.Vector2(new Float32Array(H._checkLength(2))));
      t1 = new Float32Array(H._checkLength(2));
      t1[0] = 1;
      t1[1] = 1;
      this.set$repeat(0, new T.Vector2(t1));
      this.set$generateMipmaps(true);
      this.premultiplyAlpha = false;
      this.flipY = true;
      this.needsUpdate = false;
      this.onUpdate = null;
    },
    static: {Texture$: function(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
        var t1 = new S.Texture(null, image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, null, null, null, null, null, null, null, 4, [], null, null);
        t1.Texture$9(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        return t1;
      }}
  }
}],
["vector_math", "package:vector_math/vector_math.dart", , T, {
  "^": "",
  setFrustumMatrix: function(perspectiveMatrix, left, right, bottom, $top, near, far) {
    var two_near, right_minus_left, top_minus_bottom, far_minus_near, t1;
    two_near = 2 * near;
    right_minus_left = right - left;
    top_minus_bottom = $top - bottom;
    far_minus_near = far - near;
    t1 = perspectiveMatrix.setZero$0().storage;
    t1[0] = two_near / right_minus_left;
    t1[5] = two_near / top_minus_bottom;
    t1[8] = (right + left) / right_minus_left;
    t1[9] = ($top + bottom) / top_minus_bottom;
    t1[10] = -(far + near) / far_minus_near;
    t1[11] = -1;
    t1[14] = -(two_near * far) / far_minus_near;
  },
  setOrthographicMatrix: function(orthographicMatrix, left, right, bottom, $top, near, far) {
    var rml, tmb, fmn, t1;
    rml = right - left;
    tmb = $top - bottom;
    fmn = far - near;
    t1 = orthographicMatrix.setZero$0().storage;
    t1[0] = 2 / rml;
    t1[5] = 2 / tmb;
    t1[10] = -2 / fmn;
    t1[12] = -(right + left) / rml;
    t1[13] = -($top + bottom) / tmb;
    t1[14] = -(far + near) / fmn;
    t1[15] = 1;
  },
  Matrix3: {
    "^": "Object;storage>",
    setValues$9: function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
      var t1 = this.storage;
      t1[8] = arg8;
      t1[7] = arg7;
      t1[6] = arg6;
      t1[5] = arg5;
      t1[4] = arg4;
      t1[3] = arg3;
      t1[2] = arg2;
      t1[1] = arg1;
      t1[0] = arg0;
      return this;
    },
    setFrom$1: function(arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.get$storage(arg);
      if (8 >= t2.length)
        return H.ioore(t2, 8);
      t1[8] = t2[8];
      t2 = arg.get$storage(arg);
      if (7 >= t2.length)
        return H.ioore(t2, 7);
      t1[7] = t2[7];
      t2 = arg.get$storage(arg);
      if (6 >= t2.length)
        return H.ioore(t2, 6);
      t1[6] = t2[6];
      t2 = arg.get$storage(arg);
      if (5 >= t2.length)
        return H.ioore(t2, 5);
      t1[5] = t2[5];
      t2 = arg.get$storage(arg);
      if (4 >= t2.length)
        return H.ioore(t2, 4);
      t1[4] = t2[4];
      t2 = arg.get$storage(arg);
      if (3 >= t2.length)
        return H.ioore(t2, 3);
      t1[3] = t2[3];
      t2 = arg.get$storage(arg);
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      t1[2] = t2[2];
      t2 = arg.get$storage(arg);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t2[1];
      t2 = arg.get$storage(arg);
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      return "[0] " + this.getRow$1(0).toString$0(0) + "\n[1] " + this.getRow$1(1).toString$0(0) + "\n[2] " + this.getRow$1(2).toString$0(0) + "\n";
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 9)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >= 9)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    getRow$1: function(row) {
      var t1, t2, t3;
      t1 = new Float32Array(H._checkLength(3));
      t2 = this.storage;
      if (row >= 9)
        return H.ioore(t2, row);
      t1[0] = t2[row];
      t3 = 3 + row;
      if (t3 >= 9)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      t3 = 6 + row;
      if (t3 >= 9)
        return H.ioore(t2, t3);
      t1[2] = t2[t3];
      return new T.Vector3(t1);
    },
    clone$0: function(_) {
      var t1 = new T.Matrix3(new Float32Array(H._checkLength(9)));
      t1.setFrom$1(this);
      return t1;
    },
    $add: function(_, arg) {
      var t1, t2, t3;
      t1 = new Float32Array(H._checkLength(9));
      t2 = this.storage;
      t3 = J.getInterceptor$x(arg);
      t1[0] = C.JSNumber_methods.$add(t2[0], t3.get$storage(arg).$index(0, 0));
      t1[1] = C.JSNumber_methods.$add(t2[1], t3.get$storage(arg).$index(0, 1));
      t1[2] = C.JSNumber_methods.$add(t2[2], t3.get$storage(arg).$index(0, 2));
      t1[3] = C.JSNumber_methods.$add(t2[3], t3.get$storage(arg).$index(0, 3));
      t1[4] = C.JSNumber_methods.$add(t2[4], t3.get$storage(arg).$index(0, 4));
      t1[5] = C.JSNumber_methods.$add(t2[5], t3.get$storage(arg).$index(0, 5));
      t1[6] = C.JSNumber_methods.$add(t2[6], t3.get$storage(arg).$index(0, 6));
      t1[7] = C.JSNumber_methods.$add(t2[7], t3.get$storage(arg).$index(0, 7));
      t1[8] = C.JSNumber_methods.$add(t2[8], t3.get$storage(arg).$index(0, 8));
      return new T.Matrix3(t1);
    },
    $sub: function(_, arg) {
      var t1, t2, t3, t4, t5;
      t1 = new Float32Array(H._checkLength(9));
      t2 = this.storage;
      t3 = t2[0];
      t4 = J.getInterceptor$x(arg);
      t5 = t4.get$storage(arg);
      if (0 >= t5.length)
        return H.ioore(t5, 0);
      t5 = t5[0];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[0] = t3 - t5;
      t5 = t2[1];
      t3 = t4.get$storage(arg);
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t3 = t3[1];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[1] = t5 - t3;
      t3 = t2[2];
      t5 = t4.get$storage(arg);
      if (2 >= t5.length)
        return H.ioore(t5, 2);
      t5 = t5[2];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[2] = t3 - t5;
      t5 = t2[3];
      t3 = t4.get$storage(arg);
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t3 = t3[3];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[3] = t5 - t3;
      t3 = t2[4];
      t5 = t4.get$storage(arg);
      if (4 >= t5.length)
        return H.ioore(t5, 4);
      t5 = t5[4];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[4] = t3 - t5;
      t5 = t2[5];
      t3 = t4.get$storage(arg);
      if (5 >= t3.length)
        return H.ioore(t3, 5);
      t3 = t3[5];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[5] = t5 - t3;
      t3 = t2[6];
      t5 = t4.get$storage(arg);
      if (6 >= t5.length)
        return H.ioore(t5, 6);
      t5 = t5[6];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[6] = t3 - t5;
      t5 = t2[7];
      t3 = t4.get$storage(arg);
      if (7 >= t3.length)
        return H.ioore(t3, 7);
      t3 = t3[7];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[7] = t5 - t3;
      t2 = t2[8];
      t4 = t4.get$storage(arg);
      if (8 >= t4.length)
        return H.ioore(t4, 8);
      t4 = t4[8];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[8] = t2 - t4;
      return new T.Matrix3(t1);
    },
    $negate: function(_) {
      var t1, t2;
      t1 = new Float32Array(H._checkLength(9));
      t2 = this.storage;
      t1[0] = -t2[0];
      t1[1] = -t2[1];
      t1[2] = -t2[2];
      return new T.Matrix3(t1);
    },
    transpose$0: function() {
      var t1, temp;
      t1 = this.storage;
      temp = t1[3];
      t1[3] = t1[1];
      t1[1] = temp;
      temp = t1[6];
      t1[6] = t1[2];
      t1[2] = temp;
      temp = t1[7];
      t1[7] = t1[5];
      t1[5] = temp;
      return this;
    }
  },
  Matrix4: {
    "^": "Object;storage>",
    setValues$16: function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15) {
      var t1 = this.storage;
      t1[15] = arg15;
      t1[14] = arg14;
      t1[13] = arg13;
      t1[12] = arg12;
      t1[11] = arg11;
      t1[10] = arg10;
      t1[9] = arg9;
      t1[8] = arg8;
      t1[7] = arg7;
      t1[6] = arg6;
      t1[5] = arg5;
      t1[4] = arg4;
      t1[3] = arg3;
      t1[2] = arg2;
      t1[1] = arg1;
      t1[0] = arg0;
      return this;
    },
    setFrom$1: function(arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.get$storage(arg);
      if (15 >= t2.length)
        return H.ioore(t2, 15);
      t1[15] = t2[15];
      t2 = arg.get$storage(arg);
      if (14 >= t2.length)
        return H.ioore(t2, 14);
      t1[14] = t2[14];
      t2 = arg.get$storage(arg);
      if (13 >= t2.length)
        return H.ioore(t2, 13);
      t1[13] = t2[13];
      t2 = arg.get$storage(arg);
      if (12 >= t2.length)
        return H.ioore(t2, 12);
      t1[12] = t2[12];
      t2 = arg.get$storage(arg);
      if (11 >= t2.length)
        return H.ioore(t2, 11);
      t1[11] = t2[11];
      t2 = arg.get$storage(arg);
      if (10 >= t2.length)
        return H.ioore(t2, 10);
      t1[10] = t2[10];
      t2 = arg.get$storage(arg);
      if (9 >= t2.length)
        return H.ioore(t2, 9);
      t1[9] = t2[9];
      t2 = arg.get$storage(arg);
      if (8 >= t2.length)
        return H.ioore(t2, 8);
      t1[8] = t2[8];
      t2 = arg.get$storage(arg);
      if (7 >= t2.length)
        return H.ioore(t2, 7);
      t1[7] = t2[7];
      t2 = arg.get$storage(arg);
      if (6 >= t2.length)
        return H.ioore(t2, 6);
      t1[6] = t2[6];
      t2 = arg.get$storage(arg);
      if (5 >= t2.length)
        return H.ioore(t2, 5);
      t1[5] = t2[5];
      t2 = arg.get$storage(arg);
      if (4 >= t2.length)
        return H.ioore(t2, 4);
      t1[4] = t2[4];
      t2 = arg.get$storage(arg);
      if (3 >= t2.length)
        return H.ioore(t2, 3);
      t1[3] = t2[3];
      t2 = arg.get$storage(arg);
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      t1[2] = t2[2];
      t2 = arg.get$storage(arg);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t2[1];
      t2 = arg.get$storage(arg);
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      return "[0] " + this.getRow$1(0).toString$0(0) + "\n[1] " + this.getRow$1(1).toString$0(0) + "\n[2] " + this.getRow$1(2).toString$0(0) + "\n[3] " + this.getRow$1(3).toString$0(0) + "\n";
    },
    get$dimension: function() {
      return 4;
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 16)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >= 16)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    getRow$1: function(row) {
      var t1, t2, t3;
      t1 = new Float32Array(H._checkLength(4));
      t2 = this.storage;
      if (row >= 16)
        return H.ioore(t2, row);
      t1[0] = t2[row];
      t3 = 4 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      t3 = 8 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[2] = t2[t3];
      t3 = 12 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[3] = t2[t3];
      return new T.Vector4(t1);
    },
    clone$0: function(_) {
      var t1 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t1.setFrom$1(this);
      return t1;
    },
    $mul: function(_, arg) {
      var t1, t2, t3;
      if (!!arg.$isVector4) {
        t1 = new Float32Array(H._checkLength(4));
        t2 = this.storage;
        t3 = arg.storage;
        t1[3] = t2[3] * t3[0] + t2[7] * t3[1] + t2[11] * t3[2] + t2[15] * t3[3];
        t1[2] = t2[2] * t3[0] + t2[6] * t3[1] + t2[10] * t3[2] + t2[14] * t3[3];
        t1[1] = t2[1] * t3[0] + t2[5] * t3[1] + t2[9] * t3[2] + t2[13] * t3[3];
        t1[0] = t2[0] * t3[0] + t2[4] * t3[1] + t2[8] * t3[2] + t2[12] * t3[3];
        return new T.Vector4(t1);
      }
      if (!!arg.$isVector3) {
        t1 = new Float32Array(H._checkLength(3));
        t2 = this.storage;
        t3 = arg.storage;
        t1[0] = t2[0] * t3[0] + t2[4] * t3[1] + t2[8] * t3[2] + t2[12];
        t1[1] = t2[1] * t3[0] + t2[5] * t3[1] + t2[9] * t3[2] + t2[13];
        t1[2] = t2[2] * t3[0] + t2[6] * t3[1] + t2[10] * t3[2] + t2[14];
        return new T.Vector3(t1);
      }
      if (4 === arg.get$dimension()) {
        t1 = new Float32Array(H._checkLength(16));
        t2 = this.storage;
        t3 = arg.storage;
        t1[0] = t2[0] * t3[0] + t2[4] * t3[1] + t2[8] * t3[2] + t2[12] * t3[3];
        t1[4] = t2[0] * t3[4] + t2[4] * t3[5] + t2[8] * t3[6] + t2[12] * t3[7];
        t1[8] = t2[0] * t3[8] + t2[4] * t3[9] + t2[8] * t3[10] + t2[12] * t3[11];
        t1[12] = t2[0] * t3[12] + t2[4] * t3[13] + t2[8] * t3[14] + t2[12] * t3[15];
        t1[1] = t2[1] * t3[0] + t2[5] * t3[1] + t2[9] * t3[2] + t2[13] * t3[3];
        t1[5] = t2[1] * t3[4] + t2[5] * t3[5] + t2[9] * t3[6] + t2[13] * t3[7];
        t1[9] = t2[1] * t3[8] + t2[5] * t3[9] + t2[9] * t3[10] + t2[13] * t3[11];
        t1[13] = t2[1] * t3[12] + t2[5] * t3[13] + t2[9] * t3[14] + t2[13] * t3[15];
        t1[2] = t2[2] * t3[0] + t2[6] * t3[1] + t2[10] * t3[2] + t2[14] * t3[3];
        t1[6] = t2[2] * t3[4] + t2[6] * t3[5] + t2[10] * t3[6] + t2[14] * t3[7];
        t1[10] = t2[2] * t3[8] + t2[6] * t3[9] + t2[10] * t3[10] + t2[14] * t3[11];
        t1[14] = t2[2] * t3[12] + t2[6] * t3[13] + t2[10] * t3[14] + t2[14] * t3[15];
        t1[3] = t2[3] * t3[0] + t2[7] * t3[1] + t2[11] * t3[2] + t2[15] * t3[3];
        t1[7] = t2[3] * t3[4] + t2[7] * t3[5] + t2[11] * t3[6] + t2[15] * t3[7];
        t1[11] = t2[3] * t3[8] + t2[7] * t3[9] + t2[11] * t3[10] + t2[15] * t3[11];
        t1[15] = t2[3] * t3[12] + t2[7] * t3[13] + t2[11] * t3[14] + t2[15] * t3[15];
        return new T.Matrix4(t1);
      }
      throw H.wrapException(P.ArgumentError$(arg));
    },
    $add: function(_, arg) {
      var t1, t2, t3;
      t1 = new Float32Array(H._checkLength(16));
      t2 = this.storage;
      t3 = J.getInterceptor$x(arg);
      t1[0] = C.JSNumber_methods.$add(t2[0], t3.get$storage(arg).$index(0, 0));
      t1[1] = C.JSNumber_methods.$add(t2[1], t3.get$storage(arg).$index(0, 1));
      t1[2] = C.JSNumber_methods.$add(t2[2], t3.get$storage(arg).$index(0, 2));
      t1[3] = C.JSNumber_methods.$add(t2[3], t3.get$storage(arg).$index(0, 3));
      t1[4] = C.JSNumber_methods.$add(t2[4], t3.get$storage(arg).$index(0, 4));
      t1[5] = C.JSNumber_methods.$add(t2[5], t3.get$storage(arg).$index(0, 5));
      t1[6] = C.JSNumber_methods.$add(t2[6], t3.get$storage(arg).$index(0, 6));
      t1[7] = C.JSNumber_methods.$add(t2[7], t3.get$storage(arg).$index(0, 7));
      t1[8] = C.JSNumber_methods.$add(t2[8], t3.get$storage(arg).$index(0, 8));
      t1[9] = C.JSNumber_methods.$add(t2[9], t3.get$storage(arg).$index(0, 9));
      t1[10] = C.JSNumber_methods.$add(t2[10], t3.get$storage(arg).$index(0, 10));
      t1[11] = C.JSNumber_methods.$add(t2[11], t3.get$storage(arg).$index(0, 11));
      t1[12] = C.JSNumber_methods.$add(t2[12], t3.get$storage(arg).$index(0, 12));
      t1[13] = C.JSNumber_methods.$add(t2[13], t3.get$storage(arg).$index(0, 13));
      t1[14] = C.JSNumber_methods.$add(t2[14], t3.get$storage(arg).$index(0, 14));
      t1[15] = C.JSNumber_methods.$add(t2[15], t3.get$storage(arg).$index(0, 15));
      return new T.Matrix4(t1);
    },
    $sub: function(_, arg) {
      var t1, t2, t3, t4, t5;
      t1 = new Float32Array(H._checkLength(16));
      t2 = this.storage;
      t3 = t2[0];
      t4 = J.getInterceptor$x(arg);
      t5 = t4.get$storage(arg);
      if (0 >= t5.length)
        return H.ioore(t5, 0);
      t5 = t5[0];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[0] = t3 - t5;
      t5 = t2[1];
      t3 = t4.get$storage(arg);
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t3 = t3[1];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[1] = t5 - t3;
      t3 = t2[2];
      t5 = t4.get$storage(arg);
      if (2 >= t5.length)
        return H.ioore(t5, 2);
      t5 = t5[2];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[2] = t3 - t5;
      t5 = t2[3];
      t3 = t4.get$storage(arg);
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t3 = t3[3];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[3] = t5 - t3;
      t3 = t2[4];
      t5 = t4.get$storage(arg);
      if (4 >= t5.length)
        return H.ioore(t5, 4);
      t5 = t5[4];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[4] = t3 - t5;
      t5 = t2[5];
      t3 = t4.get$storage(arg);
      if (5 >= t3.length)
        return H.ioore(t3, 5);
      t3 = t3[5];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[5] = t5 - t3;
      t3 = t2[6];
      t5 = t4.get$storage(arg);
      if (6 >= t5.length)
        return H.ioore(t5, 6);
      t5 = t5[6];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[6] = t3 - t5;
      t5 = t2[7];
      t3 = t4.get$storage(arg);
      if (7 >= t3.length)
        return H.ioore(t3, 7);
      t3 = t3[7];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[7] = t5 - t3;
      t3 = t2[8];
      t5 = t4.get$storage(arg);
      if (8 >= t5.length)
        return H.ioore(t5, 8);
      t5 = t5[8];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[8] = t3 - t5;
      t5 = t2[9];
      t3 = t4.get$storage(arg);
      if (9 >= t3.length)
        return H.ioore(t3, 9);
      t3 = t3[9];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[9] = t5 - t3;
      t3 = t2[10];
      t5 = t4.get$storage(arg);
      if (10 >= t5.length)
        return H.ioore(t5, 10);
      t5 = t5[10];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[10] = t3 - t5;
      t5 = t2[11];
      t3 = t4.get$storage(arg);
      if (11 >= t3.length)
        return H.ioore(t3, 11);
      t3 = t3[11];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[11] = t5 - t3;
      t3 = t2[12];
      t5 = t4.get$storage(arg);
      if (12 >= t5.length)
        return H.ioore(t5, 12);
      t5 = t5[12];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[12] = t3 - t5;
      t5 = t2[13];
      t3 = t4.get$storage(arg);
      if (13 >= t3.length)
        return H.ioore(t3, 13);
      t3 = t3[13];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[13] = t5 - t3;
      t3 = t2[14];
      t5 = t4.get$storage(arg);
      if (14 >= t5.length)
        return H.ioore(t5, 14);
      t5 = t5[14];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[14] = t3 - t5;
      t2 = t2[15];
      t4 = t4.get$storage(arg);
      if (15 >= t4.length)
        return H.ioore(t4, 15);
      t4 = t4[15];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[15] = t2 - t4;
      return new T.Matrix4(t1);
    },
    $negate: function(_) {
      var t1, t2;
      t1 = new Float32Array(H._checkLength(16));
      t2 = this.storage;
      t1[0] = -t2[0];
      t1[1] = -t2[1];
      t1[2] = -t2[2];
      t1[3] = -t2[3];
      return new T.Matrix4(t1);
    },
    setZero$0: function() {
      var t1 = this.storage;
      t1[0] = 0;
      t1[1] = 0;
      t1[2] = 0;
      t1[3] = 0;
      t1[4] = 0;
      t1[5] = 0;
      t1[6] = 0;
      t1[7] = 0;
      t1[8] = 0;
      t1[9] = 0;
      t1[10] = 0;
      t1[11] = 0;
      t1[12] = 0;
      t1[13] = 0;
      t1[14] = 0;
      t1[15] = 0;
      return this;
    },
    setIdentity$0: function() {
      var t1 = this.storage;
      t1[0] = 1;
      t1[1] = 0;
      t1[2] = 0;
      t1[3] = 0;
      t1[4] = 0;
      t1[5] = 1;
      t1[6] = 0;
      t1[7] = 0;
      t1[8] = 0;
      t1[9] = 0;
      t1[10] = 1;
      t1[11] = 0;
      t1[12] = 0;
      t1[13] = 0;
      t1[14] = 0;
      t1[15] = 1;
      return this;
    },
    getTranslation$0: function() {
      var t1, z, y, x;
      t1 = this.storage;
      z = t1[14];
      y = t1[13];
      x = t1[12];
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(x, y, z);
      return t1;
    },
    copyInverse$1: function(arg) {
      var t1, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b00, b01, b02, b03, b04, b05, b06, b07, b08, b09, b10, b11, det, invDet, t2, t3;
      t1 = arg.get$storage(arg);
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      a00 = t1[0];
      t1 = arg.get$storage(arg);
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      a01 = t1[1];
      t1 = arg.get$storage(arg);
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      a02 = t1[2];
      t1 = arg.get$storage(arg);
      if (3 >= t1.length)
        return H.ioore(t1, 3);
      a03 = t1[3];
      t1 = arg.get$storage(arg);
      if (4 >= t1.length)
        return H.ioore(t1, 4);
      a10 = t1[4];
      t1 = arg.get$storage(arg);
      if (5 >= t1.length)
        return H.ioore(t1, 5);
      a11 = t1[5];
      t1 = arg.get$storage(arg);
      if (6 >= t1.length)
        return H.ioore(t1, 6);
      a12 = t1[6];
      t1 = arg.get$storage(arg);
      if (7 >= t1.length)
        return H.ioore(t1, 7);
      a13 = t1[7];
      t1 = arg.get$storage(arg);
      if (8 >= t1.length)
        return H.ioore(t1, 8);
      a20 = t1[8];
      t1 = arg.get$storage(arg);
      if (9 >= t1.length)
        return H.ioore(t1, 9);
      a21 = t1[9];
      t1 = arg.get$storage(arg);
      if (10 >= t1.length)
        return H.ioore(t1, 10);
      a22 = t1[10];
      t1 = arg.get$storage(arg);
      if (11 >= t1.length)
        return H.ioore(t1, 11);
      a23 = t1[11];
      t1 = arg.get$storage(arg);
      if (12 >= t1.length)
        return H.ioore(t1, 12);
      a30 = t1[12];
      t1 = arg.get$storage(arg);
      if (13 >= t1.length)
        return H.ioore(t1, 13);
      a31 = t1[13];
      t1 = arg.get$storage(arg);
      if (14 >= t1.length)
        return H.ioore(t1, 14);
      a32 = t1[14];
      t1 = arg.get$storage(arg);
      if (15 >= t1.length)
        return H.ioore(t1, 15);
      a33 = t1[15];
      b00 = a00 * a11 - a01 * a10;
      b01 = a00 * a12 - a02 * a10;
      b02 = a00 * a13 - a03 * a10;
      b03 = a01 * a12 - a02 * a11;
      b04 = a01 * a13 - a03 * a11;
      b05 = a02 * a13 - a03 * a12;
      b06 = a20 * a31 - a21 * a30;
      b07 = a20 * a32 - a22 * a30;
      b08 = a20 * a33 - a23 * a30;
      b09 = a21 * a32 - a22 * a31;
      b10 = a21 * a33 - a23 * a31;
      b11 = a22 * a33 - a23 * a32;
      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
      if (det === 0) {
        this.setFrom$1(arg);
        return 0;
      }
      invDet = 1 / det;
      t1 = this.storage;
      t1[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      t1[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      t1[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      t1[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      t2 = -a10;
      t1[4] = (t2 * b11 + a12 * b08 - a13 * b07) * invDet;
      t1[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      t3 = -a30;
      t1[6] = (t3 * b05 + a32 * b02 - a33 * b01) * invDet;
      t1[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      t1[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      t1[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      t1[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      t1[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      t1[12] = (t2 * b09 + a11 * b07 - a12 * b06) * invDet;
      t1[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      t1[14] = (t3 * b03 + a31 * b01 - a32 * b00) * invDet;
      t1[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
      return det;
    },
    multiply$1: function(_, arg) {
      var t1, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33, t2, n00, n01, n02, n03, n10, n11, n12, n13, n20, n21, n22, n23, n30, n31, n32, n33;
      t1 = this.storage;
      m00 = t1[0];
      m01 = t1[4];
      m02 = t1[8];
      m03 = t1[12];
      m10 = t1[1];
      m11 = t1[5];
      m12 = t1[9];
      m13 = t1[13];
      m20 = t1[2];
      m21 = t1[6];
      m22 = t1[10];
      m23 = t1[14];
      m30 = t1[3];
      m31 = t1[7];
      m32 = t1[11];
      m33 = t1[15];
      t2 = arg.storage;
      n00 = t2[0];
      n01 = t2[4];
      n02 = t2[8];
      n03 = t2[12];
      n10 = t2[1];
      n11 = t2[5];
      n12 = t2[9];
      n13 = t2[13];
      n20 = t2[2];
      n21 = t2[6];
      n22 = t2[10];
      n23 = t2[14];
      n30 = t2[3];
      n31 = t2[7];
      n32 = t2[11];
      n33 = t2[15];
      t1[0] = m00 * n00 + m01 * n10 + m02 * n20 + m03 * n30;
      t1[4] = m00 * n01 + m01 * n11 + m02 * n21 + m03 * n31;
      t1[8] = m00 * n02 + m01 * n12 + m02 * n22 + m03 * n32;
      t1[12] = m00 * n03 + m01 * n13 + m02 * n23 + m03 * n33;
      t1[1] = m10 * n00 + m11 * n10 + m12 * n20 + m13 * n30;
      t1[5] = m10 * n01 + m11 * n11 + m12 * n21 + m13 * n31;
      t1[9] = m10 * n02 + m11 * n12 + m12 * n22 + m13 * n32;
      t1[13] = m10 * n03 + m11 * n13 + m12 * n23 + m13 * n33;
      t1[2] = m20 * n00 + m21 * n10 + m22 * n20 + m23 * n30;
      t1[6] = m20 * n01 + m21 * n11 + m22 * n21 + m23 * n31;
      t1[10] = m20 * n02 + m21 * n12 + m22 * n22 + m23 * n32;
      t1[14] = m20 * n03 + m21 * n13 + m22 * n23 + m23 * n33;
      t1[3] = m30 * n00 + m31 * n10 + m32 * n20 + m33 * n30;
      t1[7] = m30 * n01 + m31 * n11 + m32 * n21 + m33 * n31;
      t1[11] = m30 * n02 + m31 * n12 + m32 * n22 + m33 * n32;
      t1[15] = m30 * n03 + m31 * n13 + m32 * n23 + m33 * n33;
      return this;
    },
    Matrix4$diagonal3Values$3: function(x, y, z) {
      var t1 = this.storage;
      t1[15] = 1;
      t1[10] = z;
      t1[5] = y;
      t1[0] = x;
    }
  },
  Quaternion: {
    "^": "Object;storage>",
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    get$z: function(_) {
      return this.storage[2];
    },
    get$w: function(_) {
      return this.storage[3];
    },
    clone$0: function(_) {
      var t1 = new T.Quaternion(new Float32Array(H._checkLength(4)));
      t1.Quaternion$copy$1(this);
      return t1;
    },
    get$length2: function() {
      var t1, _x, _y, _z, _w;
      t1 = this.storage;
      _x = t1[0];
      _y = t1[1];
      _z = t1[2];
      _w = t1[3];
      return _x * _x + _y * _y + _z * _z + _w * _w;
    },
    get$length: function(_) {
      return Math.sqrt(H.checkNum(this.get$length2()));
    },
    $add: function(_, other) {
      var t1, t2;
      t1 = this.storage;
      t2 = J.getInterceptor$x(other);
      return T.Quaternion$(C.JSNumber_methods.$add(t1[0], t2.get$storage(other).$index(0, 0)), C.JSNumber_methods.$add(t1[1], t2.get$storage(other).$index(0, 1)), C.JSNumber_methods.$add(t1[2], t2.get$storage(other).$index(0, 2)), C.JSNumber_methods.$add(t1[3], t2.get$storage(other).$index(0, 3)));
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t1[1];
      t6 = t3.get$storage(other);
      if (1 >= t6.length)
        return H.ioore(t6, 1);
      t6 = t6[1];
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = t1[2];
      t8 = t3.get$storage(other);
      if (2 >= t8.length)
        return H.ioore(t8, 2);
      t8 = t8[2];
      if (typeof t8 !== "number")
        return H.iae(t8);
      t1 = t1[3];
      t3 = t3.get$storage(other);
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t3 = t3[3];
      if (typeof t3 !== "number")
        return H.iae(t3);
      return T.Quaternion$(t2 - t4, t5 - t6, t7 - t8, t1 - t3);
    },
    $negate: function(_) {
      var t1 = this.storage;
      return T.Quaternion$(-t1[0], -t1[1], -t1[2], -t1[3]);
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, arg) {
      var t1 = this.storage;
      if (i >= 4)
        return H.ioore(t1, i);
      t1[i] = arg;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return H.S(t1[0]) + ", " + H.S(t1[1]) + ", " + H.S(t1[2]) + " @ " + H.S(t1[3]);
    },
    Quaternion$identity$0: function() {
      this.storage[3] = 1;
    },
    Quaternion$4: function(x, y, z, w) {
      var t1 = this.storage;
      t1[0] = x;
      t1[1] = y;
      t1[2] = z;
      t1[3] = w;
    },
    Quaternion$copy$1: function(original) {
      var t1, t2;
      t1 = this.storage;
      t2 = original.storage;
      t1[0] = t2[0];
      t1[1] = t2[1];
      t1[2] = t2[2];
      t1[3] = t2[3];
    },
    static: {Quaternion$: function(x, y, z, w) {
        var t1 = new T.Quaternion(new Float32Array(H._checkLength(4)));
        t1.Quaternion$4(x, y, z, w);
        return t1;
      }, Quaternion$identity: function() {
        var t1 = new T.Quaternion(new Float32Array(H._checkLength(4)));
        t1.Quaternion$identity$0();
        return t1;
      }}
  },
  Vector2: {
    "^": "Object;storage>",
    setFrom$1: function(other) {
      var t1, t2;
      t1 = this.storage;
      t2 = other.get$storage(other);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t2[1];
      t2 = other.get$storage(other);
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "]";
    },
    $negate: function(_) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = -t2;
      t3[1] = -t1;
      return new T.Vector2(t3);
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1 = t1[1];
      t3 = t3.get$storage(other);
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t3 = t3[1];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t5 = new Float32Array(H._checkLength(2));
      t5[0] = t2 - t4;
      t5[1] = t1 - t3;
      return new T.Vector2(t5);
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      t1 = t1[1];
      t3 = t3.get$storage(other);
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t3 = t3[1];
      t5 = new Float32Array(H._checkLength(2));
      t5[0] = t2 + t4;
      t5[1] = t1 + t3;
      return new T.Vector2(t5);
    },
    $mul: function(_, scale) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = t2 * scale;
      t3[1] = t1 * scale;
      return new T.Vector2(t3);
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 2)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >= 2)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    get$length: function(_) {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      return Math.sqrt(H.checkNum(t2 * t2 + t1 * t1));
    },
    get$length2: function() {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      return t2 * t2 + t1 * t1;
    },
    dot$1: function(other) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1 = t1[1];
      t3 = t3.get$storage(other);
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t3 = t3[1];
      if (typeof t3 !== "number")
        return H.iae(t3);
      return t2 * t4 + t1 * t3;
    },
    cross$1: function(other) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (1 >= t4.length)
        return H.ioore(t4, 1);
      t4 = t4[1];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1 = t1[1];
      t3 = t3.get$storage(other);
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3 = t3[0];
      if (typeof t3 !== "number")
        return H.iae(t3);
      return t2 * t4 - t1 * t3;
    },
    clone$0: function(_) {
      var t1 = new T.Vector2(new Float32Array(H._checkLength(2)));
      t1.setFrom$1(this);
      return t1;
    },
    get$r: function(_) {
      return this.storage[0];
    },
    get$g: function() {
      return this.storage[1];
    },
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    }
  },
  Vector3: {
    "^": "Object;storage>",
    setValues$3: function(x_, y_, z_) {
      var t1 = this.storage;
      t1[0] = x_;
      t1[1] = y_;
      t1[2] = z_;
      return this;
    },
    setFrom$1: function(other) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$storage(other);
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t1[0] = t3[0];
      t3 = t2.get$storage(other);
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t1[1] = t3[1];
      t2 = t2.get$storage(other);
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      t1[2] = t2[2];
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "]";
    },
    $negate: function(_) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t4.setValues$3(-t2, -t3, -t1);
      return t4;
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t1[1];
      t6 = t3.get$storage(other);
      if (1 >= t6.length)
        return H.ioore(t6, 1);
      t6 = t6[1];
      if (typeof t6 !== "number")
        return H.iae(t6);
      t1 = t1[2];
      t3 = t3.get$storage(other);
      if (2 >= t3.length)
        return H.ioore(t3, 2);
      t3 = t3[2];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t7.setValues$3(t2 - t4, t5 - t6, t1 - t3);
      return t7;
    },
    $add: function(_, other) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = J.getInterceptor$x(other);
      t3 = C.JSNumber_methods.$add(t1[0], t2.get$storage(other).$index(0, 0));
      t4 = C.JSNumber_methods.$add(t1[1], t2.get$storage(other).$index(0, 1));
      t2 = C.JSNumber_methods.$add(t1[2], t2.get$storage(other).$index(0, 2));
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(t3, t4, t2);
      return t1;
    },
    $mul: function(_, scale) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      if (typeof scale !== "number")
        return H.iae(scale);
      t3 = t1[1];
      t1 = t1[2];
      t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t4.setValues$3(t2 * scale, t3 * scale, t1 * scale);
      return t4;
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 3)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >= 3)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    get$length: function(_) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      return Math.sqrt(H.checkNum(t2 * t2 + t3 * t3 + t1 * t1));
    },
    get$length2: function() {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      return t2 * t2 + t3 * t3 + t1 * t1;
    },
    normalize$0: function(_) {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return this;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      t1[2] = t1[2] * l;
      return this;
    },
    dot$1: function(other) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t1[1];
      t6 = t3.get$storage(other);
      if (1 >= t6.length)
        return H.ioore(t6, 1);
      t6 = t6[1];
      if (typeof t6 !== "number")
        return H.iae(t6);
      t1 = t1[2];
      t3 = t3.get$storage(other);
      if (2 >= t3.length)
        return H.ioore(t3, 2);
      t3 = t3[2];
      if (typeof t3 !== "number")
        return H.iae(t3);
      return t2 * t4 + t5 * t6 + t1 * t3;
    },
    cross$1: function(other) {
      var t1, _x, _y, _z, t2, ox, oy, oz;
      t1 = this.storage;
      _x = t1[0];
      _y = t1[1];
      _z = t1[2];
      t1 = J.getInterceptor$x(other);
      t2 = t1.get$storage(other);
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      ox = t2[0];
      t2 = t1.get$storage(other);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      oy = t2[1];
      t1 = t1.get$storage(other);
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      oz = t1[2];
      if (typeof oz !== "number")
        return H.iae(oz);
      if (typeof oy !== "number")
        return H.iae(oy);
      if (typeof ox !== "number")
        return H.iae(ox);
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(_y * oz - _z * oy, _z * ox - _x * oz, _x * oy - _y * ox);
      return t1;
    },
    applyProjection$1: function(arg) {
      var t1, _x, _y, _z, t2, t3, t4, t5, d;
      t1 = this.storage;
      _x = t1[0];
      _y = t1[1];
      _z = t1[2];
      t2 = arg.get$storage(arg);
      if (3 >= t2.length)
        return H.ioore(t2, 3);
      t2 = t2[3];
      t3 = arg.get$storage(arg);
      if (7 >= t3.length)
        return H.ioore(t3, 7);
      t3 = t3[7];
      t4 = arg.get$storage(arg);
      if (11 >= t4.length)
        return H.ioore(t4, 11);
      t4 = t4[11];
      t5 = arg.get$storage(arg);
      if (15 >= t5.length)
        return H.ioore(t5, 15);
      d = 1 / (t2 * _x + t3 * _y + t4 * _z + t5[15]);
      t5 = arg.get$storage(arg);
      if (0 >= t5.length)
        return H.ioore(t5, 0);
      t5 = t5[0];
      t4 = arg.get$storage(arg);
      if (4 >= t4.length)
        return H.ioore(t4, 4);
      t4 = t4[4];
      t3 = arg.get$storage(arg);
      if (8 >= t3.length)
        return H.ioore(t3, 8);
      t3 = t3[8];
      t2 = arg.get$storage(arg);
      if (12 >= t2.length)
        return H.ioore(t2, 12);
      t1[0] = (t5 * _x + t4 * _y + t3 * _z + t2[12]) * d;
      t2 = arg.get$storage(arg);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t2 = t2[1];
      t3 = arg.get$storage(arg);
      if (5 >= t3.length)
        return H.ioore(t3, 5);
      t3 = t3[5];
      t4 = arg.get$storage(arg);
      if (9 >= t4.length)
        return H.ioore(t4, 9);
      t4 = t4[9];
      t5 = arg.get$storage(arg);
      if (13 >= t5.length)
        return H.ioore(t5, 13);
      t1[1] = (t2 * _x + t3 * _y + t4 * _z + t5[13]) * d;
      t5 = arg.get$storage(arg);
      if (2 >= t5.length)
        return H.ioore(t5, 2);
      t5 = t5[2];
      t4 = arg.get$storage(arg);
      if (6 >= t4.length)
        return H.ioore(t4, 6);
      t4 = t4[6];
      t3 = arg.get$storage(arg);
      if (10 >= t3.length)
        return H.ioore(t3, 10);
      t3 = t3[10];
      t2 = arg.get$storage(arg);
      if (14 >= t2.length)
        return H.ioore(t2, 14);
      t1[2] = (t5 * _x + t4 * _y + t3 * _z + t2[14]) * d;
      return this;
    },
    add$1: function(_, arg) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(arg);
      t4 = t3.get$storage(arg);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[0] = t2 + t4;
      t4 = t1[1];
      t2 = t3.get$storage(arg);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t2 = t2[1];
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1[1] = t4 + t2;
      t2 = t1[2];
      t3 = t3.get$storage(arg);
      if (2 >= t3.length)
        return H.ioore(t3, 2);
      t3 = t3[2];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[2] = t2 + t3;
      return this;
    },
    sub$1: function(arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.storage;
      t1[0] = t1[0] - t2[0];
      t1[1] = t1[1] - t2[1];
      t1[2] = t1[2] - t2[2];
      return this;
    },
    multiply$1: function(_, arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.storage;
      t1[0] = t1[0] * t2[0];
      t1[1] = t1[1] * t2[1];
      t1[2] = t1[2] * t2[2];
      return this;
    },
    clone$0: function(_) {
      var t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setFrom$1(this);
      return t1;
    },
    get$r: function(_) {
      return this.storage[0];
    },
    get$g: function() {
      return this.storage[1];
    },
    get$b: function(_) {
      return this.storage[2];
    },
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    get$z: function(_) {
      return this.storage[2];
    },
    static: {Vector3$zero: function() {
        return new T.Vector3(new Float32Array(H._checkLength(3)));
      }}
  },
  Vector4: {
    "^": "Object;storage>",
    setValues$4: function(x_, y_, z_, w_) {
      var t1 = this.storage;
      t1[3] = w_;
      t1[2] = z_;
      t1[1] = y_;
      t1[0] = x_;
      return this;
    },
    setFrom$1: function(other) {
      var t1, t2;
      t1 = this.storage;
      t2 = other.get$storage(other);
      if (3 >= t2.length)
        return H.ioore(t2, 3);
      t1[3] = t2[3];
      t2 = other.get$storage(other);
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      t1[2] = t2[2];
      t2 = other.get$storage(other);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t2[1];
      t2 = other.get$storage(other);
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "," + H.S(t1[3]);
    },
    $negate: function(_) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t4 = t1[2];
      t1 = t1[3];
      t5 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t5.setValues$4(-t2, -t3, -t4, -t1);
      return t5;
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t1[1];
      t6 = t3.get$storage(other);
      if (1 >= t6.length)
        return H.ioore(t6, 1);
      t6 = t6[1];
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = t1[2];
      t8 = t3.get$storage(other);
      if (2 >= t8.length)
        return H.ioore(t8, 2);
      t8 = t8[2];
      if (typeof t8 !== "number")
        return H.iae(t8);
      t1 = t1[3];
      t3 = t3.get$storage(other);
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t3 = t3[3];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t9 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t9.setValues$4(t2 - t4, t5 - t6, t7 - t8, t1 - t3);
      return t9;
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = J.getInterceptor$x(other);
      t3 = C.JSNumber_methods.$add(t1[0], t2.get$storage(other).$index(0, 0));
      t4 = C.JSNumber_methods.$add(t1[1], t2.get$storage(other).$index(0, 1));
      t5 = C.JSNumber_methods.$add(t1[2], t2.get$storage(other).$index(0, 2));
      t2 = C.JSNumber_methods.$add(t1[3], t2.get$storage(other).$index(0, 3));
      t1 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t1.setValues$4(t3, t4, t5, t2);
      return t1;
    },
    $mul: function(_, scale) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      if (typeof scale !== "number")
        return H.iae(scale);
      t3 = t1[1];
      t4 = t1[2];
      t1 = t1[3];
      t5 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t5.setValues$4(t2 * scale, t3 * scale, t4 * scale, t1 * scale);
      return t5;
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >= 4)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    get$length: function(_) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t4 = t1[2];
      t1 = t1[3];
      return Math.sqrt(H.checkNum(t2 * t2 + t3 * t3 + t4 * t4 + t1 * t1));
    },
    get$length2: function() {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t4 = t1[2];
      t1 = t1[3];
      return t2 * t2 + t3 * t3 + t4 * t4 + t1 * t1;
    },
    dot$1: function(other) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t1[1];
      t6 = t3.get$storage(other);
      if (1 >= t6.length)
        return H.ioore(t6, 1);
      t6 = t6[1];
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = t1[2];
      t8 = t3.get$storage(other);
      if (2 >= t8.length)
        return H.ioore(t8, 2);
      t8 = t8[2];
      if (typeof t8 !== "number")
        return H.iae(t8);
      t1 = t1[3];
      t3 = t3.get$storage(other);
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t3 = t3[3];
      if (typeof t3 !== "number")
        return H.iae(t3);
      return t2 * t4 + t5 * t6 + t7 * t8 + t1 * t3;
    },
    multiply$1: function(_, arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.storage;
      t1[0] = t1[0] * t2[0];
      t1[1] = t1[1] * t2[1];
      t1[2] = t1[2] * t2[2];
      t1[3] = t1[3] * t2[3];
      return this;
    },
    clone$0: function(_) {
      var t1 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t1.setFrom$1(this);
      return t1;
    },
    get$r: function(_) {
      return this.storage[0];
    },
    get$g: function() {
      return this.storage[1];
    },
    get$b: function(_) {
      return this.storage[2];
    },
    get$a: function(_) {
      return this.storage[3];
    },
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    get$z: function(_) {
      return this.storage[2];
    },
    get$w: function(_) {
      return this.storage[3];
    }
  }
}],
];
parseReflectionData(dart);
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$ns(receiver).$mul(receiver, a0);
};
J.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return J.getInterceptor$n(receiver).$negate(receiver);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.activeTexture$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).activeTexture$1(receiver, a0);
};
J.attachShader$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).attachShader$2(receiver, a0, a1);
};
J.bindBuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindBuffer$2(receiver, a0, a1);
};
J.bindFramebuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindFramebuffer$2(receiver, a0, a1);
};
J.bindRenderbuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindRenderbuffer$2(receiver, a0, a1);
};
J.bindTexture$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindTexture$2(receiver, a0, a1);
};
J.blendEquation$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).blendEquation$1(receiver, a0);
};
J.blendEquationSeparate$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).blendEquationSeparate$2(receiver, a0, a1);
};
J.blendFunc$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).blendFunc$2(receiver, a0, a1);
};
J.blendFuncSeparate$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).blendFuncSeparate$4(receiver, a0, a1, a2, a3);
};
J.bufferDataTyped$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bufferDataTyped$3(receiver, a0, a1, a2);
};
J.clear$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).clear$1(receiver, a0);
};
J.clearColor$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearColor$4(receiver, a0, a1, a2, a3);
};
J.clearDepth$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).clearDepth$1(receiver, a0);
};
J.clearStencil$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).clearStencil$1(receiver, a0);
};
J.clone$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).clone$0(receiver);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.compileShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).compileShader$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createBuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createBuffer$0(receiver);
};
J.createFramebuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createFramebuffer$0(receiver);
};
J.createProgram$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createProgram$0(receiver);
};
J.createRenderbuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createRenderbuffer$0(receiver);
};
J.createShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).createShader$1(receiver, a0);
};
J.createTexture$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createTexture$0(receiver);
};
J.cullFace$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).cullFace$1(receiver, a0);
};
J.deleteShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).deleteShader$1(receiver, a0);
};
J.depthFunc$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).depthFunc$1(receiver, a0);
};
J.depthMask$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).depthMask$1(receiver, a0);
};
J.disable$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).disable$1(receiver, a0);
};
J.disableVertexAttribArray$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).disableVertexAttribArray$1(receiver, a0);
};
J.drawArrays$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).drawArrays$3(receiver, a0, a1, a2);
};
J.drawElements$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).drawElements$4(receiver, a0, a1, a2, a3);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.enable$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).enable$1(receiver, a0);
};
J.enableVertexAttribArray$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).enableVertexAttribArray$1(receiver, a0);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.framebufferRenderbuffer$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).framebufferRenderbuffer$4(receiver, a0, a1, a2, a3);
};
J.framebufferTexture2D$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).framebufferTexture2D$5(receiver, a0, a1, a2, a3, a4);
};
J.frontFace$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).frontFace$1(receiver, a0);
};
J.generateMipmap$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).generateMipmap$1(receiver, a0);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$height$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$height(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$isInfinite$n = function(receiver) {
  return J.getInterceptor$n(receiver).get$isInfinite(receiver);
};
J.get$isNaN$n = function(receiver) {
  return J.getInterceptor$n(receiver).get$isNaN(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$next$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$next(receiver);
};
J.get$r$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$r(receiver);
};
J.get$start$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$start(receiver);
};
J.get$storage$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$storage(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$visible$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$visible(receiver);
};
J.get$w$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$w(receiver);
};
J.get$width$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$width(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.get$z$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$z(receiver);
};
J.getAttribLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getAttribLocation$2(receiver, a0, a1);
};
J.getContext3d$5$alpha$antialias$premultipliedAlpha$preserveDrawingBuffer$stencil$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).getContext3d$5$alpha$antialias$premultipliedAlpha$preserveDrawingBuffer$stencil(receiver, a0, a1, a2, a3, a4);
};
J.getError$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getError$0(receiver);
};
J.getExtension$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getExtension$1(receiver, a0);
};
J.getParameter$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getParameter$1(receiver, a0);
};
J.getProgramParameter$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getProgramParameter$2(receiver, a0, a1);
};
J.getShaderInfoLog$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getShaderInfoLog$1(receiver, a0);
};
J.getShaderParameter$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getShaderParameter$2(receiver, a0, a1);
};
J.getShaderPrecisionFormat$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getShaderPrecisionFormat$2(receiver, a0, a1);
};
J.getUniformLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getUniformLocation$2(receiver, a0, a1);
};
J.indexOf$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
};
J.lineWidth$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).lineWidth$1(receiver, a0);
};
J.linkProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).linkProgram$1(receiver, a0);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.normalize$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).normalize$0(receiver);
};
J.pixelStorei$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).pixelStorei$2(receiver, a0, a1);
};
J.polygonOffset$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).polygonOffset$2(receiver, a0, a1);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.renderbufferStorage$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).renderbufferStorage$4(receiver, a0, a1, a2, a3);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$id$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$id(receiver, value);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.set$parent$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$parent(receiver, value);
};
J.set$value$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$value(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.shaderSource$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).shaderSource$2(receiver, a0, a1);
};
J.sort$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
};
J.texImage2D$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).texImage2D$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.texImage2DTyped$9$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
  return J.getInterceptor$x(receiver).texImage2DTyped$9(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8);
};
J.texParameterf$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).texParameterf$3(receiver, a0, a1, a2);
};
J.texParameteri$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).texParameteri$3(receiver, a0, a1, a2);
};
J.toDouble$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toDouble$0(receiver);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.uniform1f$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1f$2(receiver, a0, a1);
};
J.uniform1fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1fv$2(receiver, a0, a1);
};
J.uniform1i$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1i$2(receiver, a0, a1);
};
J.uniform1iv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1iv$2(receiver, a0, a1);
};
J.uniform2f$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniform2f$3(receiver, a0, a1, a2);
};
J.uniform2fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform2fv$2(receiver, a0, a1);
};
J.uniform3f$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).uniform3f$4(receiver, a0, a1, a2, a3);
};
J.uniform3fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform3fv$2(receiver, a0, a1);
};
J.uniform3iv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform3iv$2(receiver, a0, a1);
};
J.uniform4f$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).uniform4f$5(receiver, a0, a1, a2, a3, a4);
};
J.uniform4fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform4fv$2(receiver, a0, a1);
};
J.uniformMatrix2fv$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniformMatrix2fv$3(receiver, a0, a1, a2);
};
J.uniformMatrix3fv$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniformMatrix3fv$3(receiver, a0, a1, a2);
};
J.uniformMatrix4fv$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniformMatrix4fv$3(receiver, a0, a1, a2);
};
J.useProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).useProgram$1(receiver, a0);
};
J.vertexAttribPointer$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).vertexAttribPointer$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.viewport$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).viewport$4(receiver, a0, a1, a2, a3);
};
C.JSArray_methods = J.JSArray.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C_OutOfMemoryError = new P.OutOfMemoryError();
C.C__JSRandom = new P._JSRandom();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_gkc = function() {
  function typeNameInChrome(o) {
    var constructor = o.constructor;
    if (constructor) {
      var name = constructor.name;
      if (name) return name;
    }
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_gkc0 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
C.JS_CONST_s8I = function(_, letter) { return letter.toUpperCase(); };
{
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    $dart_deferred_initializers[hunkHash](globalsHolder, $);
    init.deferredInitialized[hunkHash] = true;
  };
}
init.deferredLibraryUris = {};
init.deferredLibraryHashes = {};
$.IsolateNatives_enableSpawnWorker = null;
$.RawReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.printToZone = null;
$._nextCallback = null;
$._lastCallback = null;
$._lastPriorityCallback = null;
$._isInCallbackLoop = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Device__isOpera = null;
$.Device__isIE = null;
$.Device__isFirefox = null;
$.Device__isWebKit = null;
$.Device__cachedCssPrefix = null;
$.container = null;
$.camera = null;
$.scene = null;
$.renderer = null;
$.__ShaderChunk = null;
$.__UniformsLib = null;
$.__ShaderLib = null;
$.GeometryCount = 0;
$.Object3DCount = 0;
$.MaterialCount = 0;
$.TextureCount = 0;
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null, toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      null.$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }
  }());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      (void 0).$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }
  }());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      null.$method$;
    } catch (e) {
      return e.message;
    }
  }());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      (void 0).$method$;
    } catch (e) {
      return e.message;
    }
  }());
});
Isolate.$lazy($, "scheduleImmediateClosure", "_AsyncRun_scheduleImmediateClosure", "get$_AsyncRun_scheduleImmediateClosure", function() {
  return P._AsyncRun__initializeScheduleImmediate();
});
Isolate.$lazy($, "_toStringVisiting", "IterableBase__toStringVisiting", "get$IterableBase__toStringVisiting", function() {
  return [];
});
Isolate.$lazy($, "intersectionPoints", "intersectionPoints", "get$intersectionPoints", function() {
  return H.setRuntimeTypeInfo([], [T.Vector2]);
});
Isolate.$lazy($, "Lines", "Lines", "get$Lines", function() {
  return H.setRuntimeTypeInfo([], [E.LineGroup]);
});
Isolate.$lazy($, "Horizon", "Horizon", "get$Horizon", function() {
  return new E.LineGroup(H.setRuntimeTypeInfo([], [E.LineSegment]));
});
Isolate.$lazy($, "__projector", "CameraHelper___projector", "get$CameraHelper___projector", function() {
  return S.Projector$();
});
Isolate.$lazy($, "__v", "CameraHelper___v", "get$CameraHelper___v", function() {
  return T.Vector3$zero();
});
Isolate.$lazy($, "__c", "CameraHelper___c", "get$CameraHelper___c", function() {
  return S.Camera$(0, 0);
});

init.metadata = [{func: "args0"},
{func: "void_", void: true},
{func: "args1", args: [null]},
{func: "dynamic__dynamic_String", args: [null, P.String]},
{func: "dynamic__String", args: [P.String]},
{func: "dynamic__void_", args: [{func: "void_", void: true}]},
{func: "args2", args: [null, null]},
{func: "dynamic__Symbol_dynamic", args: [P.Symbol, null]},
{func: "String__int", ret: P.String, args: [P.$int]},
{func: "Object___Object", ret: P.Object, opt: [P.Object]},
{func: "double__int", ret: P.$double, args: [P.$int]},
{func: "void___Object", void: true, opt: [P.Object]},
{func: "void__num__num_num", void: true, args: [P.num], opt: [P.num, P.num]},
{func: "void___num", void: true, opt: [P.num]},
{func: "dynamic__String_dynamic", args: [P.String, null]},
{func: "int__dynamic", ret: P.$int, args: [null]},
{func: "dynamic__int", args: [P.$int]},
{func: "dynamic__int_dynamic", args: [P.$int, null]},
{func: "dynamic__Vector3", args: [T.Vector3]},
{func: "dynamic__Face", args: [S.Face]},
{func: "dynamic__num_Vector3", args: [P.num, T.Vector3]},
{func: "dynamic__Map", args: [[P.Map, P.String, S.Uniform]]},
{func: "void__void_", void: true, args: [{func: "void_", void: true}]},
{func: "bool__dynamic_dynamic", ret: P.bool, args: [null, null]},
{func: "int__Comparable_Comparable", ret: P.$int, args: [P.Comparable, P.Comparable]},
{func: "bool__Object_Object", ret: P.bool, args: [P.Object, P.Object]},
{func: "int__Object", ret: P.$int, args: [P.Object]},
{func: "void__double", void: true, args: [P.$double]},
,
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {
  }
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
;
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
function init() {
  Isolate.$isolateProperties = Object.create(null);
  init.allClasses = Object.create(null);
  init.getTypeFromName = function(name) {
    return init.allClasses[name];
  };
  init.interceptorsByTag = Object.create(null);
  init.leafTags = Object.create(null);
  init.finishedClasses = Object.create(null);
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    if (!init.lazies)
      init.lazies = Object.create(null);
    init.lazies[fieldName] = getterName;
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined)
              $[fieldName] = null;
          }
        } else
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var staticNames = Object.keys(isolateProperties);
      for (var i = 0; i < staticNames.length; i++) {
        var staticName = staticNames[i];
        this[staticName] = isolateProperties[staticName];
      }
      var lazies = init.lazies;
      var lazyInitializers = lazies ? Object.keys(lazies) : [];
      for (var i = 0; i < lazyInitializers.length; i++)
        this[lazies[lazyInitializers[i]]] = null;
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
      for (var i = 0; i < lazyInitializers.length; i++) {
        var lazyInitName = lazies[lazyInitializers[i]];
        this[lazyInitName] = isolateProperties[lazyInitName];
      }
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    return Isolate;
  };
}
!function() {
  function intern(s) {
    var o = {};
    o[s] = 1;
    return Object.keys(convertToFastObject(o))[0];
  }
  init.getIsolateTag = function(name) {
    return intern("___dart_" + name + init.isolateTag);
  };
  var tableProperty = "___dart_isolate_tags_";
  var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
  var rootProperty = "_ZxYxX";
  for (var i = 0;; i++) {
    var property = intern(rootProperty + "_" + i + "_");
    if (!(property in usedProperties)) {
      usedProperties[property] = 1;
      init.isolateTag = property;
      break;
    }
  }
  init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
}();
;// BEGIN invoke [main].
(function(callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }
  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].removeEventListener("load", onLoad, false);
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i)
    scripts[i].addEventListener("load", onLoad, false);
})(function(currentScript) {
  init.currentScript = currentScript;
  if (typeof dartMainRunner === "function")
    dartMainRunner(function(a) {
      H.startRootIsolate(E.main$closure(), a);
    }, []);
  else
    (function(a) {
      H.startRootIsolate(E.main$closure(), a);
    })([]);
});
;
// END invoke [main].
})()

//# sourceMappingURL=index.dart.js.map
